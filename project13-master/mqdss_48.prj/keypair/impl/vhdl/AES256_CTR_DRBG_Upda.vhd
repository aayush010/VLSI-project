-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES256_CTR_DRBG_Upda is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    V_ce0 : OUT STD_LOGIC;
    V_we0 : OUT STD_LOGIC;
    V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    V_ce1 : OUT STD_LOGIC;
    V_we1 : OUT STD_LOGIC;
    V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES256_CTR_DRBG_Upda is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_19_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_19_reg_921 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal V_addr_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_548_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln331_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_0_0_2_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal test_0_1_2_reg_948 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_0_2_2_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal test_0_3_2_reg_958 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_1_0_2_reg_963 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal test_1_1_2_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_1_2_2_reg_973 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal test_1_3_2_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_2_0_2_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal test_2_1_2_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_2_2_2_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal test_2_3_2_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_3_0_2_reg_1003 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_KeyExpansion_fu_502_ap_ready : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_ap_done : STD_LOGIC;
    signal test_3_1_2_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_3_2_2_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal test_3_3_2_reg_1018 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_561_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_1023 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_Cipher_fu_477_ap_ready : STD_LOGIC;
    signal grp_Cipher_fu_477_ap_done : STD_LOGIC;
    signal test_0_2_reg_1041 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_0_3_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_1_0_reg_1051 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_1_1_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_1_2_reg_1061 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_1_3_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_2_0_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_2_1_reg_1076 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_2_2_reg_1081 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_2_3_reg_1086 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_3_0_reg_1091 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_3_1_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_3_2_reg_1101 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_3_3_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_797_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1114 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln347_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln347_reg_1119 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln346_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_fu_814_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_18_reg_1132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln348_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce0 : STD_LOGIC;
    signal ctx_RoundKey_we0 : STD_LOGIC;
    signal ctx_RoundKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce1 : STD_LOGIC;
    signal ctx_RoundKey_we1 : STD_LOGIC;
    signal ctx_RoundKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_assign_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buffer_assign_ce0 : STD_LOGIC;
    signal buffer_assign_we0 : STD_LOGIC;
    signal buffer_assign_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_assign_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_assign_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buffer_assign_ce1 : STD_LOGIC;
    signal buffer_assign_we1 : STD_LOGIC;
    signal buffer_assign_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_assign_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_start : STD_LOGIC;
    signal grp_Cipher_fu_477_ap_idle : STD_LOGIC;
    signal grp_Cipher_fu_477_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_RoundKey_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_477_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_RoundKey_ce1 : STD_LOGIC;
    signal grp_Cipher_fu_477_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_477_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_502_ap_start : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_ap_idle : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_502_RoundKey_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_RoundKey_we0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_RoundKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_502_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_502_RoundKey_ce1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_RoundKey_we1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_RoundKey_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_502_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeyExpansion_fu_502_Key_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_502_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeyExpansion_fu_502_Key_ce1 : STD_LOGIC;
    signal i_0_reg_430 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal j_0_reg_442 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln328_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_454 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_3_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_Cipher_fu_477_ap_start_reg : STD_LOGIC := '0';
    signal grp_KeyExpansion_fu_502_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln331_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln189_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln190_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln191_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln192_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln193_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln195_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln197_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln199_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln200_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_1_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln334_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln330_fu_525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln187_fu_640_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln188_fu_651_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln189_fu_661_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln190_fu_671_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln191_fu_681_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln192_fu_691_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln193_fu_701_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln194_fu_711_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln195_fu_721_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln196_fu_731_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln197_fu_741_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln198_fu_751_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln199_fu_761_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln200_fu_771_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln201_fu_781_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln_fu_820_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component Cipher IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_we0 : OUT STD_LOGIC;
        RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_we1 : OUT STD_LOGIC;
        RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Key_ce0 : OUT STD_LOGIC;
        Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Key_ce1 : OUT STD_LOGIC;
        Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES256_CTR_DRBG_Ubkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES256_CTR_DRBG_Ucud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ctx_RoundKey_U : component AES256_CTR_DRBG_Ubkb
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_RoundKey_address0,
        ce0 => ctx_RoundKey_ce0,
        we0 => ctx_RoundKey_we0,
        d0 => grp_KeyExpansion_fu_502_RoundKey_d0,
        q0 => ctx_RoundKey_q0,
        address1 => ctx_RoundKey_address1,
        ce1 => ctx_RoundKey_ce1,
        we1 => ctx_RoundKey_we1,
        d1 => grp_KeyExpansion_fu_502_RoundKey_d1,
        q1 => ctx_RoundKey_q1);

    buffer_assign_U : component AES256_CTR_DRBG_Ucud
    generic map (
        DataWidth => 8,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_assign_address0,
        ce0 => buffer_assign_ce0,
        we0 => buffer_assign_we0,
        d0 => buffer_assign_d0,
        q0 => buffer_assign_q0,
        address1 => buffer_assign_address1,
        ce1 => buffer_assign_ce1,
        we1 => buffer_assign_we1,
        d1 => buffer_assign_d1,
        q1 => buffer_assign_q1);

    grp_Cipher_fu_477 : component Cipher
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Cipher_fu_477_ap_start,
        ap_done => grp_Cipher_fu_477_ap_done,
        ap_idle => grp_Cipher_fu_477_ap_idle,
        ap_ready => grp_Cipher_fu_477_ap_ready,
        state_0_0_read => test_0_0_2_reg_943,
        state_0_1_read => test_0_1_2_reg_948,
        state_0_2_read => test_0_2_2_reg_953,
        state_0_3_read => test_0_3_2_reg_958,
        state_1_0_read => test_1_0_2_reg_963,
        state_1_1_read => test_1_1_2_reg_968,
        state_1_2_read => test_1_2_2_reg_973,
        state_1_3_read => test_1_3_2_reg_978,
        state_2_0_read => test_2_0_2_reg_983,
        state_2_1_read => test_2_1_2_reg_988,
        state_2_2_read => test_2_2_2_reg_993,
        state_2_3_read => test_2_3_2_reg_998,
        state_3_0_read => test_3_0_2_reg_1003,
        state_3_1_read => test_3_1_2_reg_1008,
        state_3_2_read => test_3_2_2_reg_1013,
        state_3_3_read => test_3_3_2_reg_1018,
        RoundKey_address0 => grp_Cipher_fu_477_RoundKey_address0,
        RoundKey_ce0 => grp_Cipher_fu_477_RoundKey_ce0,
        RoundKey_q0 => ctx_RoundKey_q0,
        RoundKey_address1 => grp_Cipher_fu_477_RoundKey_address1,
        RoundKey_ce1 => grp_Cipher_fu_477_RoundKey_ce1,
        RoundKey_q1 => ctx_RoundKey_q1,
        ap_return_0 => grp_Cipher_fu_477_ap_return_0,
        ap_return_1 => grp_Cipher_fu_477_ap_return_1,
        ap_return_2 => grp_Cipher_fu_477_ap_return_2,
        ap_return_3 => grp_Cipher_fu_477_ap_return_3,
        ap_return_4 => grp_Cipher_fu_477_ap_return_4,
        ap_return_5 => grp_Cipher_fu_477_ap_return_5,
        ap_return_6 => grp_Cipher_fu_477_ap_return_6,
        ap_return_7 => grp_Cipher_fu_477_ap_return_7,
        ap_return_8 => grp_Cipher_fu_477_ap_return_8,
        ap_return_9 => grp_Cipher_fu_477_ap_return_9,
        ap_return_10 => grp_Cipher_fu_477_ap_return_10,
        ap_return_11 => grp_Cipher_fu_477_ap_return_11,
        ap_return_12 => grp_Cipher_fu_477_ap_return_12,
        ap_return_13 => grp_Cipher_fu_477_ap_return_13,
        ap_return_14 => grp_Cipher_fu_477_ap_return_14,
        ap_return_15 => grp_Cipher_fu_477_ap_return_15);

    grp_KeyExpansion_fu_502 : component KeyExpansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeyExpansion_fu_502_ap_start,
        ap_done => grp_KeyExpansion_fu_502_ap_done,
        ap_idle => grp_KeyExpansion_fu_502_ap_idle,
        ap_ready => grp_KeyExpansion_fu_502_ap_ready,
        RoundKey_address0 => grp_KeyExpansion_fu_502_RoundKey_address0,
        RoundKey_ce0 => grp_KeyExpansion_fu_502_RoundKey_ce0,
        RoundKey_we0 => grp_KeyExpansion_fu_502_RoundKey_we0,
        RoundKey_d0 => grp_KeyExpansion_fu_502_RoundKey_d0,
        RoundKey_q0 => ctx_RoundKey_q0,
        RoundKey_address1 => grp_KeyExpansion_fu_502_RoundKey_address1,
        RoundKey_ce1 => grp_KeyExpansion_fu_502_RoundKey_ce1,
        RoundKey_we1 => grp_KeyExpansion_fu_502_RoundKey_we1,
        RoundKey_d1 => grp_KeyExpansion_fu_502_RoundKey_d1,
        RoundKey_q1 => ctx_RoundKey_q1,
        Key_address0 => grp_KeyExpansion_fu_502_Key_address0,
        Key_ce0 => grp_KeyExpansion_fu_502_Key_ce0,
        Key_q0 => DRBG_ctx_Key_q0,
        Key_address1 => grp_KeyExpansion_fu_502_Key_address1,
        Key_ce1 => grp_KeyExpansion_fu_502_Key_ce1,
        Key_q1 => DRBG_ctx_Key_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Cipher_fu_477_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Cipher_fu_477_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_Cipher_fu_477_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Cipher_fu_477_ap_ready = ap_const_logic_1)) then 
                    grp_Cipher_fu_477_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeyExpansion_fu_502_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeyExpansion_fu_502_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_KeyExpansion_fu_502_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeyExpansion_fu_502_ap_ready = ap_const_logic_1)) then 
                    grp_KeyExpansion_fu_502_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_reg_430 <= i_19_reg_921;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_430 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_2_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln328_fu_513_p2 = ap_const_lv1_1))) then 
                i_2_reg_454 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_2_reg_454 <= i_reg_1114;
            end if; 
        end if;
    end process;

    i_3_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln346_fu_791_p2 = ap_const_lv1_1))) then 
                i_3_reg_465 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_3_reg_465 <= i_18_reg_1132;
            end if; 
        end if;
    end process;

    j_0_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln328_fu_513_p2 = ap_const_lv1_0))) then 
                j_0_reg_442 <= ap_const_lv5_F;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_1) and (tmp_reg_926 = ap_const_lv1_0))) then 
                j_0_reg_442 <= j_fu_548_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_fu_529_p3 = ap_const_lv1_0))) then
                V_addr_reg_930 <= zext_ln331_fu_537_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_18_reg_1132 <= i_18_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_19_reg_921 <= i_19_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_reg_1114 <= i_fu_797_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Cipher_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    shl_ln_reg_1023(5 downto 4) <= shl_ln_fu_561_p3(5 downto 4);
                test_0_2_reg_1041 <= grp_Cipher_fu_477_ap_return_2;
                test_0_3_reg_1046 <= grp_Cipher_fu_477_ap_return_3;
                test_1_0_reg_1051 <= grp_Cipher_fu_477_ap_return_4;
                test_1_1_reg_1056 <= grp_Cipher_fu_477_ap_return_5;
                test_1_2_reg_1061 <= grp_Cipher_fu_477_ap_return_6;
                test_1_3_reg_1066 <= grp_Cipher_fu_477_ap_return_7;
                test_2_0_reg_1071 <= grp_Cipher_fu_477_ap_return_8;
                test_2_1_reg_1076 <= grp_Cipher_fu_477_ap_return_9;
                test_2_2_reg_1081 <= grp_Cipher_fu_477_ap_return_10;
                test_2_3_reg_1086 <= grp_Cipher_fu_477_ap_return_11;
                test_3_0_reg_1091 <= grp_Cipher_fu_477_ap_return_12;
                test_3_1_reg_1096 <= grp_Cipher_fu_477_ap_return_13;
                test_3_2_reg_1101 <= grp_Cipher_fu_477_ap_return_14;
                test_3_3_reg_1106 <= grp_Cipher_fu_477_ap_return_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                test_0_0_2_reg_943 <= V_q0;
                test_0_1_2_reg_948 <= V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                test_0_2_2_reg_953 <= V_q1;
                test_0_3_2_reg_958 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                test_1_0_2_reg_963 <= V_q1;
                test_1_1_2_reg_968 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                test_1_2_2_reg_973 <= V_q1;
                test_1_3_2_reg_978 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                test_2_0_2_reg_983 <= V_q1;
                test_2_1_2_reg_988 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                test_2_2_2_reg_993 <= V_q1;
                test_2_3_2_reg_998 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeyExpansion_fu_502_ap_done = ap_const_logic_1))) then
                test_3_0_2_reg_1003 <= V_q1;
                test_3_1_2_reg_1008 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                test_3_2_2_reg_1013 <= V_q1;
                test_3_3_2_reg_1018 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_926 <= j_0_reg_442(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln346_fu_791_p2 = ap_const_lv1_0))) then
                    zext_ln347_reg_1119(5 downto 0) <= zext_ln347_fu_803_p1(5 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_1023(3 downto 0) <= "0000";
    zext_ln347_reg_1119(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_reg_926, ap_CS_fsm_state4, icmp_ln331_fu_542_p2, ap_CS_fsm_state12, grp_KeyExpansion_fu_502_ap_done, ap_CS_fsm_state14, grp_Cipher_fu_477_ap_done, ap_CS_fsm_state22, icmp_ln346_fu_791_p2, ap_CS_fsm_state24, icmp_ln348_fu_808_p2, icmp_ln328_fu_513_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln328_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln331_fu_542_p2 = ap_const_lv1_0) or (tmp_reg_926 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeyExpansion_fu_502_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_Cipher_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln346_fu_791_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln348_fu_808_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DRBG_ctx_Key_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln347_reg_1119, grp_KeyExpansion_fu_502_Key_address0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            DRBG_ctx_Key_address0 <= zext_ln347_reg_1119(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_Key_address0 <= grp_KeyExpansion_fu_502_Key_address0;
        else 
            DRBG_ctx_Key_address0 <= "XXXXX";
        end if; 
    end process;

    DRBG_ctx_Key_address1 <= grp_KeyExpansion_fu_502_Key_address1;

    DRBG_ctx_Key_ce0_assign_proc : process(ap_CS_fsm_state12, grp_KeyExpansion_fu_502_Key_ce0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            DRBG_ctx_Key_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_Key_ce0 <= grp_KeyExpansion_fu_502_Key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_ce1_assign_proc : process(ap_CS_fsm_state12, grp_KeyExpansion_fu_502_Key_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_Key_ce1 <= grp_KeyExpansion_fu_502_Key_ce1;
        else 
            DRBG_ctx_Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_Key_d0 <= buffer_assign_q0;

    DRBG_ctx_Key_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            DRBG_ctx_Key_we0 <= ap_const_logic_1;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_address0_assign_proc : process(tmp_reg_926, ap_CS_fsm_state3, V_addr_reg_930, ap_CS_fsm_state4, icmp_ln331_fu_542_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, zext_ln331_fu_537_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            V_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            V_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_0) and (tmp_reg_926 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_1) and (tmp_reg_926 = ap_const_lv1_0)))) then 
            V_address0 <= V_addr_reg_930;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_address0 <= zext_ln331_fu_537_p1(4 - 1 downto 0);
        else 
            V_address0 <= "XXXX";
        end if; 
    end process;


    V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state25, zext_ln349_1_fu_833_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            V_address1 <= zext_ln349_1_fu_833_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            V_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            V_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            V_address1 <= "XXXX";
        end if; 
    end process;


    V_ce0_assign_proc : process(tmp_reg_926, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln331_fu_542_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, grp_KeyExpansion_fu_502_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeyExpansion_fu_502_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_0) and (tmp_reg_926 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_1) and (tmp_reg_926 = ap_const_lv1_0)))) then 
            V_ce0 <= ap_const_logic_1;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, grp_KeyExpansion_fu_502_ap_done, ap_CS_fsm_state25, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeyExpansion_fu_502_ap_done = ap_const_logic_1)))) then 
            V_ce1 <= ap_const_logic_1;
        else 
            V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    V_d0_assign_proc : process(tmp_reg_926, ap_CS_fsm_state4, icmp_ln331_fu_542_p2, add_ln334_fu_554_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_926 = ap_const_lv1_0))) then
            if ((icmp_ln331_fu_542_p2 = ap_const_lv1_0)) then 
                V_d0 <= add_ln334_fu_554_p2;
            elsif ((icmp_ln331_fu_542_p2 = ap_const_lv1_1)) then 
                V_d0 <= ap_const_lv8_0;
            else 
                V_d0 <= "XXXXXXXX";
            end if;
        else 
            V_d0 <= "XXXXXXXX";
        end if; 
    end process;

    V_d1 <= buffer_assign_q1;

    V_we0_assign_proc : process(tmp_reg_926, ap_CS_fsm_state4, icmp_ln331_fu_542_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_0) and (tmp_reg_926 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln331_fu_542_p2 = ap_const_lv1_1) and (tmp_reg_926 = ap_const_lv1_0)))) then 
            V_we0 <= ap_const_logic_1;
        else 
            V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_we1_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            V_we1 <= ap_const_logic_1;
        else 
            V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln334_fu_554_p2 <= std_logic_vector(unsigned(V_q0) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24, icmp_ln348_fu_808_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln348_fu_808_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24, icmp_ln348_fu_808_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln348_fu_808_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_assign_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state22, zext_ln347_fu_803_p1, ap_CS_fsm_state21, zext_ln145_fu_569_p1, zext_ln188_fu_656_p1, ap_CS_fsm_state15, zext_ln190_fu_676_p1, ap_CS_fsm_state16, zext_ln192_fu_696_p1, ap_CS_fsm_state17, zext_ln194_fu_716_p1, ap_CS_fsm_state18, zext_ln196_fu_736_p1, ap_CS_fsm_state19, zext_ln198_fu_756_p1, ap_CS_fsm_state20, zext_ln200_fu_776_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_assign_address0 <= zext_ln347_fu_803_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buffer_assign_address0 <= zext_ln200_fu_776_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_assign_address0 <= zext_ln198_fu_756_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_assign_address0 <= zext_ln196_fu_736_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_assign_address0 <= zext_ln194_fu_716_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buffer_assign_address0 <= zext_ln192_fu_696_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_assign_address0 <= zext_ln190_fu_676_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buffer_assign_address0 <= zext_ln188_fu_656_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_assign_address0 <= zext_ln145_fu_569_p1(6 - 1 downto 0);
        else 
            buffer_assign_address0 <= "XXXXXX";
        end if; 
    end process;


    buffer_assign_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state21, zext_ln187_fu_646_p1, ap_CS_fsm_state15, zext_ln189_fu_666_p1, ap_CS_fsm_state16, zext_ln191_fu_686_p1, ap_CS_fsm_state17, zext_ln193_fu_706_p1, ap_CS_fsm_state18, zext_ln195_fu_726_p1, ap_CS_fsm_state19, zext_ln197_fu_746_p1, ap_CS_fsm_state20, zext_ln199_fu_766_p1, zext_ln201_fu_786_p1, zext_ln349_fu_828_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_assign_address1 <= zext_ln349_fu_828_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buffer_assign_address1 <= zext_ln201_fu_786_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_assign_address1 <= zext_ln199_fu_766_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_assign_address1 <= zext_ln197_fu_746_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_assign_address1 <= zext_ln195_fu_726_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buffer_assign_address1 <= zext_ln193_fu_706_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_assign_address1 <= zext_ln191_fu_686_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buffer_assign_address1 <= zext_ln189_fu_666_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_assign_address1 <= zext_ln187_fu_646_p1(6 - 1 downto 0);
        else 
            buffer_assign_address1 <= "XXXXXX";
        end if; 
    end process;


    buffer_assign_ce0_assign_proc : process(ap_CS_fsm_state14, grp_Cipher_fu_477_ap_done, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((grp_Cipher_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            buffer_assign_ce0 <= ap_const_logic_1;
        else 
            buffer_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_assign_ce1_assign_proc : process(ap_CS_fsm_state14, grp_Cipher_fu_477_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((grp_Cipher_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            buffer_assign_ce1 <= ap_const_logic_1;
        else 
            buffer_assign_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_assign_d0_assign_proc : process(ap_CS_fsm_state14, test_0_2_reg_1041, test_1_0_reg_1051, test_1_2_reg_1061, test_2_0_reg_1071, test_2_2_reg_1081, test_3_0_reg_1091, test_3_2_reg_1101, grp_Cipher_fu_477_ap_return_0, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buffer_assign_d0 <= test_3_2_reg_1101;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_assign_d0 <= test_3_0_reg_1091;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_assign_d0 <= test_2_2_reg_1081;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_assign_d0 <= test_2_0_reg_1071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buffer_assign_d0 <= test_1_2_reg_1061;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_assign_d0 <= test_1_0_reg_1051;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buffer_assign_d0 <= test_0_2_reg_1041;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_assign_d0 <= grp_Cipher_fu_477_ap_return_0;
        else 
            buffer_assign_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_assign_d1_assign_proc : process(ap_CS_fsm_state14, test_0_3_reg_1046, test_1_1_reg_1056, test_1_3_reg_1066, test_2_1_reg_1076, test_2_3_reg_1086, test_3_1_reg_1096, test_3_3_reg_1106, grp_Cipher_fu_477_ap_return_1, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buffer_assign_d1 <= test_3_3_reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_assign_d1 <= test_3_1_reg_1096;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_assign_d1 <= test_2_3_reg_1086;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_assign_d1 <= test_2_1_reg_1076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buffer_assign_d1 <= test_1_3_reg_1066;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_assign_d1 <= test_1_1_reg_1056;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buffer_assign_d1 <= test_0_3_reg_1046;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_assign_d1 <= grp_Cipher_fu_477_ap_return_1;
        else 
            buffer_assign_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_assign_we0_assign_proc : process(ap_CS_fsm_state14, grp_Cipher_fu_477_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((grp_Cipher_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            buffer_assign_we0 <= ap_const_logic_1;
        else 
            buffer_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_assign_we1_assign_proc : process(ap_CS_fsm_state14, grp_Cipher_fu_477_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((grp_Cipher_fu_477_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            buffer_assign_we1 <= ap_const_logic_1;
        else 
            buffer_assign_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, grp_Cipher_fu_477_RoundKey_address0, grp_KeyExpansion_fu_502_RoundKey_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_RoundKey_address0 <= grp_KeyExpansion_fu_502_RoundKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_RoundKey_address0 <= grp_Cipher_fu_477_RoundKey_address0;
        else 
            ctx_RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_RoundKey_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, grp_Cipher_fu_477_RoundKey_address1, grp_KeyExpansion_fu_502_RoundKey_address1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_RoundKey_address1 <= grp_KeyExpansion_fu_502_RoundKey_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_RoundKey_address1 <= grp_Cipher_fu_477_RoundKey_address1;
        else 
            ctx_RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_RoundKey_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, grp_Cipher_fu_477_RoundKey_ce0, grp_KeyExpansion_fu_502_RoundKey_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_RoundKey_ce0 <= grp_KeyExpansion_fu_502_RoundKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_RoundKey_ce0 <= grp_Cipher_fu_477_RoundKey_ce0;
        else 
            ctx_RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, grp_Cipher_fu_477_RoundKey_ce1, grp_KeyExpansion_fu_502_RoundKey_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_RoundKey_ce1 <= grp_KeyExpansion_fu_502_RoundKey_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_RoundKey_ce1 <= grp_Cipher_fu_477_RoundKey_ce1;
        else 
            ctx_RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we0_assign_proc : process(ap_CS_fsm_state12, grp_KeyExpansion_fu_502_RoundKey_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_RoundKey_we0 <= grp_KeyExpansion_fu_502_RoundKey_we0;
        else 
            ctx_RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we1_assign_proc : process(ap_CS_fsm_state12, grp_KeyExpansion_fu_502_RoundKey_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_RoundKey_we1 <= grp_KeyExpansion_fu_502_RoundKey_we1;
        else 
            ctx_RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Cipher_fu_477_ap_start <= grp_Cipher_fu_477_ap_start_reg;
    grp_KeyExpansion_fu_502_ap_start <= grp_KeyExpansion_fu_502_ap_start_reg;
    i_18_fu_814_p2 <= std_logic_vector(unsigned(i_3_reg_465) + unsigned(ap_const_lv5_1));
    i_19_fu_519_p2 <= std_logic_vector(unsigned(i_0_reg_430) + unsigned(ap_const_lv2_1));
    i_fu_797_p2 <= std_logic_vector(unsigned(i_2_reg_454) + unsigned(ap_const_lv6_1));
    icmp_ln328_fu_513_p2 <= "1" when (i_0_reg_430 = ap_const_lv2_3) else "0";
    icmp_ln331_fu_542_p2 <= "1" when (V_q0 = ap_const_lv8_FF) else "0";
    icmp_ln346_fu_791_p2 <= "1" when (i_2_reg_454 = ap_const_lv6_20) else "0";
    icmp_ln348_fu_808_p2 <= "1" when (i_3_reg_465 = ap_const_lv5_10) else "0";
    j_fu_548_p2 <= std_logic_vector(signed(j_0_reg_442) + signed(ap_const_lv5_1F));
    or_ln187_fu_640_p2 <= (shl_ln_fu_561_p3 or ap_const_lv6_1);
    or_ln188_fu_651_p2 <= (shl_ln_reg_1023 or ap_const_lv6_2);
    or_ln189_fu_661_p2 <= (shl_ln_reg_1023 or ap_const_lv6_3);
    or_ln190_fu_671_p2 <= (shl_ln_reg_1023 or ap_const_lv6_4);
    or_ln191_fu_681_p2 <= (shl_ln_reg_1023 or ap_const_lv6_5);
    or_ln192_fu_691_p2 <= (shl_ln_reg_1023 or ap_const_lv6_6);
    or_ln193_fu_701_p2 <= (shl_ln_reg_1023 or ap_const_lv6_7);
    or_ln194_fu_711_p2 <= (shl_ln_reg_1023 or ap_const_lv6_8);
    or_ln195_fu_721_p2 <= (shl_ln_reg_1023 or ap_const_lv6_9);
    or_ln196_fu_731_p2 <= (shl_ln_reg_1023 or ap_const_lv6_A);
    or_ln197_fu_741_p2 <= (shl_ln_reg_1023 or ap_const_lv6_B);
    or_ln198_fu_751_p2 <= (shl_ln_reg_1023 or ap_const_lv6_C);
    or_ln199_fu_761_p2 <= (shl_ln_reg_1023 or ap_const_lv6_D);
    or_ln200_fu_771_p2 <= (shl_ln_reg_1023 or ap_const_lv6_E);
    or_ln201_fu_781_p2 <= (shl_ln_reg_1023 or ap_const_lv6_F);
    or_ln_fu_820_p3 <= (ap_const_lv1_1 & i_3_reg_465);
        sext_ln330_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_0_reg_442),32));

    shl_ln_fu_561_p3 <= (i_0_reg_430 & ap_const_lv4_0);
    tmp_fu_529_p3 <= j_0_reg_442(4 downto 4);
    zext_ln145_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_561_p3),64));
    zext_ln187_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln187_fu_640_p2),64));
    zext_ln188_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln188_fu_651_p2),64));
    zext_ln189_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln189_fu_661_p2),64));
    zext_ln190_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln190_fu_671_p2),64));
    zext_ln191_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln191_fu_681_p2),64));
    zext_ln192_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln192_fu_691_p2),64));
    zext_ln193_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln193_fu_701_p2),64));
    zext_ln194_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln194_fu_711_p2),64));
    zext_ln195_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln195_fu_721_p2),64));
    zext_ln196_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln196_fu_731_p2),64));
    zext_ln197_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln197_fu_741_p2),64));
    zext_ln198_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln198_fu_751_p2),64));
    zext_ln199_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln199_fu_761_p2),64));
    zext_ln200_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln200_fu_771_p2),64));
    zext_ln201_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln201_fu_781_p2),64));
    zext_ln331_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln330_fu_525_p1),64));
    zext_ln347_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_454),64));
    zext_ln349_1_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_465),64));
    zext_ln349_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_820_p3),64));
end behav;
