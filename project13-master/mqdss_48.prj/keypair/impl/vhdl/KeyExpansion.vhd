-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeyExpansion is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_we0 : OUT STD_LOGIC;
    RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_we1 : OUT STD_LOGIC;
    RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Key_ce0 : OUT STD_LOGIC;
    Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Key_ce1 : OUT STD_LOGIC;
    Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of KeyExpansion is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_E2 : STD_LOGIC_VECTOR (7 downto 0) := "11100010";
    constant ap_const_lv8_E3 : STD_LOGIC_VECTOR (7 downto 0) := "11100011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_358 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_385 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln158_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_742 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal shl_ln_fu_405_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_747 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln160_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_reg_753 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln162_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln162_reg_773 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln163_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_reg_783 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_796 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln167_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal Rcon_load_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_3_2_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_3_2_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_0_2_fu_568_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_0_2_reg_882 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_2_2_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_2_2_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_1_2_fu_602_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_1_2_reg_904 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_17_fu_732_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_362_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_reg_369 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln171_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln172_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln197_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln200_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln211_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln221_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln213_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_1_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_1_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_1_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln221_1_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln218_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln219_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln220_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln221_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln160_fu_401_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln161_fu_418_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln162_fu_429_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln163_fu_439_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln171_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln172_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_fu_455_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_fu_495_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln173_fu_516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln174_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_0_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln218_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln219_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln220_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln221_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_0_4_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_1_4_fu_646_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln219_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_2_4_fu_692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln220_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_3_4_fu_686_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln221_fu_722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component KeyExpansion_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component KeyExpansion_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1);

    Rcon_U : component KeyExpansion_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln158_reg_738 = ap_const_lv1_0))) then 
                i_0_reg_358 <= i_reg_742;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_358 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_369 <= ap_const_lv6_8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_369 <= i_17_fu_732_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Rcon_load_reg_861 <= Rcon_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_742 <= i_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln158_reg_738 <= icmp_ln158_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln167_fu_449_p2 = ap_const_lv1_0))) then
                icmp_ln178_reg_820 <= icmp_ln178_fu_489_p2;
                icmp_ln206_reg_833 <= icmp_ln206_fu_510_p2;
                    j_reg_796(7 downto 2) <= j_fu_459_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_381 <= RoundKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_385 <= RoundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln158_fu_389_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_747(4 downto 2) <= shl_ln_fu_405_p3(4 downto 2);
                    zext_ln160_reg_753(4 downto 2) <= zext_ln160_fu_413_p1(4 downto 2);
                    zext_ln161_reg_763(4 downto 2) <= zext_ln161_fu_424_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tempa_0_2_reg_882 <= tempa_0_2_fu_568_p3;
                tempa_3_2_reg_876 <= tempa_3_2_fu_561_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tempa_1_2_reg_904 <= tempa_1_2_fu_602_p3;
                tempa_2_2_reg_898 <= tempa_2_2_fu_595_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln158_reg_738 = ap_const_lv1_0))) then
                    zext_ln162_reg_773(4 downto 2) <= zext_ln162_fu_434_p1(4 downto 2);
                    zext_ln163_reg_783(4 downto 2) <= zext_ln163_fu_444_p1(4 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_747(1 downto 0) <= "00";
    zext_ln160_reg_753(1 downto 0) <= "00";
    zext_ln160_reg_753(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln161_reg_763(1 downto 0) <= "01";
    zext_ln161_reg_763(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln162_reg_773(1 downto 0) <= "10";
    zext_ln162_reg_773(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln163_reg_783(1 downto 0) <= "11";
    zext_ln163_reg_783(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    j_reg_796(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln158_fu_389_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, icmp_ln167_fu_449_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln158_fu_389_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln158_fu_389_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln167_fu_449_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    Key_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln160_fu_413_p1, zext_ln162_fu_434_p1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Key_address0 <= zext_ln162_fu_434_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Key_address0 <= zext_ln160_fu_413_p1(5 - 1 downto 0);
            else 
                Key_address0 <= "XXXXX";
            end if;
        else 
            Key_address0 <= "XXXXX";
        end if; 
    end process;


    Key_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln161_fu_424_p1, ap_CS_fsm_pp0_stage1, zext_ln163_fu_444_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Key_address1 <= zext_ln163_fu_444_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Key_address1 <= zext_ln161_fu_424_p1(5 - 1 downto 0);
            else 
                Key_address1 <= "XXXXX";
            end if;
        else 
            Key_address1 <= "XXXXX";
        end if; 
    end process;


    Key_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Key_ce0 <= ap_const_logic_1;
        else 
            Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Key_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Key_ce1 <= ap_const_logic_1;
        else 
            Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Rcon_address0 <= zext_ln203_fu_505_p1(4 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln160_reg_753, zext_ln162_reg_773, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln171_fu_473_p1, zext_ln173_fu_521_p1, zext_ln218_fu_580_p1, zext_ln220_fu_623_p1, zext_ln218_1_fu_665_p1, zext_ln220_1_fu_710_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_address0 <= zext_ln220_1_fu_710_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address0 <= zext_ln218_1_fu_665_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address0 <= zext_ln220_fu_623_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address0 <= zext_ln218_fu_580_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            RoundKey_address0 <= zext_ln173_fu_521_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_address0 <= zext_ln171_fu_473_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_address0 <= zext_ln162_reg_773(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            RoundKey_address0 <= zext_ln160_reg_753(8 - 1 downto 0);
        else 
            RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln161_reg_763, ap_CS_fsm_pp0_stage1, zext_ln163_reg_783, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln172_fu_484_p1, zext_ln174_fu_531_p1, zext_ln219_fu_590_p1, zext_ln221_fu_633_p1, zext_ln219_1_fu_681_p1, zext_ln221_1_fu_727_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_address1 <= zext_ln221_1_fu_727_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address1 <= zext_ln219_1_fu_681_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address1 <= zext_ln221_fu_633_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address1 <= zext_ln219_fu_590_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            RoundKey_address1 <= zext_ln174_fu_531_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_address1 <= zext_ln172_fu_484_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_address1 <= zext_ln163_reg_783(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            RoundKey_address1 <= zext_ln161_reg_763(8 - 1 downto 0);
        else 
            RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            RoundKey_ce1 <= ap_const_logic_1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_d0_assign_proc : process(Key_q0, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, xor_ln218_fu_658_p2, xor_ln220_fu_698_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_d0 <= xor_ln220_fu_698_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_d0 <= xor_ln218_fu_658_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RoundKey_d0 <= Key_q0;
        else 
            RoundKey_d0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_d1_assign_proc : process(Key_q1, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, xor_ln219_fu_669_p2, xor_ln221_fu_715_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_d1 <= xor_ln221_fu_715_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_d1 <= xor_ln219_fu_669_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RoundKey_d1 <= Key_q1;
        else 
            RoundKey_d1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln158_reg_738, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln158_reg_738 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln158_reg_738 = ap_const_lv1_0)))) then 
            RoundKey_we0 <= ap_const_logic_1;
        else 
            RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_we1_assign_proc : process(ap_CS_fsm_state10, icmp_ln158_reg_738, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln158_reg_738 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln158_reg_738 = ap_const_lv1_0)))) then 
            RoundKey_we1 <= ap_const_logic_1;
        else 
            RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln171_fu_467_p2 <= std_logic_vector(signed(ap_const_lv8_FC) + signed(j_fu_459_p3));
    add_ln172_fu_478_p2 <= std_logic_vector(signed(ap_const_lv8_FD) + signed(j_fu_459_p3));
    add_ln173_fu_516_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(j_reg_796));
    add_ln174_fu_526_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(j_reg_796));
    add_ln218_fu_575_p2 <= std_logic_vector(signed(ap_const_lv8_E0) + signed(j_reg_796));
    add_ln219_fu_585_p2 <= std_logic_vector(signed(ap_const_lv8_E1) + signed(j_reg_796));
    add_ln220_fu_618_p2 <= std_logic_vector(signed(ap_const_lv8_E2) + signed(j_reg_796));
    add_ln221_fu_628_p2 <= std_logic_vector(signed(ap_const_lv8_E3) + signed(j_reg_796));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln158_fu_389_p2)
    begin
        if ((icmp_ln158_fu_389_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_362_p4_assign_proc : process(i_0_reg_358, icmp_ln158_reg_738, ap_CS_fsm_pp0_stage0, i_reg_742, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln158_reg_738 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_362_p4 <= i_reg_742;
        else 
            ap_phi_mux_i_0_phi_fu_362_p4 <= i_0_reg_358;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_17_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_1_reg_369));
    i_fu_395_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_362_p4) + unsigned(ap_const_lv4_1));
    icmp_ln158_fu_389_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_362_p4 = ap_const_lv4_8) else "0";
    icmp_ln167_fu_449_p2 <= "1" when (i_1_reg_369 = ap_const_lv6_3C) else "0";
    icmp_ln178_fu_489_p2 <= "1" when (trunc_ln167_fu_455_p1 = ap_const_lv3_0) else "0";
    icmp_ln206_fu_510_p2 <= "1" when (trunc_ln167_fu_455_p1 = ap_const_lv3_4) else "0";
    j_fu_459_p3 <= (i_1_reg_369 & ap_const_lv2_0);
    lshr_ln_fu_495_p4 <= i_1_reg_369(5 downto 3);
    or_ln161_fu_418_p2 <= (shl_ln_fu_405_p3 or ap_const_lv5_1);
    or_ln162_fu_429_p2 <= (shl_ln_reg_747 or ap_const_lv5_2);
    or_ln163_fu_439_p2 <= (shl_ln_reg_747 or ap_const_lv5_3);
    or_ln219_fu_676_p2 <= (j_reg_796 or ap_const_lv8_1);
    or_ln220_fu_705_p2 <= (j_reg_796 or ap_const_lv8_2);
    or_ln221_fu_722_p2 <= (j_reg_796 or ap_const_lv8_3);

    sbox_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln197_fu_536_p1, zext_ln198_fu_546_p1, zext_ln210_fu_609_p1, zext_ln212_fu_638_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address0 <= zext_ln212_fu_638_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address0 <= zext_ln210_fu_609_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address0 <= zext_ln198_fu_546_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address0 <= zext_ln197_fu_536_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln200_fu_541_p1, zext_ln199_fu_551_p1, zext_ln211_fu_613_p1, zext_ln213_fu_642_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address1 <= zext_ln213_fu_642_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address1 <= zext_ln211_fu_613_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address1 <= zext_ln199_fu_551_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address1 <= zext_ln200_fu_541_p1(8 - 1 downto 0);
        else 
            sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_405_p3 <= (trunc_ln160_fu_401_p1 & ap_const_lv2_0);
    tempa_0_2_fu_568_p3 <= 
        tempa_0_fu_556_p2 when (icmp_ln178_reg_820(0) = '1') else 
        reg_381;
    tempa_0_4_fu_652_p3 <= 
        sbox_q0 when (icmp_ln206_reg_833(0) = '1') else 
        tempa_0_2_reg_882;
    tempa_0_fu_556_p2 <= (sbox_q0 xor Rcon_load_reg_861);
    tempa_1_2_fu_602_p3 <= 
        sbox_q0 when (icmp_ln178_reg_820(0) = '1') else 
        reg_385;
    tempa_1_4_fu_646_p3 <= 
        sbox_q1 when (icmp_ln206_reg_833(0) = '1') else 
        tempa_1_2_reg_904;
    tempa_2_2_fu_595_p3 <= 
        sbox_q1 when (icmp_ln178_reg_820(0) = '1') else 
        reg_381;
    tempa_2_4_fu_692_p3 <= 
        sbox_q0 when (icmp_ln206_reg_833(0) = '1') else 
        tempa_2_2_reg_898;
    tempa_3_2_fu_561_p3 <= 
        sbox_q1 when (icmp_ln178_reg_820(0) = '1') else 
        RoundKey_q1;
    tempa_3_4_fu_686_p3 <= 
        sbox_q1 when (icmp_ln206_reg_833(0) = '1') else 
        tempa_3_2_reg_876;
    trunc_ln160_fu_401_p1 <= ap_phi_mux_i_0_phi_fu_362_p4(3 - 1 downto 0);
    trunc_ln167_fu_455_p1 <= i_1_reg_369(3 - 1 downto 0);
    xor_ln218_fu_658_p2 <= (tempa_0_4_fu_652_p3 xor reg_381);
    xor_ln219_fu_669_p2 <= (tempa_1_4_fu_646_p3 xor reg_385);
    xor_ln220_fu_698_p2 <= (tempa_2_4_fu_692_p3 xor reg_381);
    xor_ln221_fu_715_p2 <= (tempa_3_4_fu_686_p3 xor reg_385);
    zext_ln160_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_405_p3),64));
    zext_ln161_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln161_fu_418_p2),64));
    zext_ln162_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln162_fu_429_p2),64));
    zext_ln163_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_fu_439_p2),64));
    zext_ln171_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln171_fu_467_p2),64));
    zext_ln172_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln172_fu_478_p2),64));
    zext_ln173_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_fu_516_p2),64));
    zext_ln174_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_fu_526_p2),64));
    zext_ln197_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RoundKey_q1),64));
    zext_ln198_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RoundKey_q0),64));
    zext_ln199_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RoundKey_q1),64));
    zext_ln200_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RoundKey_q0),64));
    zext_ln203_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_495_p4),64));
    zext_ln210_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempa_0_2_reg_882),64));
    zext_ln211_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempa_1_2_fu_602_p3),64));
    zext_ln212_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempa_2_2_reg_898),64));
    zext_ln213_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempa_3_2_reg_876),64));
    zext_ln218_1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_796),64));
    zext_ln218_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln218_fu_575_p2),64));
    zext_ln219_1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln219_fu_676_p2),64));
    zext_ln219_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln219_fu_585_p2),64));
    zext_ln220_1_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln220_fu_705_p2),64));
    zext_ln220_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_fu_618_p2),64));
    zext_ln221_1_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln221_fu_722_p2),64));
    zext_ln221_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln221_fu_628_p2),64));
end behav;
