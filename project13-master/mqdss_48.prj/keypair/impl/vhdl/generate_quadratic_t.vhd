-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generate_quadratic_t is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xij_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    xij_ce0 : OUT STD_LOGIC;
    xij_we0 : OUT STD_LOGIC;
    xij_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of generate_quadratic_t is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_146_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_319 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_152_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_reg_324 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln10_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_addr_reg_329 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_169_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln11_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_180_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_fu_222_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_reg_352 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indvars_iv_reg_79 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_91 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_0_reg_102 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_reg_114 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_125 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln12_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_1_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_2_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_fu_136_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln12_fu_194_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln12_fu_194_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln12_fu_194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_fu_200_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_fu_208_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_fu_204_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_fu_218_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_1_fu_228_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_1_fu_242_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_2_fu_248_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_2_fu_266_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_1_fu_262_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_fu_274_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_3_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln24_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_290_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln12_fu_194_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln12_fu_194_p10 : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_91 <= ap_const_lv6_0;
            elsif (((icmp_ln11_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_91 <= i_reg_319;
            end if; 
        end if;
    end process;

    indvars_iv_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_79 <= ap_const_lv6_1;
            elsif (((icmp_ln11_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_79 <= add_ln10_fu_180_p2;
            end if; 
        end if;
    end process;

    j_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_114 <= j_reg_337;
            elsif (((icmp_ln10_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_114 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_102 <= ap_const_lv12_0;
            elsif (((icmp_ln11_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_102 <= k_reg_324;
            end if; 
        end if;
    end process;

    k_1_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_1_reg_125 <= add_ln13_fu_310_p2;
            elsif (((icmp_ln10_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_125 <= k_0_reg_102;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln20_reg_352 <= add_ln20_fu_222_p2;
                tmp_reg_358 <= t_1_fu_228_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_319 <= i_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_337 <= j_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                k_reg_324 <= k_fu_152_p2;
                x_addr_reg_329 <= zext_ln12_fu_158_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_140_p2, ap_CS_fsm_state3, icmp_ln11_fu_163_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln10_fu_180_p2 <= std_logic_vector(unsigned(indvars_iv_reg_79) + unsigned(ap_const_lv6_1));
    add_ln13_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(k_1_reg_125));
    add_ln20_fu_222_p2 <= std_logic_vector(unsigned(t_fu_200_p1) + unsigned(trunc_ln_fu_208_p4));
    add_ln23_fu_269_p2 <= std_logic_vector(unsigned(add_ln20_reg_352) + unsigned(zext_ln23_2_fu_266_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_140_p2)
    begin
        if ((((icmp_ln10_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_140_p2)
    begin
        if (((icmp_ln10_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_146_p2 <= std_logic_vector(unsigned(i_0_reg_91) + unsigned(ap_const_lv6_1));
    icmp_ln10_fu_140_p2 <= "1" when (indvars_iv_reg_79 = ap_const_lv6_31) else "0";
    icmp_ln11_fu_163_p2 <= "1" when (j_0_reg_114 = indvars_iv_reg_79) else "0";
    icmp_ln24_fu_284_p2 <= "0" when (t_3_fu_278_p2 = ap_const_lv6_1F) else "1";
    j_fu_169_p2 <= std_logic_vector(unsigned(j_0_reg_114) + unsigned(ap_const_lv6_1));
    k_fu_152_p2 <= std_logic_vector(unsigned(zext_ln10_fu_136_p1) + unsigned(k_0_reg_102));
    mul_ln12_fu_194_p0 <= mul_ln12_fu_194_p00(5 - 1 downto 0);
    mul_ln12_fu_194_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_q0),10));
    mul_ln12_fu_194_p1 <= mul_ln12_fu_194_p10(5 - 1 downto 0);
    mul_ln12_fu_194_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_q1),10));
    mul_ln12_fu_194_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln12_fu_194_p0) * unsigned(mul_ln12_fu_194_p1), 10));
    select_ln24_fu_290_p3 <= 
        ap_const_lv6_3F when (icmp_ln24_fu_284_p2(0) = '1') else 
        ap_const_lv6_0;
    t_1_fu_228_p2 <= std_logic_vector(unsigned(zext_ln14_fu_204_p1) + unsigned(zext_ln16_fu_218_p1));
    t_2_fu_248_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_242_p1) + unsigned(zext_ln22_fu_245_p1));
    t_3_fu_278_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_262_p1) + unsigned(zext_ln23_fu_274_p1));
    t_fu_200_p1 <= mul_ln12_fu_194_p2(5 - 1 downto 0);
    tmp_6_fu_254_p3 <= t_2_fu_248_p2(5 downto 5);
    trunc_ln_fu_208_p4 <= mul_ln12_fu_194_p2(9 downto 5);
    x_address0 <= x_addr_reg_329;
    x_address1 <= zext_ln12_1_fu_175_p1(6 - 1 downto 0);

    x_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xij_address0 <= zext_ln12_2_fu_305_p1(11 - 1 downto 0);

    xij_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xij_ce0 <= ap_const_logic_1;
        else 
            xij_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xij_d0 <= (t_3_fu_278_p2 and select_ln24_fu_290_p3);

    xij_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xij_we0 <= ap_const_logic_1;
        else 
            xij_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_79),12));
    zext_ln12_1_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_114),64));
    zext_ln12_2_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_125),64));
    zext_ln12_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_91),64));
    zext_ln14_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_200_p1),6));
    zext_ln16_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_208_p4),6));
    zext_ln22_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_358),6));
    zext_ln22_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_reg_352),6));
    zext_ln23_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_254_p3),6));
    zext_ln23_2_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_358),5));
    zext_ln23_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_269_p2),6));
end behav;
