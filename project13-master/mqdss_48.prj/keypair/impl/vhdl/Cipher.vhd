-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce2 : STD_LOGIC;
    signal sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce3 : STD_LOGIC;
    signal sbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce4 : STD_LOGIC;
    signal sbox_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce5 : STD_LOGIC;
    signal sbox_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce6 : STD_LOGIC;
    signal sbox_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce7 : STD_LOGIC;
    signal sbox_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce8 : STD_LOGIC;
    signal sbox_q8 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce9 : STD_LOGIC;
    signal sbox_q9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address10 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce10 : STD_LOGIC;
    signal sbox_q10 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce11 : STD_LOGIC;
    signal sbox_q11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address12 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce12 : STD_LOGIC;
    signal sbox_q12 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce13 : STD_LOGIC;
    signal sbox_q13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address14 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce14 : STD_LOGIC;
    signal sbox_q14 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address15 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce15 : STD_LOGIC;
    signal sbox_q15 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_831 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_838 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_894 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln421_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal round_fu_1086_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal call_ret6_MixColumns_fu_663_ap_ready : STD_LOGIC;
    signal call_ret6_MixColumns_fu_663_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_MixColumns_fu_663_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_683_ap_done : STD_LOGIC;
    signal grp_AddRoundKey_fu_683_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_683_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_683_round : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AddRoundKey_fu_683_state_0_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_0_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_0_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_0_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_1_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_1_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_1_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_1_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_2_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_2_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_2_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_2_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_3_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_3_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_3_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_state_3_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_RoundKey_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_683_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_RoundKey_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_683_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_683_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_0_read_ass_reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_1_read_ass_reg_501 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_2_read_ass_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_3_read_ass_reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_0_read_ass_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_1_read_ass_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_2_read_ass_reg_551 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_3_read_ass_reg_561 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_0_read_ass_reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_1_read_ass_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_2_read_ass_reg_591 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_3_read_ass_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_0_read_ass_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_1_read_ass_reg_621 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_2_read_ass_reg_631 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_3_read_ass_reg_641 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_0_reg_651 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_683_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_NS_fsm_state27 : STD_LOGIC;
    signal ap_NS_fsm_state37 : STD_LOGIC;
    signal zext_ln426_fu_1081_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln264_16_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_17_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_18_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_19_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_20_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_21_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_22_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_23_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_24_fu_961_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_25_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_26_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_27_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_28_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_29_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_30_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_31_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_1_fu_1097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_2_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_3_fu_1107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_4_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_5_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_6_fu_1122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_7_fu_1127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_8_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_9_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_10_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_11_fu_1147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_12_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_13_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_14_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_15_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    component MixColumns IS
    port (
        ap_ready : OUT STD_LOGIC;
        state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        round : IN STD_LOGIC_VECTOR (5 downto 0);
        state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Cipher_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component Cipher_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1,
        address2 => sbox_address2,
        ce2 => sbox_ce2,
        q2 => sbox_q2,
        address3 => sbox_address3,
        ce3 => sbox_ce3,
        q3 => sbox_q3,
        address4 => sbox_address4,
        ce4 => sbox_ce4,
        q4 => sbox_q4,
        address5 => sbox_address5,
        ce5 => sbox_ce5,
        q5 => sbox_q5,
        address6 => sbox_address6,
        ce6 => sbox_ce6,
        q6 => sbox_q6,
        address7 => sbox_address7,
        ce7 => sbox_ce7,
        q7 => sbox_q7,
        address8 => sbox_address8,
        ce8 => sbox_ce8,
        q8 => sbox_q8,
        address9 => sbox_address9,
        ce9 => sbox_ce9,
        q9 => sbox_q9,
        address10 => sbox_address10,
        ce10 => sbox_ce10,
        q10 => sbox_q10,
        address11 => sbox_address11,
        ce11 => sbox_ce11,
        q11 => sbox_q11,
        address12 => sbox_address12,
        ce12 => sbox_ce12,
        q12 => sbox_q12,
        address13 => sbox_address13,
        ce13 => sbox_ce13,
        q13 => sbox_q13,
        address14 => sbox_address14,
        ce14 => sbox_ce14,
        q14 => sbox_q14,
        address15 => sbox_address15,
        ce15 => sbox_ce15,
        q15 => sbox_q15);

    call_ret6_MixColumns_fu_663 : component MixColumns
    port map (
        ap_ready => call_ret6_MixColumns_fu_663_ap_ready,
        state_0_0_read => reg_804,
        state_0_1_read => reg_838,
        state_0_2_read => reg_873,
        state_0_3_read => reg_908,
        state_1_0_read => reg_810,
        state_1_1_read => reg_845,
        state_1_2_read => reg_880,
        state_1_3_read => reg_887,
        state_2_0_read => reg_817,
        state_2_1_read => reg_852,
        state_2_2_read => reg_859,
        state_2_3_read => reg_894,
        state_3_0_read => reg_824,
        state_3_1_read => reg_831,
        state_3_2_read => reg_866,
        state_3_3_read => reg_901,
        ap_return_0 => call_ret6_MixColumns_fu_663_ap_return_0,
        ap_return_1 => call_ret6_MixColumns_fu_663_ap_return_1,
        ap_return_2 => call_ret6_MixColumns_fu_663_ap_return_2,
        ap_return_3 => call_ret6_MixColumns_fu_663_ap_return_3,
        ap_return_4 => call_ret6_MixColumns_fu_663_ap_return_4,
        ap_return_5 => call_ret6_MixColumns_fu_663_ap_return_5,
        ap_return_6 => call_ret6_MixColumns_fu_663_ap_return_6,
        ap_return_7 => call_ret6_MixColumns_fu_663_ap_return_7,
        ap_return_8 => call_ret6_MixColumns_fu_663_ap_return_8,
        ap_return_9 => call_ret6_MixColumns_fu_663_ap_return_9,
        ap_return_10 => call_ret6_MixColumns_fu_663_ap_return_10,
        ap_return_11 => call_ret6_MixColumns_fu_663_ap_return_11,
        ap_return_12 => call_ret6_MixColumns_fu_663_ap_return_12,
        ap_return_13 => call_ret6_MixColumns_fu_663_ap_return_13,
        ap_return_14 => call_ret6_MixColumns_fu_663_ap_return_14,
        ap_return_15 => call_ret6_MixColumns_fu_663_ap_return_15);

    grp_AddRoundKey_fu_683 : component AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_fu_683_ap_start,
        ap_done => grp_AddRoundKey_fu_683_ap_done,
        ap_idle => grp_AddRoundKey_fu_683_ap_idle,
        ap_ready => grp_AddRoundKey_fu_683_ap_ready,
        ap_ce => ap_const_logic_1,
        round => grp_AddRoundKey_fu_683_round,
        state_0_0_read => grp_AddRoundKey_fu_683_state_0_0_read,
        state_0_1_read => grp_AddRoundKey_fu_683_state_0_1_read,
        state_0_2_read => grp_AddRoundKey_fu_683_state_0_2_read,
        state_0_3_read => grp_AddRoundKey_fu_683_state_0_3_read,
        state_1_0_read => grp_AddRoundKey_fu_683_state_1_0_read,
        state_1_1_read => grp_AddRoundKey_fu_683_state_1_1_read,
        state_1_2_read => grp_AddRoundKey_fu_683_state_1_2_read,
        state_1_3_read => grp_AddRoundKey_fu_683_state_1_3_read,
        state_2_0_read => grp_AddRoundKey_fu_683_state_2_0_read,
        state_2_1_read => grp_AddRoundKey_fu_683_state_2_1_read,
        state_2_2_read => grp_AddRoundKey_fu_683_state_2_2_read,
        state_2_3_read => grp_AddRoundKey_fu_683_state_2_3_read,
        state_3_0_read => grp_AddRoundKey_fu_683_state_3_0_read,
        state_3_1_read => grp_AddRoundKey_fu_683_state_3_1_read,
        state_3_2_read => grp_AddRoundKey_fu_683_state_3_2_read,
        state_3_3_read => grp_AddRoundKey_fu_683_state_3_3_read,
        RoundKey_address0 => grp_AddRoundKey_fu_683_RoundKey_address0,
        RoundKey_ce0 => grp_AddRoundKey_fu_683_RoundKey_ce0,
        RoundKey_q0 => RoundKey_q0,
        RoundKey_address1 => grp_AddRoundKey_fu_683_RoundKey_address1,
        RoundKey_ce1 => grp_AddRoundKey_fu_683_RoundKey_ce1,
        RoundKey_q1 => RoundKey_q1,
        ap_return_0 => grp_AddRoundKey_fu_683_ap_return_0,
        ap_return_1 => grp_AddRoundKey_fu_683_ap_return_1,
        ap_return_2 => grp_AddRoundKey_fu_683_ap_return_2,
        ap_return_3 => grp_AddRoundKey_fu_683_ap_return_3,
        ap_return_4 => grp_AddRoundKey_fu_683_ap_return_4,
        ap_return_5 => grp_AddRoundKey_fu_683_ap_return_5,
        ap_return_6 => grp_AddRoundKey_fu_683_ap_return_6,
        ap_return_7 => grp_AddRoundKey_fu_683_ap_return_7,
        ap_return_8 => grp_AddRoundKey_fu_683_ap_return_8,
        ap_return_9 => grp_AddRoundKey_fu_683_ap_return_9,
        ap_return_10 => grp_AddRoundKey_fu_683_ap_return_10,
        ap_return_11 => grp_AddRoundKey_fu_683_ap_return_11,
        ap_return_12 => grp_AddRoundKey_fu_683_ap_return_12,
        ap_return_13 => grp_AddRoundKey_fu_683_ap_return_13,
        ap_return_14 => grp_AddRoundKey_fu_683_ap_return_14,
        ap_return_15 => grp_AddRoundKey_fu_683_ap_return_15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_0_preg <= grp_AddRoundKey_fu_683_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_10_preg <= grp_AddRoundKey_fu_683_ap_return_10;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_11_preg <= grp_AddRoundKey_fu_683_ap_return_11;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_12_preg <= grp_AddRoundKey_fu_683_ap_return_12;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_13_preg <= grp_AddRoundKey_fu_683_ap_return_13;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_14_preg <= grp_AddRoundKey_fu_683_ap_return_14;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_15_preg <= grp_AddRoundKey_fu_683_ap_return_15;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_1_preg <= grp_AddRoundKey_fu_683_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_2_preg <= grp_AddRoundKey_fu_683_ap_return_2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_3_preg <= grp_AddRoundKey_fu_683_ap_return_3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_4_preg <= grp_AddRoundKey_fu_683_ap_return_4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_5_preg <= grp_AddRoundKey_fu_683_ap_return_5;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_6_preg <= grp_AddRoundKey_fu_683_ap_return_6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_7_preg <= grp_AddRoundKey_fu_683_ap_return_7;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_8_preg <= grp_AddRoundKey_fu_683_ap_return_8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_9_preg <= grp_AddRoundKey_fu_683_ap_return_9;
                end if; 
            end if;
        end if;
    end process;


    grp_AddRoundKey_fu_683_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddRoundKey_fu_683_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state37) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_logic_1 = ap_NS_fsm_state27) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
                    grp_AddRoundKey_fu_683_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_683_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_fu_683_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    reg_810_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_810 <= sbox_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_810 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_817_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_817 <= sbox_q2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_817 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_824_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_824 <= sbox_q3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_824 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_831_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_831 <= sbox_q4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_831 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_838_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_838 <= sbox_q5;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_838 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_845_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_845 <= sbox_q6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                reg_845 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_852_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_852 <= sbox_q7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_852 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_859_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_859 <= sbox_q8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_859 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_866_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_866 <= sbox_q9;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_866 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_873_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_873 <= sbox_q10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                reg_873 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_880_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_880 <= sbox_q11;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_880 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_887_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_887 <= sbox_q12;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                reg_887 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_894_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_894 <= sbox_q13;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                reg_894 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_901_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_901 <= sbox_q14;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                reg_901 <= sbox_q0;
            end if; 
        end if;
    end process;

    reg_908_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_908 <= sbox_q15;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                reg_908 <= sbox_q0;
            end if; 
        end if;
    end process;

    round_0_reg_651_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                round_0_reg_651 <= round_fu_1086_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                round_0_reg_651 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_804 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                state_0_0_read_ass_reg_491 <= grp_AddRoundKey_fu_683_ap_return_0;
                state_0_1_read_ass_reg_501 <= grp_AddRoundKey_fu_683_ap_return_1;
                state_0_2_read_ass_reg_511 <= grp_AddRoundKey_fu_683_ap_return_2;
                state_0_3_read_ass_reg_521 <= grp_AddRoundKey_fu_683_ap_return_3;
                state_1_0_read_ass_reg_531 <= grp_AddRoundKey_fu_683_ap_return_4;
                state_1_1_read_ass_reg_541 <= grp_AddRoundKey_fu_683_ap_return_5;
                state_1_2_read_ass_reg_551 <= grp_AddRoundKey_fu_683_ap_return_6;
                state_1_3_read_ass_reg_561 <= grp_AddRoundKey_fu_683_ap_return_7;
                state_2_0_read_ass_reg_571 <= grp_AddRoundKey_fu_683_ap_return_8;
                state_2_1_read_ass_reg_581 <= grp_AddRoundKey_fu_683_ap_return_9;
                state_2_2_read_ass_reg_591 <= grp_AddRoundKey_fu_683_ap_return_10;
                state_2_3_read_ass_reg_601 <= grp_AddRoundKey_fu_683_ap_return_11;
                state_3_0_read_ass_reg_611 <= grp_AddRoundKey_fu_683_ap_return_12;
                state_3_1_read_ass_reg_621 <= grp_AddRoundKey_fu_683_ap_return_13;
                state_3_2_read_ass_reg_631 <= grp_AddRoundKey_fu_683_ap_return_14;
                state_3_3_read_ass_reg_641 <= grp_AddRoundKey_fu_683_ap_return_15;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln421_fu_915_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln421_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    RoundKey_address0 <= grp_AddRoundKey_fu_683_RoundKey_address0;
    RoundKey_address1 <= grp_AddRoundKey_fu_683_RoundKey_address1;

    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state37, ap_CS_fsm_state9, ap_CS_fsm_state27, ap_CS_fsm_state35, grp_AddRoundKey_fu_683_RoundKey_ce0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            RoundKey_ce0 <= grp_AddRoundKey_fu_683_RoundKey_ce0;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state37, ap_CS_fsm_state9, ap_CS_fsm_state27, ap_CS_fsm_state35, grp_AddRoundKey_fu_683_RoundKey_ce1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            RoundKey_ce1 <= grp_AddRoundKey_fu_683_RoundKey_ce1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state27 <= ap_NS_fsm(26);
    ap_NS_fsm_state37 <= ap_NS_fsm(36);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_0, ap_CS_fsm_state45, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_0 <= grp_AddRoundKey_fu_683_ap_return_0;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_1, ap_CS_fsm_state45, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_1 <= grp_AddRoundKey_fu_683_ap_return_1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_10, ap_CS_fsm_state45, ap_return_10_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_10 <= grp_AddRoundKey_fu_683_ap_return_10;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_11, ap_CS_fsm_state45, ap_return_11_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_11 <= grp_AddRoundKey_fu_683_ap_return_11;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_12, ap_CS_fsm_state45, ap_return_12_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_12 <= grp_AddRoundKey_fu_683_ap_return_12;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_13, ap_CS_fsm_state45, ap_return_13_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_13 <= grp_AddRoundKey_fu_683_ap_return_13;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_14, ap_CS_fsm_state45, ap_return_14_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_14 <= grp_AddRoundKey_fu_683_ap_return_14;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_15, ap_CS_fsm_state45, ap_return_15_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_15 <= grp_AddRoundKey_fu_683_ap_return_15;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_2, ap_CS_fsm_state45, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_2 <= grp_AddRoundKey_fu_683_ap_return_2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_3, ap_CS_fsm_state45, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_3 <= grp_AddRoundKey_fu_683_ap_return_3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_4, ap_CS_fsm_state45, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_4 <= grp_AddRoundKey_fu_683_ap_return_4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_5, ap_CS_fsm_state45, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_5 <= grp_AddRoundKey_fu_683_ap_return_5;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_6, ap_CS_fsm_state45, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_6 <= grp_AddRoundKey_fu_683_ap_return_6;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_7, ap_CS_fsm_state45, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_7 <= grp_AddRoundKey_fu_683_ap_return_7;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_8, ap_CS_fsm_state45, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_8 <= grp_AddRoundKey_fu_683_ap_return_8;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(grp_AddRoundKey_fu_683_ap_return_9, ap_CS_fsm_state45, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return_9 <= grp_AddRoundKey_fu_683_ap_return_9;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;


    grp_AddRoundKey_fu_683_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_AddRoundKey_fu_683_ap_start_reg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_AddRoundKey_fu_683_ap_start <= ap_const_logic_1;
        else 
            grp_AddRoundKey_fu_683_ap_start <= grp_AddRoundKey_fu_683_ap_start_reg;
        end if; 
    end process;


    grp_AddRoundKey_fu_683_round_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state37, ap_CS_fsm_state27, zext_ln426_fu_1081_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_round <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_round <= zext_ln426_fu_1081_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_round <= ap_const_lv6_0;
        else 
            grp_AddRoundKey_fu_683_round <= "XXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_0_0_read_assign_proc : process(ap_CS_fsm_state1, state_0_0_read, sbox_q0, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_0_0_read <= sbox_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_0_0_read <= call_ret6_MixColumns_fu_663_ap_return_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_0_0_read <= state_0_0_read;
        else 
            grp_AddRoundKey_fu_683_state_0_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_0_1_read_assign_proc : process(ap_CS_fsm_state1, state_0_1_read, sbox_q5, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_0_1_read <= sbox_q5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_0_1_read <= call_ret6_MixColumns_fu_663_ap_return_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_0_1_read <= state_0_1_read;
        else 
            grp_AddRoundKey_fu_683_state_0_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_0_2_read_assign_proc : process(ap_CS_fsm_state1, state_0_2_read, sbox_q10, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_0_2_read <= sbox_q10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_0_2_read <= call_ret6_MixColumns_fu_663_ap_return_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_0_2_read <= state_0_2_read;
        else 
            grp_AddRoundKey_fu_683_state_0_2_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_0_3_read_assign_proc : process(ap_CS_fsm_state1, state_0_3_read, sbox_q15, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_0_3_read <= sbox_q15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_0_3_read <= call_ret6_MixColumns_fu_663_ap_return_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_0_3_read <= state_0_3_read;
        else 
            grp_AddRoundKey_fu_683_state_0_3_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_1_0_read_assign_proc : process(ap_CS_fsm_state1, state_1_0_read, sbox_q1, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_1_0_read <= sbox_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_1_0_read <= call_ret6_MixColumns_fu_663_ap_return_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_1_0_read <= state_1_0_read;
        else 
            grp_AddRoundKey_fu_683_state_1_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_1_1_read_assign_proc : process(ap_CS_fsm_state1, state_1_1_read, sbox_q6, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_1_1_read <= sbox_q6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_1_1_read <= call_ret6_MixColumns_fu_663_ap_return_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_1_1_read <= state_1_1_read;
        else 
            grp_AddRoundKey_fu_683_state_1_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_1_2_read_assign_proc : process(ap_CS_fsm_state1, state_1_2_read, sbox_q11, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_1_2_read <= sbox_q11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_1_2_read <= call_ret6_MixColumns_fu_663_ap_return_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_1_2_read <= state_1_2_read;
        else 
            grp_AddRoundKey_fu_683_state_1_2_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_1_3_read_assign_proc : process(ap_CS_fsm_state1, state_1_3_read, sbox_q12, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_1_3_read <= sbox_q12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_1_3_read <= call_ret6_MixColumns_fu_663_ap_return_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_1_3_read <= state_1_3_read;
        else 
            grp_AddRoundKey_fu_683_state_1_3_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_2_0_read_assign_proc : process(ap_CS_fsm_state1, state_2_0_read, sbox_q2, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_2_0_read <= sbox_q2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_2_0_read <= call_ret6_MixColumns_fu_663_ap_return_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_2_0_read <= state_2_0_read;
        else 
            grp_AddRoundKey_fu_683_state_2_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_2_1_read_assign_proc : process(ap_CS_fsm_state1, state_2_1_read, sbox_q7, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_2_1_read <= sbox_q7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_2_1_read <= call_ret6_MixColumns_fu_663_ap_return_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_2_1_read <= state_2_1_read;
        else 
            grp_AddRoundKey_fu_683_state_2_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_2_2_read_assign_proc : process(ap_CS_fsm_state1, state_2_2_read, sbox_q8, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_2_2_read <= sbox_q8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_2_2_read <= call_ret6_MixColumns_fu_663_ap_return_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_2_2_read <= state_2_2_read;
        else 
            grp_AddRoundKey_fu_683_state_2_2_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_2_3_read_assign_proc : process(ap_CS_fsm_state1, state_2_3_read, sbox_q13, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_2_3_read <= sbox_q13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_2_3_read <= call_ret6_MixColumns_fu_663_ap_return_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_2_3_read <= state_2_3_read;
        else 
            grp_AddRoundKey_fu_683_state_2_3_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_3_0_read_assign_proc : process(ap_CS_fsm_state1, state_3_0_read, sbox_q3, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_3_0_read <= sbox_q3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_3_0_read <= call_ret6_MixColumns_fu_663_ap_return_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_3_0_read <= state_3_0_read;
        else 
            grp_AddRoundKey_fu_683_state_3_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_3_1_read_assign_proc : process(ap_CS_fsm_state1, state_3_1_read, sbox_q4, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_3_1_read <= sbox_q4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_3_1_read <= call_ret6_MixColumns_fu_663_ap_return_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_3_1_read <= state_3_1_read;
        else 
            grp_AddRoundKey_fu_683_state_3_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_3_2_read_assign_proc : process(ap_CS_fsm_state1, state_3_2_read, sbox_q9, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_3_2_read <= sbox_q9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_3_2_read <= call_ret6_MixColumns_fu_663_ap_return_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_3_2_read <= state_3_2_read;
        else 
            grp_AddRoundKey_fu_683_state_3_2_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_683_state_3_3_read_assign_proc : process(ap_CS_fsm_state1, state_3_3_read, sbox_q14, ap_CS_fsm_state37, ap_CS_fsm_state27, call_ret6_MixColumns_fu_663_ap_return_15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_AddRoundKey_fu_683_state_3_3_read <= sbox_q14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_AddRoundKey_fu_683_state_3_3_read <= call_ret6_MixColumns_fu_663_ap_return_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_AddRoundKey_fu_683_state_3_3_read <= state_3_3_read;
        else 
            grp_AddRoundKey_fu_683_state_3_3_read <= "XXXXXXXX";
        end if; 
    end process;

    icmp_ln421_fu_915_p2 <= "1" when (round_0_reg_651 = ap_const_lv4_E) else "0";
    round_fu_1086_p2 <= std_logic_vector(unsigned(round_0_reg_651) + unsigned(ap_const_lv4_1));

    sbox_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state10, ap_CS_fsm_state36, zext_ln264_16_fu_921_p1, zext_ln264_17_fu_926_p1, zext_ln264_18_fu_931_p1, zext_ln264_19_fu_936_p1, zext_ln264_20_fu_941_p1, zext_ln264_21_fu_946_p1, zext_ln264_22_fu_951_p1, zext_ln264_23_fu_956_p1, zext_ln264_24_fu_961_p1, zext_ln264_25_fu_966_p1, zext_ln264_26_fu_971_p1, zext_ln264_27_fu_976_p1, zext_ln264_28_fu_981_p1, zext_ln264_29_fu_986_p1, zext_ln264_30_fu_991_p1, zext_ln264_31_fu_996_p1, zext_ln264_fu_1092_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_address0 <= zext_ln264_fu_1092_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sbox_address0 <= zext_ln264_31_fu_996_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sbox_address0 <= zext_ln264_30_fu_991_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sbox_address0 <= zext_ln264_29_fu_986_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sbox_address0 <= zext_ln264_28_fu_981_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sbox_address0 <= zext_ln264_27_fu_976_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sbox_address0 <= zext_ln264_26_fu_971_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sbox_address0 <= zext_ln264_25_fu_966_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sbox_address0 <= zext_ln264_24_fu_961_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sbox_address0 <= zext_ln264_23_fu_956_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sbox_address0 <= zext_ln264_22_fu_951_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sbox_address0 <= zext_ln264_21_fu_946_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sbox_address0 <= zext_ln264_20_fu_941_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sbox_address0 <= zext_ln264_19_fu_936_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sbox_address0 <= zext_ln264_18_fu_931_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sbox_address0 <= zext_ln264_17_fu_926_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address0 <= zext_ln264_16_fu_921_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;

    sbox_address1 <= zext_ln264_1_fu_1097_p1(8 - 1 downto 0);
    sbox_address10 <= zext_ln264_10_fu_1142_p1(8 - 1 downto 0);
    sbox_address11 <= zext_ln264_11_fu_1147_p1(8 - 1 downto 0);
    sbox_address12 <= zext_ln264_12_fu_1152_p1(8 - 1 downto 0);
    sbox_address13 <= zext_ln264_13_fu_1157_p1(8 - 1 downto 0);
    sbox_address14 <= zext_ln264_14_fu_1162_p1(8 - 1 downto 0);
    sbox_address15 <= zext_ln264_15_fu_1167_p1(8 - 1 downto 0);
    sbox_address2 <= zext_ln264_2_fu_1102_p1(8 - 1 downto 0);
    sbox_address3 <= zext_ln264_3_fu_1107_p1(8 - 1 downto 0);
    sbox_address4 <= zext_ln264_4_fu_1112_p1(8 - 1 downto 0);
    sbox_address5 <= zext_ln264_5_fu_1117_p1(8 - 1 downto 0);
    sbox_address6 <= zext_ln264_6_fu_1122_p1(8 - 1 downto 0);
    sbox_address7 <= zext_ln264_7_fu_1127_p1(8 - 1 downto 0);
    sbox_address8 <= zext_ln264_8_fu_1132_p1(8 - 1 downto 0);
    sbox_address9 <= zext_ln264_9_fu_1137_p1(8 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state10, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce10_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce10 <= ap_const_logic_1;
        else 
            sbox_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce11_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce11 <= ap_const_logic_1;
        else 
            sbox_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce12_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce12 <= ap_const_logic_1;
        else 
            sbox_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce13_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce13 <= ap_const_logic_1;
        else 
            sbox_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce14_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce14 <= ap_const_logic_1;
        else 
            sbox_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce15_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce15 <= ap_const_logic_1;
        else 
            sbox_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce2_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce2 <= ap_const_logic_1;
        else 
            sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce3_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce3 <= ap_const_logic_1;
        else 
            sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce4_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce4 <= ap_const_logic_1;
        else 
            sbox_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce5_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce5 <= ap_const_logic_1;
        else 
            sbox_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce6_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce6 <= ap_const_logic_1;
        else 
            sbox_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce7_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce7 <= ap_const_logic_1;
        else 
            sbox_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce8_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce8 <= ap_const_logic_1;
        else 
            sbox_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce9_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sbox_ce9 <= ap_const_logic_1;
        else 
            sbox_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln264_10_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_2_read_ass_reg_591),64));
    zext_ln264_11_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_2_read_ass_reg_631),64));
    zext_ln264_12_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_3_read_ass_reg_521),64));
    zext_ln264_13_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_3_read_ass_reg_561),64));
    zext_ln264_14_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_3_read_ass_reg_601),64));
    zext_ln264_15_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_3_read_ass_reg_641),64));
    zext_ln264_16_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_0_read_ass_reg_491),64));
    zext_ln264_17_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_0_read_ass_reg_531),64));
    zext_ln264_18_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_0_read_ass_reg_571),64));
    zext_ln264_19_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_0_read_ass_reg_611),64));
    zext_ln264_1_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_0_read_ass_reg_531),64));
    zext_ln264_20_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_1_read_ass_reg_501),64));
    zext_ln264_21_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_1_read_ass_reg_541),64));
    zext_ln264_22_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_1_read_ass_reg_581),64));
    zext_ln264_23_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_1_read_ass_reg_621),64));
    zext_ln264_24_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_2_read_ass_reg_511),64));
    zext_ln264_25_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_2_read_ass_reg_551),64));
    zext_ln264_26_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_2_read_ass_reg_591),64));
    zext_ln264_27_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_2_read_ass_reg_631),64));
    zext_ln264_28_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_3_read_ass_reg_521),64));
    zext_ln264_29_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_3_read_ass_reg_561),64));
    zext_ln264_2_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_0_read_ass_reg_571),64));
    zext_ln264_30_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_3_read_ass_reg_601),64));
    zext_ln264_31_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_3_read_ass_reg_641),64));
    zext_ln264_3_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_0_read_ass_reg_611),64));
    zext_ln264_4_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_1_read_ass_reg_501),64));
    zext_ln264_5_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_1_read_ass_reg_541),64));
    zext_ln264_6_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_1_read_ass_reg_581),64));
    zext_ln264_7_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_1_read_ass_reg_621),64));
    zext_ln264_8_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_2_read_ass_reg_511),64));
    zext_ln264_9_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_2_read_ass_reg_551),64));
    zext_ln264_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_0_read_ass_reg_491),64));
    zext_ln426_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(round_0_reg_651),6));
end behav;
