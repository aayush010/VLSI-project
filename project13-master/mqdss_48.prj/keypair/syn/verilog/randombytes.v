// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module randombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1,
        DRBG_ctx_V_we1,
        DRBG_ctx_V_d1,
        DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_pp1_stage0 = 27'd8388608;
parameter    ap_ST_fsm_state26 = 27'd16777216;
parameter    ap_ST_fsm_pp2_stage0 = 27'd33554432;
parameter    ap_ST_fsm_state29 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x_address0;
output   x_ce0;
output   x_we0;
output  [7:0] x_d0;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [3:0] DRBG_ctx_V_address1;
output   DRBG_ctx_V_ce1;
output   DRBG_ctx_V_we1;
output  [7:0] DRBG_ctx_V_d1;
input  [7:0] DRBG_ctx_V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
input  [7:0] DRBG_ctx_Key_q1;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] x_address0;
reg x_ce0;
reg x_we0;
reg[7:0] x_d0;
reg[3:0] DRBG_ctx_V_address0;
reg DRBG_ctx_V_ce0;
reg DRBG_ctx_V_we0;
reg[7:0] DRBG_ctx_V_d0;
reg[3:0] DRBG_ctx_V_address1;
reg DRBG_ctx_V_ce1;
reg DRBG_ctx_V_we1;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[4:0] DRBG_ctx_Key_address1;
reg DRBG_ctx_Key_ce1;
reg[31:0] DRBG_ctx_reseed_counter_o;
reg DRBG_ctx_reseed_counter_o_ap_vld;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] loop_0_reg_380;
reg   [3:0] loop1_0_reg_392;
reg   [7:0] reg_455;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_4_reg_803;
wire    ap_CS_fsm_state8;
reg   [63:0] p_0_load_reg_792;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln231_fu_473_p2;
wire   [0:0] tmp_4_fu_479_p3;
wire    ap_CS_fsm_state3;
reg   [3:0] DRBG_ctx_V_addr_reg_807;
wire   [4:0] j_fu_498_p2;
wire   [0:0] icmp_ln234_fu_492_p2;
reg   [7:0] test_0_1_1_reg_820;
reg   [7:0] test_0_2_1_reg_825;
wire    ap_CS_fsm_state9;
reg   [7:0] test_0_3_1_reg_830;
reg   [7:0] test_1_0_1_reg_835;
wire    ap_CS_fsm_state10;
reg   [7:0] test_1_1_1_reg_840;
reg   [7:0] test_1_2_1_reg_845;
wire    ap_CS_fsm_state11;
reg   [7:0] test_1_3_1_reg_850;
reg   [7:0] test_2_0_1_reg_855;
wire    ap_CS_fsm_state12;
reg   [7:0] test_2_1_1_reg_860;
reg   [7:0] test_2_2_1_reg_865;
wire    ap_CS_fsm_state13;
reg   [7:0] test_2_3_1_reg_870;
reg   [7:0] test_3_0_1_reg_875;
wire    ap_CS_fsm_state14;
wire    grp_KeyExpansion_fu_441_ap_ready;
wire    grp_KeyExpansion_fu_441_ap_done;
reg   [7:0] test_3_1_1_reg_880;
reg   [7:0] test_3_2_1_reg_885;
wire    ap_CS_fsm_state15;
reg   [7:0] test_3_3_1_reg_890;
reg   [7:0] test_0_2_reg_895;
wire    ap_CS_fsm_state16;
wire    grp_Cipher_fu_416_ap_ready;
wire    grp_Cipher_fu_416_ap_done;
reg   [7:0] test_0_3_reg_900;
reg   [7:0] test_1_0_reg_905;
reg   [7:0] test_1_1_reg_910;
reg   [7:0] test_1_2_reg_915;
reg   [7:0] test_1_3_reg_920;
reg   [7:0] test_2_0_reg_925;
reg   [7:0] test_2_1_reg_930;
reg   [7:0] test_2_2_reg_935;
reg   [7:0] test_2_3_reg_940;
reg   [7:0] test_3_0_reg_945;
reg   [7:0] test_3_1_reg_950;
reg   [7:0] test_3_2_reg_955;
reg   [7:0] test_3_3_reg_960;
wire   [0:0] icmp_ln251_fu_586_p2;
reg   [0:0] icmp_ln251_reg_965;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln254_fu_592_p2;
reg   [0:0] icmp_ln254_reg_969;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state24_pp1_stage0_iter0;
wire    ap_block_state25_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [4:0] loop_1_fu_598_p2;
reg   [4:0] loop_1_reg_973;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln261_fu_655_p2;
reg   [0:0] icmp_ln261_reg_983;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state27_pp2_stage0_iter0;
wire    ap_block_state28_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [3:0] loop_fu_660_p2;
reg   [3:0] loop_reg_987;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state24;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state27;
reg    ap_enable_reg_pp2_iter1;
reg   [7:0] ctx_RoundKey_address0;
reg    ctx_RoundKey_ce0;
reg    ctx_RoundKey_we0;
wire   [7:0] ctx_RoundKey_q0;
reg   [7:0] ctx_RoundKey_address1;
reg    ctx_RoundKey_ce1;
reg    ctx_RoundKey_we1;
wire   [7:0] ctx_RoundKey_q1;
reg   [3:0] buffer_assign_address0;
reg    buffer_assign_ce0;
reg    buffer_assign_we0;
reg   [7:0] buffer_assign_d0;
wire   [7:0] buffer_assign_q0;
reg   [3:0] buffer_assign_address1;
reg    buffer_assign_ce1;
reg    buffer_assign_we1;
reg   [7:0] buffer_assign_d1;
wire   [7:0] buffer_assign_q1;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_ap_start;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_ap_done;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_ap_idle;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_ap_ready;
wire   [3:0] grp_AES256_CTR_DRBG_Upda_fu_404_V_address0;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_V_ce0;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_V_we0;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_404_V_d0;
wire   [3:0] grp_AES256_CTR_DRBG_Upda_fu_404_V_address1;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_V_ce1;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_V_we1;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_404_V_d1;
wire   [4:0] grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_address0;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_ce0;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_we0;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_d0;
wire   [4:0] grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_address1;
wire    grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_ce1;
wire    grp_Cipher_fu_416_ap_start;
wire    grp_Cipher_fu_416_ap_idle;
wire   [7:0] grp_Cipher_fu_416_RoundKey_address0;
wire    grp_Cipher_fu_416_RoundKey_ce0;
wire   [7:0] grp_Cipher_fu_416_RoundKey_address1;
wire    grp_Cipher_fu_416_RoundKey_ce1;
wire   [7:0] grp_Cipher_fu_416_ap_return_0;
wire   [7:0] grp_Cipher_fu_416_ap_return_1;
wire   [7:0] grp_Cipher_fu_416_ap_return_2;
wire   [7:0] grp_Cipher_fu_416_ap_return_3;
wire   [7:0] grp_Cipher_fu_416_ap_return_4;
wire   [7:0] grp_Cipher_fu_416_ap_return_5;
wire   [7:0] grp_Cipher_fu_416_ap_return_6;
wire   [7:0] grp_Cipher_fu_416_ap_return_7;
wire   [7:0] grp_Cipher_fu_416_ap_return_8;
wire   [7:0] grp_Cipher_fu_416_ap_return_9;
wire   [7:0] grp_Cipher_fu_416_ap_return_10;
wire   [7:0] grp_Cipher_fu_416_ap_return_11;
wire   [7:0] grp_Cipher_fu_416_ap_return_12;
wire   [7:0] grp_Cipher_fu_416_ap_return_13;
wire   [7:0] grp_Cipher_fu_416_ap_return_14;
wire   [7:0] grp_Cipher_fu_416_ap_return_15;
wire    grp_KeyExpansion_fu_441_ap_start;
wire    grp_KeyExpansion_fu_441_ap_idle;
wire   [7:0] grp_KeyExpansion_fu_441_RoundKey_address0;
wire    grp_KeyExpansion_fu_441_RoundKey_ce0;
wire    grp_KeyExpansion_fu_441_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_441_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_441_RoundKey_address1;
wire    grp_KeyExpansion_fu_441_RoundKey_ce1;
wire    grp_KeyExpansion_fu_441_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_441_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_441_Key_address0;
wire    grp_KeyExpansion_fu_441_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_441_Key_address1;
wire    grp_KeyExpansion_fu_441_Key_ce1;
reg   [4:0] j_0_reg_368;
reg   [4:0] ap_phi_mux_loop_0_phi_fu_384_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_loop1_0_phi_fu_396_p4;
wire    ap_block_pp2_stage0;
reg    grp_AES256_CTR_DRBG_Upda_fu_404_ap_start_reg;
wire    ap_CS_fsm_state29;
reg    grp_Cipher_fu_416_ap_start_reg;
reg    grp_KeyExpansion_fu_441_ap_start_reg;
wire   [63:0] zext_ln234_fu_487_p1;
wire   [63:0] zext_ln255_fu_604_p1;
wire  signed [63:0] sext_ln255_fu_619_p1;
wire   [63:0] zext_ln261_fu_650_p1;
wire  signed [63:0] sext_ln262_fu_676_p1;
reg   [63:0] p_0_fu_144;
wire   [63:0] add_ln257_fu_630_p2;
wire    ap_CS_fsm_state26;
reg   [31:0] i_1_fu_148;
wire   [31:0] i_fu_624_p2;
wire   [31:0] add_ln268_fu_685_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] add_ln237_fu_504_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [59:0] tmp_5_fu_577_p4;
wire   [31:0] zext_ln254_fu_609_p1;
wire   [31:0] add_ln255_fu_613_p2;
wire   [31:0] zext_ln261_1_fu_666_p1;
wire   [31:0] add_ln262_fu_670_p2;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 grp_AES256_CTR_DRBG_Upda_fu_404_ap_start_reg = 1'b0;
#0 grp_Cipher_fu_416_ap_start_reg = 1'b0;
#0 grp_KeyExpansion_fu_441_ap_start_reg = 1'b0;
end

randombytes_ctx_RdEe #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
ctx_RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_RoundKey_address0),
    .ce0(ctx_RoundKey_ce0),
    .we0(ctx_RoundKey_we0),
    .d0(grp_KeyExpansion_fu_441_RoundKey_d0),
    .q0(ctx_RoundKey_q0),
    .address1(ctx_RoundKey_address1),
    .ce1(ctx_RoundKey_ce1),
    .we1(ctx_RoundKey_we1),
    .d1(grp_KeyExpansion_fu_441_RoundKey_d1),
    .q1(ctx_RoundKey_q1)
);

randombytes_buffeeOg #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buffer_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_assign_address0),
    .ce0(buffer_assign_ce0),
    .we0(buffer_assign_we0),
    .d0(buffer_assign_d0),
    .q0(buffer_assign_q0),
    .address1(buffer_assign_address1),
    .ce1(buffer_assign_ce1),
    .we1(buffer_assign_we1),
    .d1(buffer_assign_d1),
    .q1(buffer_assign_q1)
);

AES256_CTR_DRBG_Upda grp_AES256_CTR_DRBG_Upda_fu_404(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_CTR_DRBG_Upda_fu_404_ap_start),
    .ap_done(grp_AES256_CTR_DRBG_Upda_fu_404_ap_done),
    .ap_idle(grp_AES256_CTR_DRBG_Upda_fu_404_ap_idle),
    .ap_ready(grp_AES256_CTR_DRBG_Upda_fu_404_ap_ready),
    .V_address0(grp_AES256_CTR_DRBG_Upda_fu_404_V_address0),
    .V_ce0(grp_AES256_CTR_DRBG_Upda_fu_404_V_ce0),
    .V_we0(grp_AES256_CTR_DRBG_Upda_fu_404_V_we0),
    .V_d0(grp_AES256_CTR_DRBG_Upda_fu_404_V_d0),
    .V_q0(DRBG_ctx_V_q0),
    .V_address1(grp_AES256_CTR_DRBG_Upda_fu_404_V_address1),
    .V_ce1(grp_AES256_CTR_DRBG_Upda_fu_404_V_ce1),
    .V_we1(grp_AES256_CTR_DRBG_Upda_fu_404_V_we1),
    .V_d1(grp_AES256_CTR_DRBG_Upda_fu_404_V_d1),
    .V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1)
);

Cipher grp_Cipher_fu_416(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Cipher_fu_416_ap_start),
    .ap_done(grp_Cipher_fu_416_ap_done),
    .ap_idle(grp_Cipher_fu_416_ap_idle),
    .ap_ready(grp_Cipher_fu_416_ap_ready),
    .state_0_0_read(reg_455),
    .state_0_1_read(test_0_1_1_reg_820),
    .state_0_2_read(test_0_2_1_reg_825),
    .state_0_3_read(test_0_3_1_reg_830),
    .state_1_0_read(test_1_0_1_reg_835),
    .state_1_1_read(test_1_1_1_reg_840),
    .state_1_2_read(test_1_2_1_reg_845),
    .state_1_3_read(test_1_3_1_reg_850),
    .state_2_0_read(test_2_0_1_reg_855),
    .state_2_1_read(test_2_1_1_reg_860),
    .state_2_2_read(test_2_2_1_reg_865),
    .state_2_3_read(test_2_3_1_reg_870),
    .state_3_0_read(test_3_0_1_reg_875),
    .state_3_1_read(test_3_1_1_reg_880),
    .state_3_2_read(test_3_2_1_reg_885),
    .state_3_3_read(test_3_3_1_reg_890),
    .RoundKey_address0(grp_Cipher_fu_416_RoundKey_address0),
    .RoundKey_ce0(grp_Cipher_fu_416_RoundKey_ce0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .RoundKey_address1(grp_Cipher_fu_416_RoundKey_address1),
    .RoundKey_ce1(grp_Cipher_fu_416_RoundKey_ce1),
    .RoundKey_q1(ctx_RoundKey_q1),
    .ap_return_0(grp_Cipher_fu_416_ap_return_0),
    .ap_return_1(grp_Cipher_fu_416_ap_return_1),
    .ap_return_2(grp_Cipher_fu_416_ap_return_2),
    .ap_return_3(grp_Cipher_fu_416_ap_return_3),
    .ap_return_4(grp_Cipher_fu_416_ap_return_4),
    .ap_return_5(grp_Cipher_fu_416_ap_return_5),
    .ap_return_6(grp_Cipher_fu_416_ap_return_6),
    .ap_return_7(grp_Cipher_fu_416_ap_return_7),
    .ap_return_8(grp_Cipher_fu_416_ap_return_8),
    .ap_return_9(grp_Cipher_fu_416_ap_return_9),
    .ap_return_10(grp_Cipher_fu_416_ap_return_10),
    .ap_return_11(grp_Cipher_fu_416_ap_return_11),
    .ap_return_12(grp_Cipher_fu_416_ap_return_12),
    .ap_return_13(grp_Cipher_fu_416_ap_return_13),
    .ap_return_14(grp_Cipher_fu_416_ap_return_14),
    .ap_return_15(grp_Cipher_fu_416_ap_return_15)
);

KeyExpansion grp_KeyExpansion_fu_441(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_441_ap_start),
    .ap_done(grp_KeyExpansion_fu_441_ap_done),
    .ap_idle(grp_KeyExpansion_fu_441_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_441_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_441_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_441_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_441_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_441_RoundKey_d0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_441_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_441_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_441_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_441_RoundKey_d1),
    .RoundKey_q1(ctx_RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_441_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_441_Key_ce0),
    .Key_q0(DRBG_ctx_Key_q0),
    .Key_address1(grp_KeyExpansion_fu_441_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_441_Key_ce1),
    .Key_q1(DRBG_ctx_Key_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln251_fu_586_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state24))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state24);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln251_fu_586_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln251_fu_586_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state27))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state27);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln251_fu_586_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_CTR_DRBG_Upda_fu_404_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln231_fu_473_p2 == 1'd1))) begin
            grp_AES256_CTR_DRBG_Upda_fu_404_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_CTR_DRBG_Upda_fu_404_ap_ready == 1'b1)) begin
            grp_AES256_CTR_DRBG_Upda_fu_404_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Cipher_fu_416_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_Cipher_fu_416_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_416_ap_ready == 1'b1)) begin
            grp_Cipher_fu_416_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeyExpansion_fu_441_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_KeyExpansion_fu_441_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_441_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_441_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_reg_965 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        i_1_fu_148 <= i_fu_624_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_fu_148 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_803 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln234_fu_492_p2 == 1'd1))) begin
        j_0_reg_368 <= j_fu_498_p2;
    end else if (((icmp_ln231_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_368 <= 5'd15;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln251_fu_586_p2 == 1'd1))) begin
        loop1_0_reg_392 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln261_reg_983 == 1'd1))) begin
        loop1_0_reg_392 <= loop_reg_987;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_fu_586_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        loop_0_reg_380 <= 5'd0;
    end else if (((icmp_ln254_reg_969 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_0_reg_380 <= loop_1_reg_973;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln251_reg_965 == 1'd1))) begin
        p_0_fu_144 <= 64'd0;
    end else if (((icmp_ln251_reg_965 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        p_0_fu_144 <= add_ln257_fu_630_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_fu_144 <= 64'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_479_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        DRBG_ctx_V_addr_reg_807 <= zext_ln234_fu_487_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        icmp_ln251_reg_965 <= icmp_ln251_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln254_reg_969 <= icmp_ln254_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln261_reg_983 <= icmp_ln261_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_1_reg_973 <= loop_1_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_reg_987 <= loop_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0_load_reg_792 <= p_0_fu_144;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((tmp_4_reg_803 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_455 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        test_0_1_1_reg_820 <= DRBG_ctx_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        test_0_2_1_reg_825 <= DRBG_ctx_V_q1;
        test_0_3_1_reg_830 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        test_0_2_reg_895 <= grp_Cipher_fu_416_ap_return_2;
        test_0_3_reg_900 <= grp_Cipher_fu_416_ap_return_3;
        test_1_0_reg_905 <= grp_Cipher_fu_416_ap_return_4;
        test_1_1_reg_910 <= grp_Cipher_fu_416_ap_return_5;
        test_1_2_reg_915 <= grp_Cipher_fu_416_ap_return_6;
        test_1_3_reg_920 <= grp_Cipher_fu_416_ap_return_7;
        test_2_0_reg_925 <= grp_Cipher_fu_416_ap_return_8;
        test_2_1_reg_930 <= grp_Cipher_fu_416_ap_return_9;
        test_2_2_reg_935 <= grp_Cipher_fu_416_ap_return_10;
        test_2_3_reg_940 <= grp_Cipher_fu_416_ap_return_11;
        test_3_0_reg_945 <= grp_Cipher_fu_416_ap_return_12;
        test_3_1_reg_950 <= grp_Cipher_fu_416_ap_return_13;
        test_3_2_reg_955 <= grp_Cipher_fu_416_ap_return_14;
        test_3_3_reg_960 <= grp_Cipher_fu_416_ap_return_15;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        test_1_0_1_reg_835 <= DRBG_ctx_V_q1;
        test_1_1_1_reg_840 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        test_1_2_1_reg_845 <= DRBG_ctx_V_q1;
        test_1_3_1_reg_850 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        test_2_0_1_reg_855 <= DRBG_ctx_V_q1;
        test_2_1_1_reg_860 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        test_2_2_1_reg_865 <= DRBG_ctx_V_q1;
        test_2_3_1_reg_870 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_KeyExpansion_fu_441_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        test_3_0_1_reg_875 <= DRBG_ctx_V_q1;
        test_3_1_1_reg_880 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        test_3_2_1_reg_885 <= DRBG_ctx_V_q1;
        test_3_3_1_reg_890 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_4_reg_803 <= j_0_reg_368[32'd4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_address0 = grp_KeyExpansion_fu_441_Key_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_address0 = grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_address1 = grp_KeyExpansion_fu_441_Key_address1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_address1 = grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_address1;
    end else begin
        DRBG_ctx_Key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_ce0 = grp_KeyExpansion_fu_441_Key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_ce1 = grp_KeyExpansion_fu_441_Key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_ce1 = grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_ce1;
    end else begin
        DRBG_ctx_Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_we0 = grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_we0;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_V_address0 = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        DRBG_ctx_V_address0 = 4'd13;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_V_address0 = 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        DRBG_ctx_V_address0 = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_address0 = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        DRBG_ctx_V_address0 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        DRBG_ctx_V_address0 = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        DRBG_ctx_V_address0 = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        DRBG_ctx_V_address0 = zext_ln234_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_address0 = grp_AES256_CTR_DRBG_Upda_fu_404_V_address0;
    end else begin
        DRBG_ctx_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_V_address1 = 4'd14;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        DRBG_ctx_V_address1 = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_V_address1 = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        DRBG_ctx_V_address1 = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_address1 = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        DRBG_ctx_V_address1 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        DRBG_ctx_V_address1 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        DRBG_ctx_V_address1 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_address1 = grp_AES256_CTR_DRBG_Upda_fu_404_V_address1;
    end else begin
        DRBG_ctx_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | ((grp_KeyExpansion_fu_441_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        DRBG_ctx_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_ce0 = grp_AES256_CTR_DRBG_Upda_fu_404_V_ce0;
    end else begin
        DRBG_ctx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((grp_KeyExpansion_fu_441_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        DRBG_ctx_V_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_ce1 = grp_AES256_CTR_DRBG_Upda_fu_404_V_ce1;
    end else begin
        DRBG_ctx_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        DRBG_ctx_V_d0 = add_ln237_fu_504_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        DRBG_ctx_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_d0 = grp_AES256_CTR_DRBG_Upda_fu_404_V_d0;
    end else begin
        DRBG_ctx_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_4_reg_803 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_4_reg_803 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln234_fu_492_p2 == 1'd1)))) begin
        DRBG_ctx_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_we0 = grp_AES256_CTR_DRBG_Upda_fu_404_V_we0;
    end else begin
        DRBG_ctx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_V_we1 = grp_AES256_CTR_DRBG_Upda_fu_404_V_we1;
    end else begin
        DRBG_ctx_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AES256_CTR_DRBG_Upda_fu_404_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        DRBG_ctx_reseed_counter_o = add_ln268_fu_685_p2;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if (((grp_AES256_CTR_DRBG_Upda_fu_404_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b1;
    end else begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln254_fu_592_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln261_fu_655_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_AES256_CTR_DRBG_Upda_fu_404_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln261_reg_983 == 1'd1))) begin
        ap_phi_mux_loop1_0_phi_fu_396_p4 = loop_reg_987;
    end else begin
        ap_phi_mux_loop1_0_phi_fu_396_p4 = loop1_0_reg_392;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_969 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_loop_0_phi_fu_384_p4 = loop_1_reg_973;
    end else begin
        ap_phi_mux_loop_0_phi_fu_384_p4 = loop_0_reg_380;
    end
end

always @ (*) begin
    if (((grp_AES256_CTR_DRBG_Upda_fu_404_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_assign_address0 = zext_ln255_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buffer_assign_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_assign_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_address0 = 64'd0;
    end else begin
        buffer_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buffer_assign_address1 = zext_ln261_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buffer_assign_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_assign_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_address1 = 64'd1;
    end else begin
        buffer_assign_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state23) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((grp_Cipher_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        buffer_assign_ce0 = 1'b1;
    end else begin
        buffer_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state23) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((grp_Cipher_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        buffer_assign_ce1 = 1'b1;
    end else begin
        buffer_assign_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buffer_assign_d0 = test_3_2_reg_955;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_assign_d0 = test_3_0_reg_945;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_d0 = test_2_2_reg_935;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_d0 = test_2_0_reg_925;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_d0 = test_1_2_reg_915;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_d0 = test_1_0_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_d0 = test_0_2_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_d0 = grp_Cipher_fu_416_ap_return_0;
    end else begin
        buffer_assign_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buffer_assign_d1 = test_3_3_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_assign_d1 = test_3_1_reg_950;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_d1 = test_2_3_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_d1 = test_2_1_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_d1 = test_1_3_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_d1 = test_1_1_reg_910;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_d1 = test_0_3_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_d1 = grp_Cipher_fu_416_ap_return_1;
    end else begin
        buffer_assign_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state23) | ((grp_Cipher_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        buffer_assign_we0 = 1'b1;
    end else begin
        buffer_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state23) | ((grp_Cipher_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        buffer_assign_we1 = 1'b1;
    end else begin
        buffer_assign_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_441_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ctx_RoundKey_address0 = grp_Cipher_fu_416_RoundKey_address0;
    end else begin
        ctx_RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_address1 = grp_KeyExpansion_fu_441_RoundKey_address1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ctx_RoundKey_address1 = grp_Cipher_fu_416_RoundKey_address1;
    end else begin
        ctx_RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_441_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ctx_RoundKey_ce0 = grp_Cipher_fu_416_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_441_RoundKey_ce1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ctx_RoundKey_ce1 = grp_Cipher_fu_416_RoundKey_ce1;
    end else begin
        ctx_RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_441_RoundKey_we0;
    end else begin
        ctx_RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_441_RoundKey_we1;
    end else begin
        ctx_RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_address0 = sext_ln262_fu_676_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_address0 = sext_ln255_fu_619_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_d0 = buffer_assign_q1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_d0 = buffer_assign_q0;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln261_reg_983 == 1'd1)) | ((icmp_ln254_reg_969 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln231_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_4_reg_803 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln234_fu_492_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_4_reg_803 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_KeyExpansion_fu_441_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_Cipher_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln251_fu_586_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln254_fu_592_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln254_fu_592_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln261_fu_655_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln261_fu_655_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((grp_AES256_CTR_DRBG_Upda_fu_404_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_d0 = grp_AES256_CTR_DRBG_Upda_fu_404_DRBG_ctx_Key_d0;

assign DRBG_ctx_V_d1 = grp_AES256_CTR_DRBG_Upda_fu_404_V_d1;

assign add_ln237_fu_504_p2 = (reg_455 + 8'd1);

assign add_ln255_fu_613_p2 = (i_1_fu_148 + zext_ln254_fu_609_p1);

assign add_ln257_fu_630_p2 = ($signed(p_0_load_reg_792) + $signed(64'd18446744073709551600));

assign add_ln262_fu_670_p2 = (i_1_fu_148 + zext_ln261_1_fu_666_p1);

assign add_ln268_fu_685_p2 = (DRBG_ctx_reseed_counter_i + 32'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign grp_AES256_CTR_DRBG_Upda_fu_404_ap_start = grp_AES256_CTR_DRBG_Upda_fu_404_ap_start_reg;

assign grp_Cipher_fu_416_ap_start = grp_Cipher_fu_416_ap_start_reg;

assign grp_KeyExpansion_fu_441_ap_start = grp_KeyExpansion_fu_441_ap_start_reg;

assign i_fu_624_p2 = (i_1_fu_148 + 32'd16);

assign icmp_ln231_fu_473_p2 = ((p_0_fu_144 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_492_p2 = ((DRBG_ctx_V_q0 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_586_p2 = ((tmp_5_fu_577_p4 == 60'd0) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_592_p2 = ((ap_phi_mux_loop_0_phi_fu_384_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln261_fu_655_p2 = ((zext_ln261_fu_650_p1 < p_0_load_reg_792) ? 1'b1 : 1'b0);

assign j_fu_498_p2 = ($signed(j_0_reg_368) + $signed(5'd31));

assign loop_1_fu_598_p2 = (ap_phi_mux_loop_0_phi_fu_384_p4 + 5'd1);

assign loop_fu_660_p2 = (ap_phi_mux_loop1_0_phi_fu_396_p4 + 4'd1);

assign sext_ln255_fu_619_p1 = $signed(add_ln255_fu_613_p2);

assign sext_ln262_fu_676_p1 = $signed(add_ln262_fu_670_p2);

assign tmp_4_fu_479_p3 = j_0_reg_368[32'd4];

assign tmp_5_fu_577_p4 = {{p_0_load_reg_792[63:4]}};

assign zext_ln234_fu_487_p1 = j_0_reg_368;

assign zext_ln254_fu_609_p1 = loop_0_reg_380;

assign zext_ln255_fu_604_p1 = ap_phi_mux_loop_0_phi_fu_384_p4;

assign zext_ln261_1_fu_666_p1 = loop1_0_reg_392;

assign zext_ln261_fu_650_p1 = ap_phi_mux_loop1_0_phi_fu_396_p4;

endmodule //randombytes
