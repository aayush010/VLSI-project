// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_we0,
        RoundKey_d0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_we1,
        RoundKey_d1,
        RoundKey_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_state5 = 11'd8;
parameter    ap_ST_fsm_state6 = 11'd16;
parameter    ap_ST_fsm_state7 = 11'd32;
parameter    ap_ST_fsm_state8 = 11'd64;
parameter    ap_ST_fsm_state9 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_state11 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
output   RoundKey_we0;
output  [7:0] RoundKey_d0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
output   RoundKey_we1;
output  [7:0] RoundKey_d1;
input  [7:0] RoundKey_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [7:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [7:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg RoundKey_we0;
reg[7:0] RoundKey_d0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg RoundKey_we1;
reg[7:0] RoundKey_d1;
reg[4:0] Key_address0;
reg Key_ce0;
reg[4:0] Key_address1;
reg Key_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [3:0] i_0_reg_358;
reg   [7:0] reg_381;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [7:0] reg_385;
wire   [0:0] icmp_ln158_fu_389_p2;
reg   [0:0] icmp_ln158_reg_738;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_395_p2;
reg   [3:0] i_reg_742;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] shl_ln_fu_405_p3;
reg   [4:0] shl_ln_reg_747;
wire   [63:0] zext_ln160_fu_413_p1;
reg   [63:0] zext_ln160_reg_753;
wire   [63:0] zext_ln161_fu_424_p1;
reg   [63:0] zext_ln161_reg_763;
wire   [63:0] zext_ln162_fu_434_p1;
reg   [63:0] zext_ln162_reg_773;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln163_fu_444_p1;
reg   [63:0] zext_ln163_reg_783;
wire   [7:0] j_fu_459_p3;
reg   [7:0] j_reg_796;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln167_fu_449_p2;
wire   [0:0] icmp_ln178_fu_489_p2;
reg   [0:0] icmp_ln178_reg_820;
wire   [0:0] icmp_ln206_fu_510_p2;
reg   [0:0] icmp_ln206_reg_833;
reg   [7:0] Rcon_load_reg_861;
wire   [7:0] tempa_3_2_fu_561_p3;
reg   [7:0] tempa_3_2_reg_876;
wire   [7:0] tempa_0_2_fu_568_p3;
reg   [7:0] tempa_0_2_reg_882;
wire   [7:0] tempa_2_2_fu_595_p3;
reg   [7:0] tempa_2_2_reg_898;
wire   [7:0] tempa_1_2_fu_602_p3;
reg   [7:0] tempa_1_2_reg_904;
wire   [5:0] i_17_fu_732_p2;
wire    ap_CS_fsm_state11;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] ap_phi_mux_i_0_phi_fu_362_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] i_1_reg_369;
wire    ap_CS_fsm_state5;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln171_fu_473_p1;
wire   [63:0] zext_ln172_fu_484_p1;
wire   [63:0] zext_ln203_fu_505_p1;
wire   [63:0] zext_ln173_fu_521_p1;
wire   [63:0] zext_ln174_fu_531_p1;
wire   [63:0] zext_ln197_fu_536_p1;
wire   [63:0] zext_ln200_fu_541_p1;
wire   [63:0] zext_ln198_fu_546_p1;
wire   [63:0] zext_ln199_fu_551_p1;
wire   [63:0] zext_ln218_fu_580_p1;
wire   [63:0] zext_ln219_fu_590_p1;
wire   [63:0] zext_ln210_fu_609_p1;
wire   [63:0] zext_ln211_fu_613_p1;
wire   [63:0] zext_ln220_fu_623_p1;
wire   [63:0] zext_ln221_fu_633_p1;
wire   [63:0] zext_ln212_fu_638_p1;
wire   [63:0] zext_ln213_fu_642_p1;
wire   [63:0] zext_ln218_1_fu_665_p1;
wire   [63:0] zext_ln219_1_fu_681_p1;
wire   [63:0] zext_ln220_1_fu_710_p1;
wire   [63:0] zext_ln221_1_fu_727_p1;
wire   [7:0] xor_ln218_fu_658_p2;
wire   [7:0] xor_ln219_fu_669_p2;
wire   [7:0] xor_ln220_fu_698_p2;
wire   [7:0] xor_ln221_fu_715_p2;
wire   [2:0] trunc_ln160_fu_401_p1;
wire   [4:0] or_ln161_fu_418_p2;
wire   [4:0] or_ln162_fu_429_p2;
wire   [4:0] or_ln163_fu_439_p2;
wire   [7:0] add_ln171_fu_467_p2;
wire   [7:0] add_ln172_fu_478_p2;
wire   [2:0] trunc_ln167_fu_455_p1;
wire   [2:0] lshr_ln_fu_495_p4;
wire   [7:0] add_ln173_fu_516_p2;
wire   [7:0] add_ln174_fu_526_p2;
wire   [7:0] tempa_0_fu_556_p2;
wire   [7:0] add_ln218_fu_575_p2;
wire   [7:0] add_ln219_fu_585_p2;
wire   [7:0] add_ln220_fu_618_p2;
wire   [7:0] add_ln221_fu_628_p2;
wire   [7:0] tempa_0_4_fu_652_p3;
wire   [7:0] tempa_1_4_fu_646_p3;
wire   [7:0] or_ln219_fu_676_p2;
wire   [7:0] tempa_2_4_fu_692_p3;
wire   [7:0] or_ln220_fu_705_p2;
wire   [7:0] tempa_3_4_fu_686_p3;
wire   [7:0] or_ln221_fu_722_p2;
wire    ap_CS_fsm_state12;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

KeyExpansion_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln158_reg_738 == 1'd0))) begin
        i_0_reg_358 <= i_reg_742;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_358 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_369 <= 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_369 <= i_17_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Rcon_load_reg_861 <= Rcon_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_742 <= i_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln158_reg_738 <= icmp_ln158_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_449_p2 == 1'd0))) begin
        icmp_ln178_reg_820 <= icmp_ln178_fu_489_p2;
        icmp_ln206_reg_833 <= icmp_ln206_fu_510_p2;
        j_reg_796[7 : 2] <= j_fu_459_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_381 <= RoundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_385 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln158_fu_389_p2 == 1'd0))) begin
        shl_ln_reg_747[4 : 2] <= shl_ln_fu_405_p3[4 : 2];
        zext_ln160_reg_753[4 : 2] <= zext_ln160_fu_413_p1[4 : 2];
        zext_ln161_reg_763[4 : 2] <= zext_ln161_fu_424_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tempa_0_2_reg_882 <= tempa_0_2_fu_568_p3;
        tempa_3_2_reg_876 <= tempa_3_2_fu_561_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tempa_1_2_reg_904 <= tempa_1_2_fu_602_p3;
        tempa_2_2_reg_898 <= tempa_2_2_fu_595_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln158_reg_738 == 1'd0))) begin
        zext_ln162_reg_773[4 : 2] <= zext_ln162_fu_434_p1[4 : 2];
        zext_ln163_reg_783[4 : 2] <= zext_ln163_fu_444_p1[4 : 2];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Key_address0 = zext_ln162_fu_434_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Key_address0 = zext_ln160_fu_413_p1;
        end else begin
            Key_address0 = 'bx;
        end
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Key_address1 = zext_ln163_fu_444_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Key_address1 = zext_ln161_fu_424_p1;
        end else begin
            Key_address1 = 'bx;
        end
    end else begin
        Key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Key_ce0 = 1'b1;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Key_ce1 = 1'b1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_address0 = zext_ln220_1_fu_710_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = zext_ln218_1_fu_665_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = zext_ln220_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = zext_ln218_fu_580_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address0 = zext_ln173_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address0 = zext_ln171_fu_473_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RoundKey_address0 = zext_ln162_reg_773;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        RoundKey_address0 = zext_ln160_reg_753;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_address1 = zext_ln221_1_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = zext_ln219_1_fu_681_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = zext_ln221_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = zext_ln219_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address1 = zext_ln174_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address1 = zext_ln172_fu_484_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RoundKey_address1 = zext_ln163_reg_783;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        RoundKey_address1 = zext_ln161_reg_763;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_d0 = xor_ln220_fu_698_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d0 = xor_ln218_fu_658_p2;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        RoundKey_d0 = Key_q0;
    end else begin
        RoundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_d1 = xor_ln221_fu_715_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d1 = xor_ln219_fu_669_p2;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        RoundKey_d1 = Key_q1;
    end else begin
        RoundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln158_reg_738 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln158_reg_738 == 1'd0)))) begin
        RoundKey_we0 = 1'b1;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln158_reg_738 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln158_reg_738 == 1'd0)))) begin
        RoundKey_we1 = 1'b1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln158_fu_389_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln158_reg_738 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_362_p4 = i_reg_742;
    end else begin
        ap_phi_mux_i_0_phi_fu_362_p4 = i_0_reg_358;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address0 = zext_ln212_fu_638_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address0 = zext_ln210_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = zext_ln198_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address0 = zext_ln197_fu_536_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address1 = zext_ln213_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address1 = zext_ln211_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address1 = zext_ln199_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address1 = zext_ln200_fu_541_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln158_fu_389_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln158_fu_389_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_449_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln203_fu_505_p1;

assign add_ln171_fu_467_p2 = ($signed(8'd252) + $signed(j_fu_459_p3));

assign add_ln172_fu_478_p2 = ($signed(8'd253) + $signed(j_fu_459_p3));

assign add_ln173_fu_516_p2 = ($signed(8'd254) + $signed(j_reg_796));

assign add_ln174_fu_526_p2 = ($signed(8'd255) + $signed(j_reg_796));

assign add_ln218_fu_575_p2 = ($signed(8'd224) + $signed(j_reg_796));

assign add_ln219_fu_585_p2 = ($signed(8'd225) + $signed(j_reg_796));

assign add_ln220_fu_618_p2 = ($signed(8'd226) + $signed(j_reg_796));

assign add_ln221_fu_628_p2 = ($signed(8'd227) + $signed(j_reg_796));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_17_fu_732_p2 = (6'd1 + i_1_reg_369);

assign i_fu_395_p2 = (ap_phi_mux_i_0_phi_fu_362_p4 + 4'd1);

assign icmp_ln158_fu_389_p2 = ((ap_phi_mux_i_0_phi_fu_362_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_449_p2 = ((i_1_reg_369 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_489_p2 = ((trunc_ln167_fu_455_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln206_fu_510_p2 = ((trunc_ln167_fu_455_p1 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_459_p3 = {{i_1_reg_369}, {2'd0}};

assign lshr_ln_fu_495_p4 = {{i_1_reg_369[5:3]}};

assign or_ln161_fu_418_p2 = (shl_ln_fu_405_p3 | 5'd1);

assign or_ln162_fu_429_p2 = (shl_ln_reg_747 | 5'd2);

assign or_ln163_fu_439_p2 = (shl_ln_reg_747 | 5'd3);

assign or_ln219_fu_676_p2 = (j_reg_796 | 8'd1);

assign or_ln220_fu_705_p2 = (j_reg_796 | 8'd2);

assign or_ln221_fu_722_p2 = (j_reg_796 | 8'd3);

assign shl_ln_fu_405_p3 = {{trunc_ln160_fu_401_p1}, {2'd0}};

assign tempa_0_2_fu_568_p3 = ((icmp_ln178_reg_820[0:0] === 1'b1) ? tempa_0_fu_556_p2 : reg_381);

assign tempa_0_4_fu_652_p3 = ((icmp_ln206_reg_833[0:0] === 1'b1) ? sbox_q0 : tempa_0_2_reg_882);

assign tempa_0_fu_556_p2 = (sbox_q0 ^ Rcon_load_reg_861);

assign tempa_1_2_fu_602_p3 = ((icmp_ln178_reg_820[0:0] === 1'b1) ? sbox_q0 : reg_385);

assign tempa_1_4_fu_646_p3 = ((icmp_ln206_reg_833[0:0] === 1'b1) ? sbox_q1 : tempa_1_2_reg_904);

assign tempa_2_2_fu_595_p3 = ((icmp_ln178_reg_820[0:0] === 1'b1) ? sbox_q1 : reg_381);

assign tempa_2_4_fu_692_p3 = ((icmp_ln206_reg_833[0:0] === 1'b1) ? sbox_q0 : tempa_2_2_reg_898);

assign tempa_3_2_fu_561_p3 = ((icmp_ln178_reg_820[0:0] === 1'b1) ? sbox_q1 : RoundKey_q1);

assign tempa_3_4_fu_686_p3 = ((icmp_ln206_reg_833[0:0] === 1'b1) ? sbox_q1 : tempa_3_2_reg_876);

assign trunc_ln160_fu_401_p1 = ap_phi_mux_i_0_phi_fu_362_p4[2:0];

assign trunc_ln167_fu_455_p1 = i_1_reg_369[2:0];

assign xor_ln218_fu_658_p2 = (tempa_0_4_fu_652_p3 ^ reg_381);

assign xor_ln219_fu_669_p2 = (tempa_1_4_fu_646_p3 ^ reg_385);

assign xor_ln220_fu_698_p2 = (tempa_2_4_fu_692_p3 ^ reg_381);

assign xor_ln221_fu_715_p2 = (tempa_3_4_fu_686_p3 ^ reg_385);

assign zext_ln160_fu_413_p1 = shl_ln_fu_405_p3;

assign zext_ln161_fu_424_p1 = or_ln161_fu_418_p2;

assign zext_ln162_fu_434_p1 = or_ln162_fu_429_p2;

assign zext_ln163_fu_444_p1 = or_ln163_fu_439_p2;

assign zext_ln171_fu_473_p1 = add_ln171_fu_467_p2;

assign zext_ln172_fu_484_p1 = add_ln172_fu_478_p2;

assign zext_ln173_fu_521_p1 = add_ln173_fu_516_p2;

assign zext_ln174_fu_531_p1 = add_ln174_fu_526_p2;

assign zext_ln197_fu_536_p1 = RoundKey_q1;

assign zext_ln198_fu_546_p1 = RoundKey_q0;

assign zext_ln199_fu_551_p1 = RoundKey_q1;

assign zext_ln200_fu_541_p1 = RoundKey_q0;

assign zext_ln203_fu_505_p1 = lshr_ln_fu_495_p4;

assign zext_ln210_fu_609_p1 = tempa_0_2_reg_882;

assign zext_ln211_fu_613_p1 = tempa_1_2_fu_602_p3;

assign zext_ln212_fu_638_p1 = tempa_2_2_reg_898;

assign zext_ln213_fu_642_p1 = tempa_3_2_reg_876;

assign zext_ln218_1_fu_665_p1 = j_reg_796;

assign zext_ln218_fu_580_p1 = add_ln218_fu_575_p2;

assign zext_ln219_1_fu_681_p1 = or_ln219_fu_676_p2;

assign zext_ln219_fu_590_p1 = add_ln219_fu_585_p2;

assign zext_ln220_1_fu_710_p1 = or_ln220_fu_705_p2;

assign zext_ln220_fu_623_p1 = add_ln220_fu_618_p2;

assign zext_ln221_1_fu_727_p1 = or_ln221_fu_722_p2;

assign zext_ln221_fu_633_p1 = add_ln221_fu_628_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_747[1:0] <= 2'b00;
    zext_ln160_reg_753[1:0] <= 2'b00;
    zext_ln160_reg_753[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_763[1:0] <= 2'b01;
    zext_ln161_reg_763[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln162_reg_773[1:0] <= 2'b10;
    zext_ln162_reg_773[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln163_reg_783[1:0] <= 2'b11;
    zext_ln163_reg_783[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_reg_796[1:0] <= 2'b00;
end

endmodule //KeyExpansion
