// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_0_0_read,
        state_0_1_read,
        state_0_2_read,
        state_0_3_read,
        state_1_0_read,
        state_1_1_read,
        state_1_2_read,
        state_1_3_read,
        state_2_0_read,
        state_2_1_read,
        state_2_2_read,
        state_2_3_read,
        state_3_0_read,
        state_3_1_read,
        state_3_2_read,
        state_3_3_read,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] state_0_0_read;
input  [7:0] state_0_1_read;
input  [7:0] state_0_2_read;
input  [7:0] state_0_3_read;
input  [7:0] state_1_0_read;
input  [7:0] state_1_1_read;
input  [7:0] state_1_2_read;
input  [7:0] state_1_3_read;
input  [7:0] state_2_0_read;
input  [7:0] state_2_1_read;
input  [7:0] state_2_2_read;
input  [7:0] state_2_3_read;
input  [7:0] state_3_0_read;
input  [7:0] state_3_1_read;
input  [7:0] state_3_2_read;
input  [7:0] state_3_3_read;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
input  [7:0] RoundKey_q1;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg RoundKey_ce0;
reg RoundKey_ce1;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[7:0] ap_return_13;
reg[7:0] ap_return_14;
reg[7:0] ap_return_15;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [7:0] sbox_address2;
reg    sbox_ce2;
wire   [7:0] sbox_q2;
wire   [7:0] sbox_address3;
reg    sbox_ce3;
wire   [7:0] sbox_q3;
wire   [7:0] sbox_address4;
reg    sbox_ce4;
wire   [7:0] sbox_q4;
wire   [7:0] sbox_address5;
reg    sbox_ce5;
wire   [7:0] sbox_q5;
wire   [7:0] sbox_address6;
reg    sbox_ce6;
wire   [7:0] sbox_q6;
wire   [7:0] sbox_address7;
reg    sbox_ce7;
wire   [7:0] sbox_q7;
wire   [7:0] sbox_address8;
reg    sbox_ce8;
wire   [7:0] sbox_q8;
wire   [7:0] sbox_address9;
reg    sbox_ce9;
wire   [7:0] sbox_q9;
wire   [7:0] sbox_address10;
reg    sbox_ce10;
wire   [7:0] sbox_q10;
wire   [7:0] sbox_address11;
reg    sbox_ce11;
wire   [7:0] sbox_q11;
wire   [7:0] sbox_address12;
reg    sbox_ce12;
wire   [7:0] sbox_q12;
wire   [7:0] sbox_address13;
reg    sbox_ce13;
wire   [7:0] sbox_q13;
wire   [7:0] sbox_address14;
reg    sbox_ce14;
wire   [7:0] sbox_q14;
wire   [7:0] sbox_address15;
reg    sbox_ce15;
wire   [7:0] sbox_q15;
reg   [7:0] reg_804;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state37;
reg   [7:0] reg_810;
wire    ap_CS_fsm_state12;
reg   [7:0] reg_817;
wire    ap_CS_fsm_state13;
reg   [7:0] reg_824;
wire    ap_CS_fsm_state14;
reg   [7:0] reg_831;
wire    ap_CS_fsm_state15;
reg   [7:0] reg_838;
wire    ap_CS_fsm_state16;
reg   [7:0] reg_845;
wire    ap_CS_fsm_state17;
reg   [7:0] reg_852;
wire    ap_CS_fsm_state18;
reg   [7:0] reg_859;
wire    ap_CS_fsm_state19;
reg   [7:0] reg_866;
wire    ap_CS_fsm_state20;
reg   [7:0] reg_873;
wire    ap_CS_fsm_state21;
reg   [7:0] reg_880;
wire    ap_CS_fsm_state22;
reg   [7:0] reg_887;
wire    ap_CS_fsm_state23;
reg   [7:0] reg_894;
wire    ap_CS_fsm_state24;
reg   [7:0] reg_901;
wire    ap_CS_fsm_state25;
reg   [7:0] reg_908;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln421_fu_915_p2;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
wire   [3:0] round_fu_1086_p2;
wire    ap_CS_fsm_state36;
wire    call_ret6_MixColumns_fu_663_ap_ready;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_0;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_1;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_2;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_3;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_4;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_5;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_6;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_7;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_8;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_9;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_10;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_11;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_12;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_13;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_14;
wire   [7:0] call_ret6_MixColumns_fu_663_ap_return_15;
reg    grp_AddRoundKey_fu_683_ap_start;
wire    grp_AddRoundKey_fu_683_ap_done;
wire    grp_AddRoundKey_fu_683_ap_idle;
wire    grp_AddRoundKey_fu_683_ap_ready;
reg   [5:0] grp_AddRoundKey_fu_683_round;
reg   [7:0] grp_AddRoundKey_fu_683_state_0_0_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_0_1_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_0_2_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_0_3_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_1_0_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_1_1_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_1_2_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_1_3_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_2_0_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_2_1_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_2_2_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_2_3_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_3_0_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_3_1_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_3_2_read;
reg   [7:0] grp_AddRoundKey_fu_683_state_3_3_read;
wire   [7:0] grp_AddRoundKey_fu_683_RoundKey_address0;
wire    grp_AddRoundKey_fu_683_RoundKey_ce0;
wire   [7:0] grp_AddRoundKey_fu_683_RoundKey_address1;
wire    grp_AddRoundKey_fu_683_RoundKey_ce1;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_0;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_1;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_2;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_3;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_4;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_5;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_6;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_7;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_8;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_9;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_10;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_11;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_12;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_13;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_14;
wire   [7:0] grp_AddRoundKey_fu_683_ap_return_15;
reg   [7:0] state_0_0_read_ass_reg_491;
reg   [7:0] state_0_1_read_ass_reg_501;
reg   [7:0] state_0_2_read_ass_reg_511;
reg   [7:0] state_0_3_read_ass_reg_521;
reg   [7:0] state_1_0_read_ass_reg_531;
reg   [7:0] state_1_1_read_ass_reg_541;
reg   [7:0] state_1_2_read_ass_reg_551;
reg   [7:0] state_1_3_read_ass_reg_561;
reg   [7:0] state_2_0_read_ass_reg_571;
reg   [7:0] state_2_1_read_ass_reg_581;
reg   [7:0] state_2_2_read_ass_reg_591;
reg   [7:0] state_2_3_read_ass_reg_601;
reg   [7:0] state_3_0_read_ass_reg_611;
reg   [7:0] state_3_1_read_ass_reg_621;
reg   [7:0] state_3_2_read_ass_reg_631;
reg   [7:0] state_3_3_read_ass_reg_641;
reg   [3:0] round_0_reg_651;
reg    grp_AddRoundKey_fu_683_ap_start_reg;
reg   [44:0] ap_NS_fsm;
wire    ap_NS_fsm_state27;
wire    ap_NS_fsm_state37;
wire   [5:0] zext_ln426_fu_1081_p1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire   [63:0] zext_ln264_16_fu_921_p1;
wire   [63:0] zext_ln264_17_fu_926_p1;
wire   [63:0] zext_ln264_18_fu_931_p1;
wire   [63:0] zext_ln264_19_fu_936_p1;
wire   [63:0] zext_ln264_20_fu_941_p1;
wire   [63:0] zext_ln264_21_fu_946_p1;
wire   [63:0] zext_ln264_22_fu_951_p1;
wire   [63:0] zext_ln264_23_fu_956_p1;
wire   [63:0] zext_ln264_24_fu_961_p1;
wire   [63:0] zext_ln264_25_fu_966_p1;
wire   [63:0] zext_ln264_26_fu_971_p1;
wire   [63:0] zext_ln264_27_fu_976_p1;
wire   [63:0] zext_ln264_28_fu_981_p1;
wire   [63:0] zext_ln264_29_fu_986_p1;
wire   [63:0] zext_ln264_30_fu_991_p1;
wire   [63:0] zext_ln264_31_fu_996_p1;
wire   [63:0] zext_ln264_fu_1092_p1;
wire   [63:0] zext_ln264_1_fu_1097_p1;
wire   [63:0] zext_ln264_2_fu_1102_p1;
wire   [63:0] zext_ln264_3_fu_1107_p1;
wire   [63:0] zext_ln264_4_fu_1112_p1;
wire   [63:0] zext_ln264_5_fu_1117_p1;
wire   [63:0] zext_ln264_6_fu_1122_p1;
wire   [63:0] zext_ln264_7_fu_1127_p1;
wire   [63:0] zext_ln264_8_fu_1132_p1;
wire   [63:0] zext_ln264_9_fu_1137_p1;
wire   [63:0] zext_ln264_10_fu_1142_p1;
wire   [63:0] zext_ln264_11_fu_1147_p1;
wire   [63:0] zext_ln264_12_fu_1152_p1;
wire   [63:0] zext_ln264_13_fu_1157_p1;
wire   [63:0] zext_ln264_14_fu_1162_p1;
wire   [63:0] zext_ln264_15_fu_1167_p1;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [7:0] ap_return_13_preg;
reg   [7:0] ap_return_14_preg;
reg   [7:0] ap_return_15_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 grp_AddRoundKey_fu_683_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 8'd0;
#0 ap_return_14_preg = 8'd0;
#0 ap_return_15_preg = 8'd0;
end

Cipher_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1),
    .address2(sbox_address2),
    .ce2(sbox_ce2),
    .q2(sbox_q2),
    .address3(sbox_address3),
    .ce3(sbox_ce3),
    .q3(sbox_q3),
    .address4(sbox_address4),
    .ce4(sbox_ce4),
    .q4(sbox_q4),
    .address5(sbox_address5),
    .ce5(sbox_ce5),
    .q5(sbox_q5),
    .address6(sbox_address6),
    .ce6(sbox_ce6),
    .q6(sbox_q6),
    .address7(sbox_address7),
    .ce7(sbox_ce7),
    .q7(sbox_q7),
    .address8(sbox_address8),
    .ce8(sbox_ce8),
    .q8(sbox_q8),
    .address9(sbox_address9),
    .ce9(sbox_ce9),
    .q9(sbox_q9),
    .address10(sbox_address10),
    .ce10(sbox_ce10),
    .q10(sbox_q10),
    .address11(sbox_address11),
    .ce11(sbox_ce11),
    .q11(sbox_q11),
    .address12(sbox_address12),
    .ce12(sbox_ce12),
    .q12(sbox_q12),
    .address13(sbox_address13),
    .ce13(sbox_ce13),
    .q13(sbox_q13),
    .address14(sbox_address14),
    .ce14(sbox_ce14),
    .q14(sbox_q14),
    .address15(sbox_address15),
    .ce15(sbox_ce15),
    .q15(sbox_q15)
);

MixColumns call_ret6_MixColumns_fu_663(
    .ap_ready(call_ret6_MixColumns_fu_663_ap_ready),
    .state_0_0_read(reg_804),
    .state_0_1_read(reg_838),
    .state_0_2_read(reg_873),
    .state_0_3_read(reg_908),
    .state_1_0_read(reg_810),
    .state_1_1_read(reg_845),
    .state_1_2_read(reg_880),
    .state_1_3_read(reg_887),
    .state_2_0_read(reg_817),
    .state_2_1_read(reg_852),
    .state_2_2_read(reg_859),
    .state_2_3_read(reg_894),
    .state_3_0_read(reg_824),
    .state_3_1_read(reg_831),
    .state_3_2_read(reg_866),
    .state_3_3_read(reg_901),
    .ap_return_0(call_ret6_MixColumns_fu_663_ap_return_0),
    .ap_return_1(call_ret6_MixColumns_fu_663_ap_return_1),
    .ap_return_2(call_ret6_MixColumns_fu_663_ap_return_2),
    .ap_return_3(call_ret6_MixColumns_fu_663_ap_return_3),
    .ap_return_4(call_ret6_MixColumns_fu_663_ap_return_4),
    .ap_return_5(call_ret6_MixColumns_fu_663_ap_return_5),
    .ap_return_6(call_ret6_MixColumns_fu_663_ap_return_6),
    .ap_return_7(call_ret6_MixColumns_fu_663_ap_return_7),
    .ap_return_8(call_ret6_MixColumns_fu_663_ap_return_8),
    .ap_return_9(call_ret6_MixColumns_fu_663_ap_return_9),
    .ap_return_10(call_ret6_MixColumns_fu_663_ap_return_10),
    .ap_return_11(call_ret6_MixColumns_fu_663_ap_return_11),
    .ap_return_12(call_ret6_MixColumns_fu_663_ap_return_12),
    .ap_return_13(call_ret6_MixColumns_fu_663_ap_return_13),
    .ap_return_14(call_ret6_MixColumns_fu_663_ap_return_14),
    .ap_return_15(call_ret6_MixColumns_fu_663_ap_return_15)
);

AddRoundKey grp_AddRoundKey_fu_683(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_683_ap_start),
    .ap_done(grp_AddRoundKey_fu_683_ap_done),
    .ap_idle(grp_AddRoundKey_fu_683_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_683_ap_ready),
    .ap_ce(1'b1),
    .round(grp_AddRoundKey_fu_683_round),
    .state_0_0_read(grp_AddRoundKey_fu_683_state_0_0_read),
    .state_0_1_read(grp_AddRoundKey_fu_683_state_0_1_read),
    .state_0_2_read(grp_AddRoundKey_fu_683_state_0_2_read),
    .state_0_3_read(grp_AddRoundKey_fu_683_state_0_3_read),
    .state_1_0_read(grp_AddRoundKey_fu_683_state_1_0_read),
    .state_1_1_read(grp_AddRoundKey_fu_683_state_1_1_read),
    .state_1_2_read(grp_AddRoundKey_fu_683_state_1_2_read),
    .state_1_3_read(grp_AddRoundKey_fu_683_state_1_3_read),
    .state_2_0_read(grp_AddRoundKey_fu_683_state_2_0_read),
    .state_2_1_read(grp_AddRoundKey_fu_683_state_2_1_read),
    .state_2_2_read(grp_AddRoundKey_fu_683_state_2_2_read),
    .state_2_3_read(grp_AddRoundKey_fu_683_state_2_3_read),
    .state_3_0_read(grp_AddRoundKey_fu_683_state_3_0_read),
    .state_3_1_read(grp_AddRoundKey_fu_683_state_3_1_read),
    .state_3_2_read(grp_AddRoundKey_fu_683_state_3_2_read),
    .state_3_3_read(grp_AddRoundKey_fu_683_state_3_3_read),
    .RoundKey_address0(grp_AddRoundKey_fu_683_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_683_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_AddRoundKey_fu_683_RoundKey_address1),
    .RoundKey_ce1(grp_AddRoundKey_fu_683_RoundKey_ce1),
    .RoundKey_q1(RoundKey_q1),
    .ap_return_0(grp_AddRoundKey_fu_683_ap_return_0),
    .ap_return_1(grp_AddRoundKey_fu_683_ap_return_1),
    .ap_return_2(grp_AddRoundKey_fu_683_ap_return_2),
    .ap_return_3(grp_AddRoundKey_fu_683_ap_return_3),
    .ap_return_4(grp_AddRoundKey_fu_683_ap_return_4),
    .ap_return_5(grp_AddRoundKey_fu_683_ap_return_5),
    .ap_return_6(grp_AddRoundKey_fu_683_ap_return_6),
    .ap_return_7(grp_AddRoundKey_fu_683_ap_return_7),
    .ap_return_8(grp_AddRoundKey_fu_683_ap_return_8),
    .ap_return_9(grp_AddRoundKey_fu_683_ap_return_9),
    .ap_return_10(grp_AddRoundKey_fu_683_ap_return_10),
    .ap_return_11(grp_AddRoundKey_fu_683_ap_return_11),
    .ap_return_12(grp_AddRoundKey_fu_683_ap_return_12),
    .ap_return_13(grp_AddRoundKey_fu_683_ap_return_13),
    .ap_return_14(grp_AddRoundKey_fu_683_ap_return_14),
    .ap_return_15(grp_AddRoundKey_fu_683_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_0_preg <= grp_AddRoundKey_fu_683_ap_return_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_10_preg <= grp_AddRoundKey_fu_683_ap_return_10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_11_preg <= grp_AddRoundKey_fu_683_ap_return_11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_12_preg <= grp_AddRoundKey_fu_683_ap_return_12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_13_preg <= grp_AddRoundKey_fu_683_ap_return_13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_14_preg <= grp_AddRoundKey_fu_683_ap_return_14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_15_preg <= grp_AddRoundKey_fu_683_ap_return_15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_1_preg <= grp_AddRoundKey_fu_683_ap_return_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_2_preg <= grp_AddRoundKey_fu_683_ap_return_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_3_preg <= grp_AddRoundKey_fu_683_ap_return_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_4_preg <= grp_AddRoundKey_fu_683_ap_return_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_5_preg <= grp_AddRoundKey_fu_683_ap_return_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_6_preg <= grp_AddRoundKey_fu_683_ap_return_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_7_preg <= grp_AddRoundKey_fu_683_ap_return_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_8_preg <= grp_AddRoundKey_fu_683_ap_return_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_return_9_preg <= grp_AddRoundKey_fu_683_ap_return_9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_683_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state37) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == ap_NS_fsm_state27) & (1'b1 == ap_CS_fsm_state26)))) begin
            grp_AddRoundKey_fu_683_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_683_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_683_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_810 <= sbox_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_810 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_817 <= sbox_q2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_817 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_824 <= sbox_q3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_824 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_831 <= sbox_q4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_831 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_838 <= sbox_q5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        reg_838 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_845 <= sbox_q6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        reg_845 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_852 <= sbox_q7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        reg_852 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_859 <= sbox_q8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        reg_859 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_866 <= sbox_q9;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        reg_866 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_873 <= sbox_q10;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        reg_873 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_880 <= sbox_q11;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        reg_880 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_887 <= sbox_q12;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        reg_887 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_894 <= sbox_q13;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        reg_894 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_901 <= sbox_q14;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        reg_901 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        reg_908 <= sbox_q15;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        reg_908 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        round_0_reg_651 <= round_fu_1086_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        round_0_reg_651 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_804 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state9))) begin
        state_0_0_read_ass_reg_491 <= grp_AddRoundKey_fu_683_ap_return_0;
        state_0_1_read_ass_reg_501 <= grp_AddRoundKey_fu_683_ap_return_1;
        state_0_2_read_ass_reg_511 <= grp_AddRoundKey_fu_683_ap_return_2;
        state_0_3_read_ass_reg_521 <= grp_AddRoundKey_fu_683_ap_return_3;
        state_1_0_read_ass_reg_531 <= grp_AddRoundKey_fu_683_ap_return_4;
        state_1_1_read_ass_reg_541 <= grp_AddRoundKey_fu_683_ap_return_5;
        state_1_2_read_ass_reg_551 <= grp_AddRoundKey_fu_683_ap_return_6;
        state_1_3_read_ass_reg_561 <= grp_AddRoundKey_fu_683_ap_return_7;
        state_2_0_read_ass_reg_571 <= grp_AddRoundKey_fu_683_ap_return_8;
        state_2_1_read_ass_reg_581 <= grp_AddRoundKey_fu_683_ap_return_9;
        state_2_2_read_ass_reg_591 <= grp_AddRoundKey_fu_683_ap_return_10;
        state_2_3_read_ass_reg_601 <= grp_AddRoundKey_fu_683_ap_return_11;
        state_3_0_read_ass_reg_611 <= grp_AddRoundKey_fu_683_ap_return_12;
        state_3_1_read_ass_reg_621 <= grp_AddRoundKey_fu_683_ap_return_13;
        state_3_2_read_ass_reg_631 <= grp_AddRoundKey_fu_683_ap_return_14;
        state_3_3_read_ass_reg_641 <= grp_AddRoundKey_fu_683_ap_return_15;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state37))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_683_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state37))) begin
        RoundKey_ce1 = grp_AddRoundKey_fu_683_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_0 = grp_AddRoundKey_fu_683_ap_return_0;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_1 = grp_AddRoundKey_fu_683_ap_return_1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_10 = grp_AddRoundKey_fu_683_ap_return_10;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_11 = grp_AddRoundKey_fu_683_ap_return_11;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_12 = grp_AddRoundKey_fu_683_ap_return_12;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_13 = grp_AddRoundKey_fu_683_ap_return_13;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_14 = grp_AddRoundKey_fu_683_ap_return_14;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_15 = grp_AddRoundKey_fu_683_ap_return_15;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_2 = grp_AddRoundKey_fu_683_ap_return_2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_3 = grp_AddRoundKey_fu_683_ap_return_3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_4 = grp_AddRoundKey_fu_683_ap_return_4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_5 = grp_AddRoundKey_fu_683_ap_return_5;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_6 = grp_AddRoundKey_fu_683_ap_return_6;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_7 = grp_AddRoundKey_fu_683_ap_return_7;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_8 = grp_AddRoundKey_fu_683_ap_return_8;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_return_9 = grp_AddRoundKey_fu_683_ap_return_9;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_AddRoundKey_fu_683_ap_start = 1'b1;
    end else begin
        grp_AddRoundKey_fu_683_ap_start = grp_AddRoundKey_fu_683_ap_start_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_round = 6'd14;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_round = zext_ln426_fu_1081_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_round = 6'd0;
    end else begin
        grp_AddRoundKey_fu_683_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_0_0_read = sbox_q0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_0_0_read = call_ret6_MixColumns_fu_663_ap_return_0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_0_0_read = state_0_0_read;
    end else begin
        grp_AddRoundKey_fu_683_state_0_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_0_1_read = sbox_q5;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_0_1_read = call_ret6_MixColumns_fu_663_ap_return_1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_0_1_read = state_0_1_read;
    end else begin
        grp_AddRoundKey_fu_683_state_0_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_0_2_read = sbox_q10;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_0_2_read = call_ret6_MixColumns_fu_663_ap_return_2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_0_2_read = state_0_2_read;
    end else begin
        grp_AddRoundKey_fu_683_state_0_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_0_3_read = sbox_q15;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_0_3_read = call_ret6_MixColumns_fu_663_ap_return_3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_0_3_read = state_0_3_read;
    end else begin
        grp_AddRoundKey_fu_683_state_0_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_1_0_read = sbox_q1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_1_0_read = call_ret6_MixColumns_fu_663_ap_return_4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_1_0_read = state_1_0_read;
    end else begin
        grp_AddRoundKey_fu_683_state_1_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_1_1_read = sbox_q6;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_1_1_read = call_ret6_MixColumns_fu_663_ap_return_5;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_1_1_read = state_1_1_read;
    end else begin
        grp_AddRoundKey_fu_683_state_1_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_1_2_read = sbox_q11;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_1_2_read = call_ret6_MixColumns_fu_663_ap_return_6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_1_2_read = state_1_2_read;
    end else begin
        grp_AddRoundKey_fu_683_state_1_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_1_3_read = sbox_q12;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_1_3_read = call_ret6_MixColumns_fu_663_ap_return_7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_1_3_read = state_1_3_read;
    end else begin
        grp_AddRoundKey_fu_683_state_1_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_2_0_read = sbox_q2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_2_0_read = call_ret6_MixColumns_fu_663_ap_return_8;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_2_0_read = state_2_0_read;
    end else begin
        grp_AddRoundKey_fu_683_state_2_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_2_1_read = sbox_q7;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_2_1_read = call_ret6_MixColumns_fu_663_ap_return_9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_2_1_read = state_2_1_read;
    end else begin
        grp_AddRoundKey_fu_683_state_2_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_2_2_read = sbox_q8;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_2_2_read = call_ret6_MixColumns_fu_663_ap_return_10;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_2_2_read = state_2_2_read;
    end else begin
        grp_AddRoundKey_fu_683_state_2_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_2_3_read = sbox_q13;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_2_3_read = call_ret6_MixColumns_fu_663_ap_return_11;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_2_3_read = state_2_3_read;
    end else begin
        grp_AddRoundKey_fu_683_state_2_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_3_0_read = sbox_q3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_3_0_read = call_ret6_MixColumns_fu_663_ap_return_12;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_3_0_read = state_3_0_read;
    end else begin
        grp_AddRoundKey_fu_683_state_3_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_3_1_read = sbox_q4;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_3_1_read = call_ret6_MixColumns_fu_663_ap_return_13;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_3_1_read = state_3_1_read;
    end else begin
        grp_AddRoundKey_fu_683_state_3_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_3_2_read = sbox_q9;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_3_2_read = call_ret6_MixColumns_fu_663_ap_return_14;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_3_2_read = state_3_2_read;
    end else begin
        grp_AddRoundKey_fu_683_state_3_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_AddRoundKey_fu_683_state_3_3_read = sbox_q14;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_683_state_3_3_read = call_ret6_MixColumns_fu_663_ap_return_15;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_AddRoundKey_fu_683_state_3_3_read = state_3_3_read;
    end else begin
        grp_AddRoundKey_fu_683_state_3_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_address0 = zext_ln264_fu_1092_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        sbox_address0 = zext_ln264_31_fu_996_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        sbox_address0 = zext_ln264_30_fu_991_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        sbox_address0 = zext_ln264_29_fu_986_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sbox_address0 = zext_ln264_28_fu_981_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        sbox_address0 = zext_ln264_27_fu_976_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sbox_address0 = zext_ln264_26_fu_971_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sbox_address0 = zext_ln264_25_fu_966_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sbox_address0 = zext_ln264_24_fu_961_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sbox_address0 = zext_ln264_23_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sbox_address0 = zext_ln264_22_fu_951_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_address0 = zext_ln264_21_fu_946_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sbox_address0 = zext_ln264_20_fu_941_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sbox_address0 = zext_ln264_19_fu_936_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sbox_address0 = zext_ln264_18_fu_931_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sbox_address0 = zext_ln264_17_fu_926_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address0 = zext_ln264_16_fu_921_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce10 = 1'b1;
    end else begin
        sbox_ce10 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce11 = 1'b1;
    end else begin
        sbox_ce11 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce12 = 1'b1;
    end else begin
        sbox_ce12 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce13 = 1'b1;
    end else begin
        sbox_ce13 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce14 = 1'b1;
    end else begin
        sbox_ce14 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce15 = 1'b1;
    end else begin
        sbox_ce15 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce2 = 1'b1;
    end else begin
        sbox_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce3 = 1'b1;
    end else begin
        sbox_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce4 = 1'b1;
    end else begin
        sbox_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce5 = 1'b1;
    end else begin
        sbox_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce6 = 1'b1;
    end else begin
        sbox_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce7 = 1'b1;
    end else begin
        sbox_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce8 = 1'b1;
    end else begin
        sbox_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sbox_ce9 = 1'b1;
    end else begin
        sbox_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln421_fu_915_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RoundKey_address0 = grp_AddRoundKey_fu_683_RoundKey_address0;

assign RoundKey_address1 = grp_AddRoundKey_fu_683_RoundKey_address1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state27 = ap_NS_fsm[32'd26];

assign ap_NS_fsm_state37 = ap_NS_fsm[32'd36];

assign icmp_ln421_fu_915_p2 = ((round_0_reg_651 == 4'd14) ? 1'b1 : 1'b0);

assign round_fu_1086_p2 = (round_0_reg_651 + 4'd1);

assign sbox_address1 = zext_ln264_1_fu_1097_p1;

assign sbox_address10 = zext_ln264_10_fu_1142_p1;

assign sbox_address11 = zext_ln264_11_fu_1147_p1;

assign sbox_address12 = zext_ln264_12_fu_1152_p1;

assign sbox_address13 = zext_ln264_13_fu_1157_p1;

assign sbox_address14 = zext_ln264_14_fu_1162_p1;

assign sbox_address15 = zext_ln264_15_fu_1167_p1;

assign sbox_address2 = zext_ln264_2_fu_1102_p1;

assign sbox_address3 = zext_ln264_3_fu_1107_p1;

assign sbox_address4 = zext_ln264_4_fu_1112_p1;

assign sbox_address5 = zext_ln264_5_fu_1117_p1;

assign sbox_address6 = zext_ln264_6_fu_1122_p1;

assign sbox_address7 = zext_ln264_7_fu_1127_p1;

assign sbox_address8 = zext_ln264_8_fu_1132_p1;

assign sbox_address9 = zext_ln264_9_fu_1137_p1;

assign zext_ln264_10_fu_1142_p1 = state_2_2_read_ass_reg_591;

assign zext_ln264_11_fu_1147_p1 = state_3_2_read_ass_reg_631;

assign zext_ln264_12_fu_1152_p1 = state_0_3_read_ass_reg_521;

assign zext_ln264_13_fu_1157_p1 = state_1_3_read_ass_reg_561;

assign zext_ln264_14_fu_1162_p1 = state_2_3_read_ass_reg_601;

assign zext_ln264_15_fu_1167_p1 = state_3_3_read_ass_reg_641;

assign zext_ln264_16_fu_921_p1 = state_0_0_read_ass_reg_491;

assign zext_ln264_17_fu_926_p1 = state_1_0_read_ass_reg_531;

assign zext_ln264_18_fu_931_p1 = state_2_0_read_ass_reg_571;

assign zext_ln264_19_fu_936_p1 = state_3_0_read_ass_reg_611;

assign zext_ln264_1_fu_1097_p1 = state_1_0_read_ass_reg_531;

assign zext_ln264_20_fu_941_p1 = state_0_1_read_ass_reg_501;

assign zext_ln264_21_fu_946_p1 = state_1_1_read_ass_reg_541;

assign zext_ln264_22_fu_951_p1 = state_2_1_read_ass_reg_581;

assign zext_ln264_23_fu_956_p1 = state_3_1_read_ass_reg_621;

assign zext_ln264_24_fu_961_p1 = state_0_2_read_ass_reg_511;

assign zext_ln264_25_fu_966_p1 = state_1_2_read_ass_reg_551;

assign zext_ln264_26_fu_971_p1 = state_2_2_read_ass_reg_591;

assign zext_ln264_27_fu_976_p1 = state_3_2_read_ass_reg_631;

assign zext_ln264_28_fu_981_p1 = state_0_3_read_ass_reg_521;

assign zext_ln264_29_fu_986_p1 = state_1_3_read_ass_reg_561;

assign zext_ln264_2_fu_1102_p1 = state_2_0_read_ass_reg_571;

assign zext_ln264_30_fu_991_p1 = state_2_3_read_ass_reg_601;

assign zext_ln264_31_fu_996_p1 = state_3_3_read_ass_reg_641;

assign zext_ln264_3_fu_1107_p1 = state_3_0_read_ass_reg_611;

assign zext_ln264_4_fu_1112_p1 = state_0_1_read_ass_reg_501;

assign zext_ln264_5_fu_1117_p1 = state_1_1_read_ass_reg_541;

assign zext_ln264_6_fu_1122_p1 = state_2_1_read_ass_reg_581;

assign zext_ln264_7_fu_1127_p1 = state_3_1_read_ass_reg_621;

assign zext_ln264_8_fu_1132_p1 = state_0_2_read_ass_reg_511;

assign zext_ln264_9_fu_1137_p1 = state_1_2_read_ass_reg_551;

assign zext_ln264_fu_1092_p1 = state_0_0_read_ass_reg_491;

assign zext_ln426_fu_1081_p1 = round_0_reg_651;

endmodule //Cipher
