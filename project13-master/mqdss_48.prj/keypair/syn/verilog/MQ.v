// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MQ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fx_address0,
        fx_ce0,
        fx_we0,
        fx_d0,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1,
        F_address0,
        F_ce0,
        F_q0,
        F_address1,
        F_ce1,
        F_q1
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 17'd32768;
parameter    ap_ST_fsm_state20 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] fx_address0;
output   fx_ce0;
output   fx_we0;
output  [15:0] fx_d0;
output  [5:0] x_address0;
output   x_ce0;
input  [4:0] x_q0;
output  [5:0] x_address1;
output   x_ce1;
input  [4:0] x_q1;
output  [15:0] F_address0;
output   F_ce0;
input  [4:0] F_q0;
output  [15:0] F_address1;
output   F_ce1;
input  [4:0] F_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fx_ce0;
reg fx_we0;
reg[5:0] x_address0;
reg x_ce0;
reg[5:0] x_address1;
reg x_ce1;
reg[15:0] F_address0;
reg F_ce0;
reg[15:0] F_address1;
reg F_ce1;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_2_reg_327;
reg  signed [4:0] reg_345;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state13;
wire   [5:0] add_ln40_fu_350_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln44_fu_367_p2;
wire   [12:0] sub_ln46_fu_413_p2;
reg   [12:0] sub_ln46_reg_967;
wire    ap_CS_fsm_state5;
wire   [9:0] zext_ln46_7_fu_419_p1;
reg   [9:0] zext_ln46_7_reg_972;
wire   [9:0] zext_ln45_fu_423_p1;
reg   [9:0] zext_ln45_reg_977;
wire   [5:0] j_fu_433_p2;
reg   [5:0] j_reg_985;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln45_fu_427_p2;
wire   [5:0] i_fu_476_p2;
wire   [9:0] mul_ln46_fu_486_p2;
reg  signed [9:0] mul_ln46_reg_1005;
reg   [5:0] r_addr_1_reg_1010;
wire    ap_CS_fsm_state8;
wire  signed [10:0] grp_fu_932_p3;
reg  signed [10:0] add_ln46_1_reg_1015;
wire   [0:0] icmp_ln51_fu_513_p2;
wire    ap_CS_fsm_state10;
wire   [17:0] sub_ln53_fu_559_p2;
reg   [17:0] sub_ln53_reg_1034;
wire    ap_CS_fsm_state11;
wire   [10:0] zext_ln53_7_fu_565_p1;
reg   [10:0] zext_ln53_7_reg_1039;
wire   [10:0] zext_ln52_fu_569_p1;
reg   [10:0] zext_ln52_reg_1044;
wire   [5:0] j_2_fu_579_p2;
reg   [5:0] j_2_reg_1052;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln52_fu_573_p2;
wire   [10:0] i_15_fu_624_p2;
wire   [10:0] mul_ln53_1_fu_634_p2;
reg  signed [10:0] mul_ln53_1_reg_1072;
reg   [5:0] r_addr_2_reg_1077;
wire    ap_CS_fsm_state14;
wire  signed [11:0] grp_fu_939_p3;
reg  signed [11:0] add_ln53_1_reg_1082;
wire   [0:0] icmp_ln58_fu_661_p2;
reg   [0:0] icmp_ln58_reg_1087;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state16_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln58_reg_1087_pp0_iter1_reg;
reg   [0:0] icmp_ln58_reg_1087_pp0_iter2_reg;
wire   [5:0] i_16_fu_667_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln59_fu_673_p1;
reg   [63:0] zext_ln59_reg_1096;
reg   [63:0] zext_ln59_reg_1096_pp0_iter1_reg;
reg   [63:0] zext_ln59_reg_1096_pp0_iter2_reg;
wire   [4:0] t_fu_752_p2;
reg   [4:0] t_reg_1106;
reg   [4:0] trunc_ln3_reg_1113;
reg   [4:0] trunc_ln4_reg_1120;
reg   [0:0] tmp_reg_1127;
reg   [0:0] tmp_23_reg_1133;
wire   [4:0] add_ln23_2_fu_890_p2;
reg   [4:0] add_ln23_2_reg_1138;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] p_xij_address0;
reg    p_xij_ce0;
reg    p_xij_we0;
wire   [5:0] p_xij_q0;
wire   [10:0] p_xij_address1;
reg    p_xij_ce1;
wire   [5:0] p_xij_q1;
reg   [5:0] r_address0;
reg    r_ce0;
reg    r_we0;
reg   [31:0] r_d0;
wire   [31:0] r_q0;
wire    grp_generate_quadratic_t_fu_338_ap_start;
wire    grp_generate_quadratic_t_fu_338_ap_done;
wire    grp_generate_quadratic_t_fu_338_ap_idle;
wire    grp_generate_quadratic_t_fu_338_ap_ready;
wire   [10:0] grp_generate_quadratic_t_fu_338_xij_address0;
wire    grp_generate_quadratic_t_fu_338_xij_ce0;
wire    grp_generate_quadratic_t_fu_338_xij_we0;
wire   [5:0] grp_generate_quadratic_t_fu_338_xij_d0;
wire   [5:0] grp_generate_quadratic_t_fu_338_x_address0;
wire    grp_generate_quadratic_t_fu_338_x_ce0;
wire   [5:0] grp_generate_quadratic_t_fu_338_x_address1;
wire    grp_generate_quadratic_t_fu_338_x_ce1;
reg   [5:0] phi_ln40_reg_268;
wire   [0:0] icmp_ln40_fu_361_p2;
reg   [5:0] i_0_reg_279;
wire    ap_CS_fsm_state3;
reg   [5:0] j_0_reg_291;
wire    ap_CS_fsm_state9;
reg   [10:0] i_1_reg_303;
reg   [5:0] j_1_reg_315;
wire    ap_CS_fsm_state15;
reg    grp_generate_quadratic_t_fu_338_ap_start_reg;
wire   [63:0] zext_ln40_fu_356_p1;
wire   [63:0] zext_ln46_fu_373_p1;
wire   [63:0] zext_ln46_3_fu_384_p1;
wire   [63:0] zext_ln46_4_fu_460_p1;
wire   [63:0] zext_ln46_5_fu_471_p1;
wire   [63:0] zext_ln46_6_fu_498_p1;
wire   [63:0] zext_ln53_fu_519_p1;
wire   [63:0] zext_ln53_3_fu_530_p1;
wire   [63:0] zext_ln53_4_fu_608_p1;
wire   [63:0] zext_ln53_5_fu_619_p1;
wire   [63:0] zext_ln53_6_fu_646_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] add_ln46_2_fu_506_p2;
wire   [31:0] add_ln53_2_fu_654_p2;
wire   [5:0] or_ln46_fu_378_p2;
wire   [11:0] shl_ln46_1_fu_389_p3;
wire   [9:0] shl_ln46_2_fu_401_p3;
wire   [12:0] zext_ln46_1_fu_397_p1;
wire   [12:0] zext_ln46_2_fu_409_p1;
wire   [6:0] shl_ln_fu_439_p3;
wire   [12:0] zext_ln46_8_fu_447_p1;
wire   [12:0] add_ln46_fu_451_p2;
wire  signed [31:0] sext_ln46_fu_456_p1;
wire   [31:0] or_ln46_1_fu_465_p2;
wire   [4:0] mul_ln46_fu_486_p0;
wire  signed [4:0] mul_ln46_fu_486_p1;
wire  signed [31:0] sext_ln46_3_fu_503_p1;
wire   [10:0] or_ln53_fu_524_p2;
wire   [16:0] shl_ln53_1_fu_535_p3;
wire   [14:0] shl_ln53_2_fu_547_p3;
wire   [17:0] zext_ln53_1_fu_543_p1;
wire   [17:0] zext_ln53_2_fu_555_p1;
wire   [11:0] or_ln53_2_fu_585_p4;
wire   [17:0] zext_ln53_8_fu_595_p1;
wire   [17:0] add_ln53_fu_599_p2;
wire  signed [31:0] sext_ln53_fu_604_p1;
wire   [31:0] or_ln53_1_fu_613_p2;
wire  signed [4:0] mul_ln53_1_fu_634_p0;
wire   [5:0] mul_ln53_1_fu_634_p1;
wire  signed [31:0] sext_ln53_5_fu_651_p1;
wire   [14:0] trunc_ln59_fu_678_p1;
wire   [15:0] trunc_ln59_1_fu_682_p4;
wire   [15:0] zext_ln59_1_fu_692_p1;
wire   [14:0] trunc_ln59_4_fu_710_p4;
wire   [9:0] trunc_ln59_2_fu_696_p1;
wire   [9:0] trunc_ln59_3_fu_700_p4;
wire   [4:0] trunc_ln14_fu_738_p1;
wire   [4:0] trunc_ln14_1_fu_742_p4;
wire   [9:0] add_ln10_2_fu_732_p2;
wire   [14:0] add_ln10_fu_726_p2;
wire   [15:0] add_ln59_fu_720_p2;
wire   [5:0] zext_ln14_fu_786_p1;
wire   [5:0] zext_ln16_fu_789_p1;
wire   [5:0] add_ln18_1_fu_801_p2;
wire   [5:0] zext_ln19_fu_795_p1;
wire   [5:0] add_ln18_fu_811_p2;
wire   [4:0] zext_ln16_1_fu_798_p1;
wire   [4:0] add_ln18_2_fu_807_p2;
wire   [6:0] zext_ln18_1_fu_817_p1;
wire   [6:0] zext_ln18_fu_792_p1;
wire   [6:0] t_4_fu_827_p2;
wire   [1:0] tmp_1_fu_833_p4;
wire   [4:0] add_ln22_2_fu_852_p2;
wire   [4:0] add_ln22_1_fu_847_p2;
wire   [4:0] add_ln22_fu_856_p2;
wire   [5:0] zext_ln22_2_fu_843_p1;
wire   [5:0] zext_ln22_fu_862_p1;
wire   [5:0] t_5_fu_866_p2;
wire   [4:0] add_ln20_fu_821_p2;
wire   [4:0] zext_ln23_4_fu_880_p1;
wire   [4:0] add_ln23_fu_884_p2;
wire   [5:0] zext_ln23_3_fu_895_p1;
wire   [5:0] zext_ln23_fu_898_p1;
wire   [5:0] t_6_fu_901_p2;
wire   [0:0] icmp_ln24_fu_907_p2;
wire   [5:0] select_ln24_fu_913_p3;
wire   [5:0] and_ln24_fu_921_p2;
wire   [4:0] grp_fu_932_p0;
wire   [5:0] grp_fu_939_p1;
wire    ap_CS_fsm_state20;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 grp_generate_quadratic_t_fu_338_ap_start_reg = 1'b0;
end

MQ_p_xij #(
    .DataWidth( 6 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
p_xij_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_xij_address0),
    .ce0(p_xij_ce0),
    .we0(p_xij_we0),
    .d0(grp_generate_quadratic_t_fu_338_xij_d0),
    .q0(p_xij_q0),
    .address1(p_xij_address1),
    .ce1(p_xij_ce1),
    .q1(p_xij_q1)
);

MQ_r #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r_address0),
    .ce0(r_ce0),
    .we0(r_we0),
    .d0(r_d0),
    .q0(r_q0)
);

generate_quadratic_t grp_generate_quadratic_t_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generate_quadratic_t_fu_338_ap_start),
    .ap_done(grp_generate_quadratic_t_fu_338_ap_done),
    .ap_idle(grp_generate_quadratic_t_fu_338_ap_idle),
    .ap_ready(grp_generate_quadratic_t_fu_338_ap_ready),
    .xij_address0(grp_generate_quadratic_t_fu_338_xij_address0),
    .xij_ce0(grp_generate_quadratic_t_fu_338_xij_ce0),
    .xij_we0(grp_generate_quadratic_t_fu_338_xij_we0),
    .xij_d0(grp_generate_quadratic_t_fu_338_xij_d0),
    .x_address0(grp_generate_quadratic_t_fu_338_x_address0),
    .x_ce0(grp_generate_quadratic_t_fu_338_x_ce0),
    .x_q0(x_q0),
    .x_address1(grp_generate_quadratic_t_fu_338_x_address1),
    .x_ce1(grp_generate_quadratic_t_fu_338_x_ce1),
    .x_q1(x_q1)
);

crypto_sign_keypakbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 11 ))
crypto_sign_keypakbM_U86(
    .din0(grp_fu_932_p0),
    .din1(reg_345),
    .din2(mul_ln46_reg_1005),
    .dout(grp_fu_932_p3)
);

crypto_sign_keypalbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
crypto_sign_keypalbW_U87(
    .din0(reg_345),
    .din1(grp_fu_939_p1),
    .din2(mul_ln53_1_reg_1072),
    .dout(grp_fu_939_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln51_fu_513_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln51_fu_513_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generate_quadratic_t_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln40_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_generate_quadratic_t_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_generate_quadratic_t_fu_338_ap_ready == 1'b1)) begin
            grp_generate_quadratic_t_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_reg_279 <= i_fu_476_p2;
    end else if (((grp_generate_quadratic_t_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_279 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_303 <= 11'd0;
    end else if (((icmp_ln52_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_1_reg_303 <= i_15_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln51_fu_513_p2 == 1'd0))) begin
        i_2_reg_327 <= 6'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_fu_661_p2 == 1'd0))) begin
        i_2_reg_327 <= i_16_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_291 <= j_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_291 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_315 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_315 <= j_2_reg_1052;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln40_fu_361_p2 == 1'd0))) begin
        phi_ln40_reg_268 <= add_ln40_fu_350_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln40_reg_268 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_345 <= F_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_345 <= F_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_1087_pp0_iter1_reg == 1'd0))) begin
        add_ln23_2_reg_1138 <= add_ln23_2_fu_890_p2;
        tmp_23_reg_1133 <= t_5_fu_866_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln46_1_reg_1015 <= grp_fu_932_p3;
        r_addr_1_reg_1010 <= zext_ln46_6_fu_498_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln53_1_reg_1082 <= grp_fu_939_p3;
        r_addr_2_reg_1077 <= zext_ln53_6_fu_646_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln58_reg_1087 <= icmp_ln58_fu_661_p2;
        icmp_ln58_reg_1087_pp0_iter1_reg <= icmp_ln58_reg_1087;
        zext_ln59_reg_1096_pp0_iter1_reg[5 : 0] <= zext_ln59_reg_1096[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln58_reg_1087_pp0_iter2_reg <= icmp_ln58_reg_1087_pp0_iter1_reg;
        zext_ln59_reg_1096_pp0_iter2_reg[5 : 0] <= zext_ln59_reg_1096_pp0_iter1_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_2_reg_1052 <= j_2_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_985 <= j_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln46_reg_1005 <= mul_ln46_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln53_1_reg_1072 <= mul_ln53_1_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sub_ln46_reg_967[12 : 4] <= sub_ln46_fu_413_p2[12 : 4];
        zext_ln45_reg_977[4 : 0] <= zext_ln45_fu_423_p1[4 : 0];
        zext_ln46_7_reg_972[4 : 0] <= zext_ln46_7_fu_419_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_ln53_reg_1034[17 : 4] <= sub_ln53_fu_559_p2[17 : 4];
        zext_ln52_reg_1044[5 : 0] <= zext_ln52_fu_569_p1[5 : 0];
        zext_ln53_7_reg_1039[5 : 0] <= zext_ln53_7_fu_565_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_reg_1087 == 1'd0))) begin
        t_reg_1106 <= t_fu_752_p2;
        tmp_reg_1127 <= add_ln59_fu_720_p2[32'd15];
        trunc_ln3_reg_1113 <= {{add_ln10_2_fu_732_p2[9:5]}};
        trunc_ln4_reg_1120 <= {{add_ln10_fu_726_p2[14:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_fu_661_p2 == 1'd0))) begin
        zext_ln59_reg_1096[5 : 0] <= zext_ln59_fu_673_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        F_address0 = zext_ln53_4_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        F_address0 = zext_ln46_4_fu_460_p1;
    end else begin
        F_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        F_address1 = zext_ln53_5_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        F_address1 = zext_ln46_5_fu_471_p1;
    end else begin
        F_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        F_ce0 = 1'b1;
    end else begin
        F_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        F_ce1 = 1'b1;
    end else begin
        F_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln58_fu_661_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fx_ce0 = 1'b1;
    end else begin
        fx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln58_reg_1087_pp0_iter2_reg == 1'd0))) begin
        fx_we0 = 1'b1;
    end else begin
        fx_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_xij_address0 = zext_ln53_fu_519_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_xij_address0 = grp_generate_quadratic_t_fu_338_xij_address0;
    end else begin
        p_xij_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_xij_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_xij_ce0 = grp_generate_quadratic_t_fu_338_xij_ce0;
    end else begin
        p_xij_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_xij_ce1 = 1'b1;
    end else begin
        p_xij_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_xij_we0 = grp_generate_quadratic_t_fu_338_xij_we0;
    end else begin
        p_xij_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_address0 = zext_ln59_fu_673_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        r_address0 = r_addr_2_reg_1077;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        r_address0 = zext_ln53_6_fu_646_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_address0 = r_addr_1_reg_1010;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_address0 = zext_ln46_6_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_address0 = zext_ln40_fu_356_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_d0 = add_ln53_2_fu_654_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_d0 = add_ln46_2_fu_506_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_d0 = 32'd0;
    end else begin
        r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = zext_ln46_fu_373_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = grp_generate_quadratic_t_fu_338_x_address0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address1 = zext_ln46_3_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address1 = grp_generate_quadratic_t_fu_338_x_address1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ce0 = grp_generate_quadratic_t_fu_338_x_ce0;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ce1 = grp_generate_quadratic_t_fu_338_x_ce1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln40_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_generate_quadratic_t_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln44_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln45_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln51_fu_513_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln52_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln58_fu_661_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln58_fu_661_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_2_fu_732_p2 = (trunc_ln59_2_fu_696_p1 + trunc_ln59_3_fu_700_p4);

assign add_ln10_fu_726_p2 = (trunc_ln59_fu_678_p1 + trunc_ln59_4_fu_710_p4);

assign add_ln18_1_fu_801_p2 = (zext_ln14_fu_786_p1 + zext_ln16_fu_789_p1);

assign add_ln18_2_fu_807_p2 = (trunc_ln3_reg_1113 + t_reg_1106);

assign add_ln18_fu_811_p2 = (add_ln18_1_fu_801_p2 + zext_ln19_fu_795_p1);

assign add_ln20_fu_821_p2 = (zext_ln16_1_fu_798_p1 + add_ln18_2_fu_807_p2);

assign add_ln22_1_fu_847_p2 = (zext_ln16_1_fu_798_p1 + t_reg_1106);

assign add_ln22_2_fu_852_p2 = (trunc_ln3_reg_1113 + trunc_ln4_reg_1120);

assign add_ln22_fu_856_p2 = (add_ln22_2_fu_852_p2 + add_ln22_1_fu_847_p2);

assign add_ln23_2_fu_890_p2 = (add_ln23_fu_884_p2 + trunc_ln4_reg_1120);

assign add_ln23_fu_884_p2 = (add_ln20_fu_821_p2 + zext_ln23_4_fu_880_p1);

assign add_ln40_fu_350_p2 = (phi_ln40_reg_268 + 6'd1);

assign add_ln46_2_fu_506_p2 = ($signed(r_q0) + $signed(sext_ln46_3_fu_503_p1));

assign add_ln46_fu_451_p2 = (sub_ln46_reg_967 + zext_ln46_8_fu_447_p1);

assign add_ln53_2_fu_654_p2 = ($signed(sext_ln53_5_fu_651_p1) + $signed(r_q0));

assign add_ln53_fu_599_p2 = (sub_ln53_reg_1034 + zext_ln53_8_fu_595_p1);

assign add_ln59_fu_720_p2 = (trunc_ln59_1_fu_682_p4 + zext_ln59_1_fu_692_p1);

assign and_ln24_fu_921_p2 = (t_6_fu_901_p2 & select_ln24_fu_913_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign fx_address0 = zext_ln59_reg_1096_pp0_iter2_reg;

assign fx_d0 = and_ln24_fu_921_p2;

assign grp_fu_932_p0 = zext_ln45_reg_977;

assign grp_fu_939_p1 = zext_ln53_7_reg_1039;

assign grp_generate_quadratic_t_fu_338_ap_start = grp_generate_quadratic_t_fu_338_ap_start_reg;

assign i_15_fu_624_p2 = (i_1_reg_303 + 11'd2);

assign i_16_fu_667_p2 = (i_2_reg_327 + 6'd1);

assign i_fu_476_p2 = (i_0_reg_279 + 6'd2);

assign icmp_ln24_fu_907_p2 = ((t_6_fu_901_p2 != 6'd31) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_361_p2 = ((phi_ln40_reg_268 == 6'd47) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_367_p2 = ((i_0_reg_279 < 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_427_p2 = ((j_0_reg_291 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_513_p2 = ((i_1_reg_303 < 11'd1176) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_573_p2 = ((j_1_reg_315 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_661_p2 = ((i_2_reg_327 == 6'd48) ? 1'b1 : 1'b0);

assign j_2_fu_579_p2 = (j_1_reg_315 + 6'd1);

assign j_fu_433_p2 = (j_0_reg_291 + 6'd1);

assign mul_ln46_fu_486_p0 = zext_ln46_7_reg_972;

assign mul_ln46_fu_486_p1 = F_q0;

assign mul_ln46_fu_486_p2 = ($signed({{1'b0}, {mul_ln46_fu_486_p0}}) * $signed(mul_ln46_fu_486_p1));

assign mul_ln53_1_fu_634_p0 = F_q1;

assign mul_ln53_1_fu_634_p1 = zext_ln52_reg_1044;

assign mul_ln53_1_fu_634_p2 = ($signed(mul_ln53_1_fu_634_p0) * $signed({{1'b0}, {mul_ln53_1_fu_634_p1}}));

assign or_ln46_1_fu_465_p2 = (sext_ln46_fu_456_p1 | 32'd1);

assign or_ln46_fu_378_p2 = (i_0_reg_279 | 6'd1);

assign or_ln53_1_fu_613_p2 = (sext_ln53_fu_604_p1 | 32'd1);

assign or_ln53_2_fu_585_p4 = {{{{5'd18}, {j_1_reg_315}}}, {1'd0}};

assign or_ln53_fu_524_p2 = (i_1_reg_303 | 11'd1);

assign p_xij_address1 = zext_ln53_3_fu_530_p1;

assign select_ln24_fu_913_p3 = ((icmp_ln24_fu_907_p2[0:0] === 1'b1) ? 6'd63 : 6'd0);

assign sext_ln46_3_fu_503_p1 = add_ln46_1_reg_1015;

assign sext_ln46_fu_456_p1 = $signed(add_ln46_fu_451_p2);

assign sext_ln53_5_fu_651_p1 = add_ln53_1_reg_1082;

assign sext_ln53_fu_604_p1 = $signed(add_ln53_fu_599_p2);

assign shl_ln46_1_fu_389_p3 = {{i_0_reg_279}, {6'd0}};

assign shl_ln46_2_fu_401_p3 = {{i_0_reg_279}, {4'd0}};

assign shl_ln53_1_fu_535_p3 = {{i_1_reg_303}, {6'd0}};

assign shl_ln53_2_fu_547_p3 = {{i_1_reg_303}, {4'd0}};

assign shl_ln_fu_439_p3 = {{j_0_reg_291}, {1'd0}};

assign sub_ln46_fu_413_p2 = (zext_ln46_1_fu_397_p1 - zext_ln46_2_fu_409_p1);

assign sub_ln53_fu_559_p2 = (zext_ln53_1_fu_543_p1 - zext_ln53_2_fu_555_p1);

assign t_4_fu_827_p2 = (zext_ln18_1_fu_817_p1 + zext_ln18_fu_792_p1);

assign t_5_fu_866_p2 = (zext_ln22_2_fu_843_p1 + zext_ln22_fu_862_p1);

assign t_6_fu_901_p2 = (zext_ln23_3_fu_895_p1 + zext_ln23_fu_898_p1);

assign t_fu_752_p2 = (trunc_ln14_fu_738_p1 + trunc_ln14_1_fu_742_p4);

assign tmp_1_fu_833_p4 = {{t_4_fu_827_p2[6:5]}};

assign trunc_ln14_1_fu_742_p4 = {{r_q0[19:15]}};

assign trunc_ln14_fu_738_p1 = r_q0[4:0];

assign trunc_ln59_1_fu_682_p4 = {{r_q0[30:15]}};

assign trunc_ln59_2_fu_696_p1 = r_q0[9:0];

assign trunc_ln59_3_fu_700_p4 = {{r_q0[24:15]}};

assign trunc_ln59_4_fu_710_p4 = {{r_q0[29:15]}};

assign trunc_ln59_fu_678_p1 = r_q0[14:0];

assign zext_ln14_fu_786_p1 = t_reg_1106;

assign zext_ln16_1_fu_798_p1 = tmp_reg_1127;

assign zext_ln16_fu_789_p1 = trunc_ln3_reg_1113;

assign zext_ln18_1_fu_817_p1 = add_ln18_fu_811_p2;

assign zext_ln18_fu_792_p1 = trunc_ln4_reg_1120;

assign zext_ln19_fu_795_p1 = tmp_reg_1127;

assign zext_ln22_2_fu_843_p1 = tmp_1_fu_833_p4;

assign zext_ln22_fu_862_p1 = add_ln22_fu_856_p2;

assign zext_ln23_3_fu_895_p1 = tmp_23_reg_1133;

assign zext_ln23_4_fu_880_p1 = tmp_1_fu_833_p4;

assign zext_ln23_fu_898_p1 = add_ln23_2_reg_1138;

assign zext_ln40_fu_356_p1 = phi_ln40_reg_268;

assign zext_ln45_fu_423_p1 = x_q1;

assign zext_ln46_1_fu_397_p1 = shl_ln46_1_fu_389_p3;

assign zext_ln46_2_fu_409_p1 = shl_ln46_2_fu_401_p3;

assign zext_ln46_3_fu_384_p1 = or_ln46_fu_378_p2;

assign zext_ln46_4_fu_460_p1 = $unsigned(sext_ln46_fu_456_p1);

assign zext_ln46_5_fu_471_p1 = or_ln46_1_fu_465_p2;

assign zext_ln46_6_fu_498_p1 = j_0_reg_291;

assign zext_ln46_7_fu_419_p1 = x_q0;

assign zext_ln46_8_fu_447_p1 = shl_ln_fu_439_p3;

assign zext_ln46_fu_373_p1 = i_0_reg_279;

assign zext_ln52_fu_569_p1 = p_xij_q1;

assign zext_ln53_1_fu_543_p1 = shl_ln53_1_fu_535_p3;

assign zext_ln53_2_fu_555_p1 = shl_ln53_2_fu_547_p3;

assign zext_ln53_3_fu_530_p1 = or_ln53_fu_524_p2;

assign zext_ln53_4_fu_608_p1 = $unsigned(sext_ln53_fu_604_p1);

assign zext_ln53_5_fu_619_p1 = or_ln53_1_fu_613_p2;

assign zext_ln53_6_fu_646_p1 = j_1_reg_315;

assign zext_ln53_7_fu_565_p1 = p_xij_q0;

assign zext_ln53_8_fu_595_p1 = or_ln53_2_fu_585_p4;

assign zext_ln53_fu_519_p1 = i_1_reg_303;

assign zext_ln59_1_fu_692_p1 = trunc_ln59_fu_678_p1;

assign zext_ln59_fu_673_p1 = i_2_reg_327;

always @ (posedge ap_clk) begin
    sub_ln46_reg_967[3:0] <= 4'b0000;
    zext_ln46_7_reg_972[9:5] <= 5'b00000;
    zext_ln45_reg_977[9:5] <= 5'b00000;
    sub_ln53_reg_1034[3:0] <= 4'b0000;
    zext_ln53_7_reg_1039[10:6] <= 5'b00000;
    zext_ln52_reg_1044[10:6] <= 5'b00000;
    zext_ln59_reg_1096[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln59_reg_1096_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln59_reg_1096_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //MQ
