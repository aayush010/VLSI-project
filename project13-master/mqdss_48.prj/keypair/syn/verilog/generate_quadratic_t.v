// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generate_quadratic_t (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xij_address0,
        xij_ce0,
        xij_we0,
        xij_d0,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] xij_address0;
output   xij_ce0;
output   xij_we0;
output  [5:0] xij_d0;
output  [5:0] x_address0;
output   x_ce0;
input  [4:0] x_q0;
output  [5:0] x_address1;
output   x_ce1;
input  [4:0] x_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xij_ce0;
reg xij_we0;
reg x_ce0;
reg x_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_fu_146_p2;
reg   [5:0] i_reg_319;
wire    ap_CS_fsm_state2;
wire   [11:0] k_fu_152_p2;
reg   [11:0] k_reg_324;
wire   [0:0] icmp_ln10_fu_140_p2;
reg   [5:0] x_addr_reg_329;
wire   [5:0] j_fu_169_p2;
reg   [5:0] j_reg_337;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln11_fu_163_p2;
wire   [5:0] add_ln10_fu_180_p2;
wire   [4:0] add_ln20_fu_222_p2;
reg   [4:0] add_ln20_reg_352;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_reg_358;
wire   [11:0] add_ln13_fu_310_p2;
wire    ap_CS_fsm_state5;
reg   [5:0] indvars_iv_reg_79;
reg   [5:0] i_0_reg_91;
reg   [11:0] k_0_reg_102;
reg   [5:0] j_0_reg_114;
reg   [11:0] k_1_reg_125;
wire   [63:0] zext_ln12_fu_158_p1;
wire   [63:0] zext_ln12_1_fu_175_p1;
wire   [63:0] zext_ln12_2_fu_305_p1;
wire   [11:0] zext_ln10_fu_136_p1;
wire   [4:0] mul_ln12_fu_194_p0;
wire   [4:0] mul_ln12_fu_194_p1;
wire   [9:0] mul_ln12_fu_194_p2;
wire   [4:0] t_fu_200_p1;
wire   [4:0] trunc_ln_fu_208_p4;
wire   [5:0] zext_ln14_fu_204_p1;
wire   [5:0] zext_ln16_fu_218_p1;
wire   [5:0] t_1_fu_228_p2;
wire   [5:0] zext_ln22_1_fu_242_p1;
wire   [5:0] zext_ln22_fu_245_p1;
wire   [5:0] t_2_fu_248_p2;
wire   [0:0] tmp_6_fu_254_p3;
wire   [4:0] zext_ln23_2_fu_266_p1;
wire   [4:0] add_ln23_fu_269_p2;
wire   [5:0] zext_ln23_1_fu_262_p1;
wire   [5:0] zext_ln23_fu_274_p1;
wire   [5:0] t_3_fu_278_p2;
wire   [0:0] icmp_ln24_fu_284_p2;
wire   [5:0] select_ln24_fu_290_p3;
reg   [4:0] ap_NS_fsm;
wire   [9:0] mul_ln12_fu_194_p00;
wire   [9:0] mul_ln12_fu_194_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_91 <= 6'd0;
    end else if (((icmp_ln11_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_91 <= i_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_79 <= 6'd1;
    end else if (((icmp_ln11_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv_reg_79 <= add_ln10_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_114 <= j_reg_337;
    end else if (((icmp_ln10_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_114 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_102 <= 12'd0;
    end else if (((icmp_ln11_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_102 <= k_reg_324;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_1_reg_125 <= add_ln13_fu_310_p2;
    end else if (((icmp_ln10_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_1_reg_125 <= k_0_reg_102;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln20_reg_352 <= add_ln20_fu_222_p2;
        tmp_reg_358 <= t_1_fu_228_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_319 <= i_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_337 <= j_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_324 <= k_fu_152_p2;
        x_addr_reg_329 <= zext_ln12_fu_158_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xij_ce0 = 1'b1;
    end else begin
        xij_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xij_we0 = 1'b1;
    end else begin
        xij_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_180_p2 = (indvars_iv_reg_79 + 6'd1);

assign add_ln13_fu_310_p2 = (12'd1 + k_1_reg_125);

assign add_ln20_fu_222_p2 = (t_fu_200_p1 + trunc_ln_fu_208_p4);

assign add_ln23_fu_269_p2 = (add_ln20_reg_352 + zext_ln23_2_fu_266_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_146_p2 = (i_0_reg_91 + 6'd1);

assign icmp_ln10_fu_140_p2 = ((indvars_iv_reg_79 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_163_p2 = ((j_0_reg_114 == indvars_iv_reg_79) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_284_p2 = ((t_3_fu_278_p2 != 6'd31) ? 1'b1 : 1'b0);

assign j_fu_169_p2 = (j_0_reg_114 + 6'd1);

assign k_fu_152_p2 = (zext_ln10_fu_136_p1 + k_0_reg_102);

assign mul_ln12_fu_194_p0 = mul_ln12_fu_194_p00;

assign mul_ln12_fu_194_p00 = x_q0;

assign mul_ln12_fu_194_p1 = mul_ln12_fu_194_p10;

assign mul_ln12_fu_194_p10 = x_q1;

assign mul_ln12_fu_194_p2 = (mul_ln12_fu_194_p0 * mul_ln12_fu_194_p1);

assign select_ln24_fu_290_p3 = ((icmp_ln24_fu_284_p2[0:0] === 1'b1) ? 6'd63 : 6'd0);

assign t_1_fu_228_p2 = (zext_ln14_fu_204_p1 + zext_ln16_fu_218_p1);

assign t_2_fu_248_p2 = (zext_ln22_1_fu_242_p1 + zext_ln22_fu_245_p1);

assign t_3_fu_278_p2 = (zext_ln23_1_fu_262_p1 + zext_ln23_fu_274_p1);

assign t_fu_200_p1 = mul_ln12_fu_194_p2[4:0];

assign tmp_6_fu_254_p3 = t_2_fu_248_p2[32'd5];

assign trunc_ln_fu_208_p4 = {{mul_ln12_fu_194_p2[9:5]}};

assign x_address0 = x_addr_reg_329;

assign x_address1 = zext_ln12_1_fu_175_p1;

assign xij_address0 = zext_ln12_2_fu_305_p1;

assign xij_d0 = (t_3_fu_278_p2 & select_ln24_fu_290_p3);

assign zext_ln10_fu_136_p1 = indvars_iv_reg_79;

assign zext_ln12_1_fu_175_p1 = j_0_reg_114;

assign zext_ln12_2_fu_305_p1 = k_1_reg_125;

assign zext_ln12_fu_158_p1 = i_0_reg_91;

assign zext_ln14_fu_204_p1 = t_fu_200_p1;

assign zext_ln16_fu_218_p1 = trunc_ln_fu_208_p4;

assign zext_ln22_1_fu_242_p1 = tmp_reg_358;

assign zext_ln22_fu_245_p1 = add_ln20_reg_352;

assign zext_ln23_1_fu_262_p1 = tmp_6_fu_254_p3;

assign zext_ln23_2_fu_266_p1 = tmp_reg_358;

assign zext_ln23_fu_274_p1 = add_ln23_fu_269_p2;

endmodule //generate_quadratic_t
