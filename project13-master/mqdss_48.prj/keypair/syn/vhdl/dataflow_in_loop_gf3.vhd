-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop_gf3 is
port (
    out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_we0 : OUT STD_LOGIC;
    out_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_we1 : OUT STD_LOGIC;
    loop_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    loop_0_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop_gf3 is 
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Block_entry_proc_pro_U0_ap_start : STD_LOGIC;
    signal Block_entry_proc_pro_U0_ap_done : STD_LOGIC;
    signal Block_entry_proc_pro_U0_ap_continue : STD_LOGIC;
    signal Block_entry_proc_pro_U0_ap_idle : STD_LOGIC;
    signal Block_entry_proc_pro_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_pro_U0_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Block_entry_proc_pro_U0_out_r_ce0 : STD_LOGIC;
    signal Block_entry_proc_pro_U0_out_r_we0 : STD_LOGIC;
    signal Block_entry_proc_pro_U0_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Block_entry_proc_pro_U0_start_full_n : STD_LOGIC;
    signal Block_entry_proc_pro_U0_start_write : STD_LOGIC;

    component Block_entry_proc_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        loop_0 : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    Block_entry_proc_pro_U0 : component Block_entry_proc_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry_proc_pro_U0_ap_start,
        ap_done => Block_entry_proc_pro_U0_ap_done,
        ap_continue => Block_entry_proc_pro_U0_ap_continue,
        ap_idle => Block_entry_proc_pro_U0_ap_idle,
        ap_ready => Block_entry_proc_pro_U0_ap_ready,
        out_r_address0 => Block_entry_proc_pro_U0_out_r_address0,
        out_r_ce0 => Block_entry_proc_pro_U0_out_r_ce0,
        out_r_we0 => Block_entry_proc_pro_U0_out_r_we0,
        out_r_d0 => Block_entry_proc_pro_U0_out_r_d0,
        loop_0 => loop_0);




    Block_entry_proc_pro_U0_ap_continue <= ap_continue;
    Block_entry_proc_pro_U0_ap_start <= ap_start;
    Block_entry_proc_pro_U0_start_full_n <= ap_const_logic_1;
    Block_entry_proc_pro_U0_start_write <= ap_const_logic_0;
    ap_done <= Block_entry_proc_pro_U0_ap_done;
    ap_idle <= Block_entry_proc_pro_U0_ap_idle;
    ap_ready <= Block_entry_proc_pro_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= Block_entry_proc_pro_U0_ap_done;
    ap_sync_ready <= Block_entry_proc_pro_U0_ap_ready;
    out_r_address0 <= Block_entry_proc_pro_U0_out_r_address0;
    out_r_address1 <= ap_const_lv6_0;
    out_r_ce0 <= Block_entry_proc_pro_U0_out_r_ce0;
    out_r_ce1 <= ap_const_logic_0;
    out_r_d0 <= Block_entry_proc_pro_U0_out_r_d0;
    out_r_d1 <= ap_const_lv8_0;
    out_r_we0 <= Block_entry_proc_pro_U0_out_r_we0;
    out_r_we1 <= ap_const_logic_0;
end behav;
