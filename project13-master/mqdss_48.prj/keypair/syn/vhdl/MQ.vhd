-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MQ is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fx_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fx_ce0 : OUT STD_LOGIC;
    fx_we0 : OUT STD_LOGIC;
    fx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    F_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    F_ce0 : OUT STD_LOGIC;
    F_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    F_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    F_ce1 : OUT STD_LOGIC;
    F_q1 : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of MQ is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_reg_327 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_345 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln40_fu_350_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln44_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln46_fu_413_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln46_reg_967 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln46_7_fu_419_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_7_reg_972 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln45_fu_423_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln45_reg_977 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_433_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_985 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln45_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_476_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln46_fu_486_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln46_reg_1005 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_addr_1_reg_1010 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_932_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_1_reg_1015 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln53_fu_559_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln53_reg_1034 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln53_7_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln53_7_reg_1039 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_fu_569_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_reg_1044 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_fu_579_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1052 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln52_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln53_1_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln53_1_reg_1072 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_addr_2_reg_1077 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_939_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln53_1_reg_1082 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln58_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state16_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln58_reg_1087_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1087_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_667_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln59_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_1096 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_1096_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_1096_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_752_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_reg_1106 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln3_reg_1113 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln4_reg_1120 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_2_fu_890_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_2_reg_1138 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal p_xij_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_xij_ce0 : STD_LOGIC;
    signal p_xij_we0 : STD_LOGIC;
    signal p_xij_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_xij_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_xij_ce1 : STD_LOGIC;
    signal p_xij_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_ce0 : STD_LOGIC;
    signal r_we0 : STD_LOGIC;
    signal r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generate_quadratic_t_fu_338_ap_start : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_ap_done : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_ap_idle : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_ap_ready : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_xij_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_generate_quadratic_t_fu_338_xij_ce0 : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_xij_we0 : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_xij_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_generate_quadratic_t_fu_338_x_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_generate_quadratic_t_fu_338_x_ce0 : STD_LOGIC;
    signal grp_generate_quadratic_t_fu_338_x_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_generate_quadratic_t_fu_338_x_ce1 : STD_LOGIC;
    signal phi_ln40_reg_268 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln40_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_279 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_reg_291 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_reg_303 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_315 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_generate_quadratic_t_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln40_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_3_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_4_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_5_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_6_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_3_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_4_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_5_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_6_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln46_2_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_2_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln46_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln46_1_fu_389_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln46_2_fu_401_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_1_fu_397_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln46_2_fu_409_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_439_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_8_fu_447_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln46_fu_451_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln46_1_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_fu_486_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln46_fu_486_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln46_3_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_fu_524_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln53_1_fu_535_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln53_2_fu_547_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln53_1_fu_543_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln53_2_fu_555_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln53_2_fu_585_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln53_8_fu_595_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln53_fu_599_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln53_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_1_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_1_fu_634_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln53_1_fu_634_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln53_5_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln59_fu_678_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln59_1_fu_682_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln59_1_fu_692_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln59_4_fu_710_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln59_2_fu_696_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln59_3_fu_700_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln14_fu_738_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln14_1_fu_742_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_2_fu_732_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_fu_726_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln59_fu_720_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln14_fu_786_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_fu_789_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_1_fu_801_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_fu_795_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_fu_811_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_1_fu_798_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_2_fu_807_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_1_fu_817_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_fu_792_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_4_fu_827_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_833_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln22_2_fu_852_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln22_1_fu_847_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln22_fu_856_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln22_2_fu_843_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_862_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_5_fu_866_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_fu_821_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_4_fu_880_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_884_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_3_fu_895_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_fu_898_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_6_fu_901_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln24_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_913_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln24_fu_921_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_932_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_939_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component generate_quadratic_t IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xij_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        xij_ce0 : OUT STD_LOGIC;
        xij_we0 : OUT STD_LOGIC;
        xij_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        x_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_ce1 : OUT STD_LOGIC;
        x_q1 : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component crypto_sign_keypakbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component crypto_sign_keypalbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component MQ_p_xij IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component MQ_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    p_xij_U : component MQ_p_xij
    generic map (
        DataWidth => 6,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_xij_address0,
        ce0 => p_xij_ce0,
        we0 => p_xij_we0,
        d0 => grp_generate_quadratic_t_fu_338_xij_d0,
        q0 => p_xij_q0,
        address1 => p_xij_address1,
        ce1 => p_xij_ce1,
        q1 => p_xij_q1);

    r_U : component MQ_r
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r_address0,
        ce0 => r_ce0,
        we0 => r_we0,
        d0 => r_d0,
        q0 => r_q0);

    grp_generate_quadratic_t_fu_338 : component generate_quadratic_t
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generate_quadratic_t_fu_338_ap_start,
        ap_done => grp_generate_quadratic_t_fu_338_ap_done,
        ap_idle => grp_generate_quadratic_t_fu_338_ap_idle,
        ap_ready => grp_generate_quadratic_t_fu_338_ap_ready,
        xij_address0 => grp_generate_quadratic_t_fu_338_xij_address0,
        xij_ce0 => grp_generate_quadratic_t_fu_338_xij_ce0,
        xij_we0 => grp_generate_quadratic_t_fu_338_xij_we0,
        xij_d0 => grp_generate_quadratic_t_fu_338_xij_d0,
        x_address0 => grp_generate_quadratic_t_fu_338_x_address0,
        x_ce0 => grp_generate_quadratic_t_fu_338_x_ce0,
        x_q0 => x_q0,
        x_address1 => grp_generate_quadratic_t_fu_338_x_address1,
        x_ce1 => grp_generate_quadratic_t_fu_338_x_ce1,
        x_q1 => x_q1);

    crypto_sign_keypakbM_U86 : component crypto_sign_keypakbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_932_p0,
        din1 => reg_345,
        din2 => mul_ln46_reg_1005,
        dout => grp_fu_932_p3);

    crypto_sign_keypalbW_U87 : component crypto_sign_keypalbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_345,
        din1 => grp_fu_939_p1,
        din2 => mul_ln53_1_reg_1072,
        dout => grp_fu_939_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln51_fu_513_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln51_fu_513_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generate_quadratic_t_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generate_quadratic_t_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln40_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_generate_quadratic_t_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generate_quadratic_t_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_generate_quadratic_t_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_reg_279 <= i_fu_476_p2;
            elsif (((grp_generate_quadratic_t_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_279 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_303 <= ap_const_lv11_0;
            elsif (((icmp_ln52_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_303 <= i_15_fu_624_p2;
            end if; 
        end if;
    end process;

    i_2_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln51_fu_513_p2 = ap_const_lv1_0))) then 
                i_2_reg_327 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_fu_661_p2 = ap_const_lv1_0))) then 
                i_2_reg_327 <= i_16_fu_667_p2;
            end if; 
        end if;
    end process;

    j_0_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_291 <= j_reg_985;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_291 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_1_reg_315 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_1_reg_315 <= j_2_reg_1052;
            end if; 
        end if;
    end process;

    phi_ln40_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_361_p2 = ap_const_lv1_0))) then 
                phi_ln40_reg_268 <= add_ln40_fu_350_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln40_reg_268 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_345 <= F_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_345 <= F_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_1087_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln23_2_reg_1138 <= add_ln23_2_fu_890_p2;
                tmp_23_reg_1133 <= t_5_fu_866_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln46_1_reg_1015 <= grp_fu_932_p3;
                r_addr_1_reg_1010 <= zext_ln46_6_fu_498_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln53_1_reg_1082 <= grp_fu_939_p3;
                r_addr_2_reg_1077 <= zext_ln53_6_fu_646_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln58_reg_1087 <= icmp_ln58_fu_661_p2;
                icmp_ln58_reg_1087_pp0_iter1_reg <= icmp_ln58_reg_1087;
                    zext_ln59_reg_1096_pp0_iter1_reg(5 downto 0) <= zext_ln59_reg_1096(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln58_reg_1087_pp0_iter2_reg <= icmp_ln58_reg_1087_pp0_iter1_reg;
                    zext_ln59_reg_1096_pp0_iter2_reg(5 downto 0) <= zext_ln59_reg_1096_pp0_iter1_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_2_reg_1052 <= j_2_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_reg_985 <= j_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln46_reg_1005 <= mul_ln46_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln53_1_reg_1072 <= mul_ln53_1_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    sub_ln46_reg_967(12 downto 4) <= sub_ln46_fu_413_p2(12 downto 4);
                    zext_ln45_reg_977(4 downto 0) <= zext_ln45_fu_423_p1(4 downto 0);
                    zext_ln46_7_reg_972(4 downto 0) <= zext_ln46_7_fu_419_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    sub_ln53_reg_1034(17 downto 4) <= sub_ln53_fu_559_p2(17 downto 4);
                    zext_ln52_reg_1044(5 downto 0) <= zext_ln52_fu_569_p1(5 downto 0);
                    zext_ln53_7_reg_1039(5 downto 0) <= zext_ln53_7_fu_565_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_1087 = ap_const_lv1_0))) then
                t_reg_1106 <= t_fu_752_p2;
                tmp_reg_1127 <= add_ln59_fu_720_p2(15 downto 15);
                trunc_ln3_reg_1113 <= add_ln10_2_fu_732_p2(9 downto 5);
                trunc_ln4_reg_1120 <= add_ln10_fu_726_p2(14 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_fu_661_p2 = ap_const_lv1_0))) then
                    zext_ln59_reg_1096(5 downto 0) <= zext_ln59_fu_673_p1(5 downto 0);
            end if;
        end if;
    end process;
    sub_ln46_reg_967(3 downto 0) <= "0000";
    zext_ln46_7_reg_972(9 downto 5) <= "00000";
    zext_ln45_reg_977(9 downto 5) <= "00000";
    sub_ln53_reg_1034(3 downto 0) <= "0000";
    zext_ln53_7_reg_1039(10 downto 6) <= "00000";
    zext_ln52_reg_1044(10 downto 6) <= "00000";
    zext_ln59_reg_1096(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln59_reg_1096_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln59_reg_1096_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln44_fu_367_p2, ap_CS_fsm_state6, icmp_ln45_fu_427_p2, icmp_ln51_fu_513_p2, ap_CS_fsm_state10, ap_CS_fsm_state12, icmp_ln52_fu_573_p2, icmp_ln58_fu_661_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, grp_generate_quadratic_t_fu_338_ap_done, icmp_ln40_fu_361_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln40_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_generate_quadratic_t_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln44_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln45_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln51_fu_513_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln52_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln58_fu_661_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln58_fu_661_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    F_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, zext_ln46_4_fu_460_p1, zext_ln53_4_fu_608_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            F_address0 <= zext_ln53_4_fu_608_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            F_address0 <= zext_ln46_4_fu_460_p1(16 - 1 downto 0);
        else 
            F_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    F_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, zext_ln46_5_fu_471_p1, zext_ln53_5_fu_619_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            F_address1 <= zext_ln53_5_fu_619_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            F_address1 <= zext_ln46_5_fu_471_p1(16 - 1 downto 0);
        else 
            F_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    F_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            F_ce0 <= ap_const_logic_1;
        else 
            F_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    F_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            F_ce1 <= ap_const_logic_1;
        else 
            F_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_2_fu_732_p2 <= std_logic_vector(unsigned(trunc_ln59_2_fu_696_p1) + unsigned(trunc_ln59_3_fu_700_p4));
    add_ln10_fu_726_p2 <= std_logic_vector(unsigned(trunc_ln59_fu_678_p1) + unsigned(trunc_ln59_4_fu_710_p4));
    add_ln18_1_fu_801_p2 <= std_logic_vector(unsigned(zext_ln14_fu_786_p1) + unsigned(zext_ln16_fu_789_p1));
    add_ln18_2_fu_807_p2 <= std_logic_vector(unsigned(trunc_ln3_reg_1113) + unsigned(t_reg_1106));
    add_ln18_fu_811_p2 <= std_logic_vector(unsigned(add_ln18_1_fu_801_p2) + unsigned(zext_ln19_fu_795_p1));
    add_ln20_fu_821_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_798_p1) + unsigned(add_ln18_2_fu_807_p2));
    add_ln22_1_fu_847_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_798_p1) + unsigned(t_reg_1106));
    add_ln22_2_fu_852_p2 <= std_logic_vector(unsigned(trunc_ln3_reg_1113) + unsigned(trunc_ln4_reg_1120));
    add_ln22_fu_856_p2 <= std_logic_vector(unsigned(add_ln22_2_fu_852_p2) + unsigned(add_ln22_1_fu_847_p2));
    add_ln23_2_fu_890_p2 <= std_logic_vector(unsigned(add_ln23_fu_884_p2) + unsigned(trunc_ln4_reg_1120));
    add_ln23_fu_884_p2 <= std_logic_vector(unsigned(add_ln20_fu_821_p2) + unsigned(zext_ln23_4_fu_880_p1));
    add_ln40_fu_350_p2 <= std_logic_vector(unsigned(phi_ln40_reg_268) + unsigned(ap_const_lv6_1));
    add_ln46_2_fu_506_p2 <= std_logic_vector(unsigned(r_q0) + unsigned(sext_ln46_3_fu_503_p1));
    add_ln46_fu_451_p2 <= std_logic_vector(unsigned(sub_ln46_reg_967) + unsigned(zext_ln46_8_fu_447_p1));
    add_ln53_2_fu_654_p2 <= std_logic_vector(signed(sext_ln53_5_fu_651_p1) + signed(r_q0));
    add_ln53_fu_599_p2 <= std_logic_vector(unsigned(sub_ln53_reg_1034) + unsigned(zext_ln53_8_fu_595_p1));
    add_ln59_fu_720_p2 <= std_logic_vector(unsigned(trunc_ln59_1_fu_682_p4) + unsigned(zext_ln59_1_fu_692_p1));
    and_ln24_fu_921_p2 <= (t_6_fu_901_p2 and select_ln24_fu_913_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state16_assign_proc : process(icmp_ln58_fu_661_p2)
    begin
        if ((icmp_ln58_fu_661_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    fx_address0 <= zext_ln59_reg_1096_pp0_iter2_reg(6 - 1 downto 0);

    fx_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fx_ce0 <= ap_const_logic_1;
        else 
            fx_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fx_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln24_fu_921_p2),16));

    fx_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1087_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln58_reg_1087_pp0_iter2_reg = ap_const_lv1_0))) then 
            fx_we0 <= ap_const_logic_1;
        else 
            fx_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_932_p0 <= zext_ln45_reg_977(5 - 1 downto 0);
    grp_fu_939_p1 <= zext_ln53_7_reg_1039(6 - 1 downto 0);
    grp_generate_quadratic_t_fu_338_ap_start <= grp_generate_quadratic_t_fu_338_ap_start_reg;
    i_15_fu_624_p2 <= std_logic_vector(unsigned(i_1_reg_303) + unsigned(ap_const_lv11_2));
    i_16_fu_667_p2 <= std_logic_vector(unsigned(i_2_reg_327) + unsigned(ap_const_lv6_1));
    i_fu_476_p2 <= std_logic_vector(unsigned(i_0_reg_279) + unsigned(ap_const_lv6_2));
    icmp_ln24_fu_907_p2 <= "0" when (t_6_fu_901_p2 = ap_const_lv6_1F) else "1";
    icmp_ln40_fu_361_p2 <= "1" when (phi_ln40_reg_268 = ap_const_lv6_2F) else "0";
    icmp_ln44_fu_367_p2 <= "1" when (unsigned(i_0_reg_279) < unsigned(ap_const_lv6_30)) else "0";
    icmp_ln45_fu_427_p2 <= "1" when (j_0_reg_291 = ap_const_lv6_30) else "0";
    icmp_ln51_fu_513_p2 <= "1" when (unsigned(i_1_reg_303) < unsigned(ap_const_lv11_498)) else "0";
    icmp_ln52_fu_573_p2 <= "1" when (j_1_reg_315 = ap_const_lv6_30) else "0";
    icmp_ln58_fu_661_p2 <= "1" when (i_2_reg_327 = ap_const_lv6_30) else "0";
    j_2_fu_579_p2 <= std_logic_vector(unsigned(j_1_reg_315) + unsigned(ap_const_lv6_1));
    j_fu_433_p2 <= std_logic_vector(unsigned(j_0_reg_291) + unsigned(ap_const_lv6_1));
    mul_ln46_fu_486_p0 <= zext_ln46_7_reg_972(5 - 1 downto 0);
    mul_ln46_fu_486_p1 <= F_q0;
    mul_ln46_fu_486_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_fu_486_p0) * signed(mul_ln46_fu_486_p1))), 10));
    mul_ln53_1_fu_634_p0 <= F_q1;
    mul_ln53_1_fu_634_p1 <= zext_ln52_reg_1044(6 - 1 downto 0);
    mul_ln53_1_fu_634_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln53_1_fu_634_p0) * signed('0' &mul_ln53_1_fu_634_p1))), 11));
    or_ln46_1_fu_465_p2 <= (sext_ln46_fu_456_p1 or ap_const_lv32_1);
    or_ln46_fu_378_p2 <= (i_0_reg_279 or ap_const_lv6_1);
    or_ln53_1_fu_613_p2 <= (sext_ln53_fu_604_p1 or ap_const_lv32_1);
    or_ln53_2_fu_585_p4 <= ((ap_const_lv5_12 & j_1_reg_315) & ap_const_lv1_0);
    or_ln53_fu_524_p2 <= (i_1_reg_303 or ap_const_lv11_1);

    p_xij_address0_assign_proc : process(ap_CS_fsm_state10, grp_generate_quadratic_t_fu_338_xij_address0, ap_CS_fsm_state3, zext_ln53_fu_519_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_xij_address0 <= zext_ln53_fu_519_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_xij_address0 <= grp_generate_quadratic_t_fu_338_xij_address0;
        else 
            p_xij_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    p_xij_address1 <= zext_ln53_3_fu_530_p1(11 - 1 downto 0);

    p_xij_ce0_assign_proc : process(ap_CS_fsm_state10, grp_generate_quadratic_t_fu_338_xij_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_xij_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_xij_ce0 <= grp_generate_quadratic_t_fu_338_xij_ce0;
        else 
            p_xij_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_xij_ce1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_xij_ce1 <= ap_const_logic_1;
        else 
            p_xij_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_xij_we0_assign_proc : process(grp_generate_quadratic_t_fu_338_xij_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_xij_we0 <= grp_generate_quadratic_t_fu_338_xij_we0;
        else 
            p_xij_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_address0_assign_proc : process(ap_CS_fsm_state2, r_addr_1_reg_1010, ap_CS_fsm_state8, r_addr_2_reg_1077, ap_CS_fsm_state14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln59_fu_673_p1, ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln40_fu_356_p1, zext_ln46_6_fu_498_p1, zext_ln53_6_fu_646_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            r_address0 <= zext_ln59_fu_673_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address0 <= r_addr_2_reg_1077;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_address0 <= zext_ln53_6_fu_646_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= r_addr_1_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= zext_ln46_6_fu_498_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_address0 <= zext_ln40_fu_356_p1(6 - 1 downto 0);
        else 
            r_address0 <= "XXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15, add_ln46_2_fu_506_p2, add_ln53_2_fu_654_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d0 <= add_ln53_2_fu_654_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= add_ln46_2_fu_506_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_d0 <= ap_const_lv32_0;
        else 
            r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_fu_913_p3 <= 
        ap_const_lv6_3F when (icmp_ln24_fu_907_p2(0) = '1') else 
        ap_const_lv6_0;
        sext_ln46_3_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_1_reg_1015),32));

        sext_ln46_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_fu_451_p2),32));

        sext_ln53_5_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_1_reg_1082),32));

        sext_ln53_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_fu_599_p2),32));

    shl_ln46_1_fu_389_p3 <= (i_0_reg_279 & ap_const_lv6_0);
    shl_ln46_2_fu_401_p3 <= (i_0_reg_279 & ap_const_lv4_0);
    shl_ln53_1_fu_535_p3 <= (i_1_reg_303 & ap_const_lv6_0);
    shl_ln53_2_fu_547_p3 <= (i_1_reg_303 & ap_const_lv4_0);
    shl_ln_fu_439_p3 <= (j_0_reg_291 & ap_const_lv1_0);
    sub_ln46_fu_413_p2 <= std_logic_vector(unsigned(zext_ln46_1_fu_397_p1) - unsigned(zext_ln46_2_fu_409_p1));
    sub_ln53_fu_559_p2 <= std_logic_vector(unsigned(zext_ln53_1_fu_543_p1) - unsigned(zext_ln53_2_fu_555_p1));
    t_4_fu_827_p2 <= std_logic_vector(unsigned(zext_ln18_1_fu_817_p1) + unsigned(zext_ln18_fu_792_p1));
    t_5_fu_866_p2 <= std_logic_vector(unsigned(zext_ln22_2_fu_843_p1) + unsigned(zext_ln22_fu_862_p1));
    t_6_fu_901_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_895_p1) + unsigned(zext_ln23_fu_898_p1));
    t_fu_752_p2 <= std_logic_vector(unsigned(trunc_ln14_fu_738_p1) + unsigned(trunc_ln14_1_fu_742_p4));
    tmp_1_fu_833_p4 <= t_4_fu_827_p2(6 downto 5);
    trunc_ln14_1_fu_742_p4 <= r_q0(19 downto 15);
    trunc_ln14_fu_738_p1 <= r_q0(5 - 1 downto 0);
    trunc_ln59_1_fu_682_p4 <= r_q0(30 downto 15);
    trunc_ln59_2_fu_696_p1 <= r_q0(10 - 1 downto 0);
    trunc_ln59_3_fu_700_p4 <= r_q0(24 downto 15);
    trunc_ln59_4_fu_710_p4 <= r_q0(29 downto 15);
    trunc_ln59_fu_678_p1 <= r_q0(15 - 1 downto 0);

    x_address0_assign_proc : process(ap_CS_fsm_state4, grp_generate_quadratic_t_fu_338_x_address0, ap_CS_fsm_state3, zext_ln46_fu_373_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address0 <= zext_ln46_fu_373_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address0 <= grp_generate_quadratic_t_fu_338_x_address0;
        else 
            x_address0 <= "XXXXXX";
        end if; 
    end process;


    x_address1_assign_proc : process(ap_CS_fsm_state4, grp_generate_quadratic_t_fu_338_x_address1, ap_CS_fsm_state3, zext_ln46_3_fu_384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address1 <= zext_ln46_3_fu_384_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address1 <= grp_generate_quadratic_t_fu_338_x_address1;
        else 
            x_address1 <= "XXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state4, grp_generate_quadratic_t_fu_338_x_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ce0 <= grp_generate_quadratic_t_fu_338_x_ce0;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_CS_fsm_state4, grp_generate_quadratic_t_fu_338_x_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ce1 <= grp_generate_quadratic_t_fu_338_x_ce1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln14_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_1106),6));
    zext_ln16_1_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1127),5));
    zext_ln16_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_1113),6));
    zext_ln18_1_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_811_p2),7));
    zext_ln18_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_1120),7));
    zext_ln19_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1127),6));
    zext_ln22_2_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_833_p4),6));
    zext_ln22_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln22_fu_856_p2),6));
    zext_ln23_3_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1133),6));
    zext_ln23_4_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_833_p4),5));
    zext_ln23_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_reg_1138),6));
    zext_ln40_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln40_reg_268),64));
    zext_ln45_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_q1),10));
    zext_ln46_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln46_1_fu_389_p3),13));
    zext_ln46_2_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln46_2_fu_401_p3),13));
    zext_ln46_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_fu_378_p2),64));
    zext_ln46_4_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln46_fu_456_p1),64));
    zext_ln46_5_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_1_fu_465_p2),64));
    zext_ln46_6_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_291),64));
    zext_ln46_7_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_q0),10));
    zext_ln46_8_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_439_p3),13));
    zext_ln46_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_279),64));
    zext_ln52_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_xij_q1),11));
    zext_ln53_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_1_fu_535_p3),18));
    zext_ln53_2_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_2_fu_547_p3),18));
    zext_ln53_3_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln53_fu_524_p2),64));
    zext_ln53_4_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln53_fu_604_p1),64));
    zext_ln53_5_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln53_1_fu_613_p2),64));
    zext_ln53_6_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_315),64));
    zext_ln53_7_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_xij_q0),11));
    zext_ln53_8_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln53_2_fu_585_p4),18));
    zext_ln53_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_303),64));
    zext_ln59_1_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln59_fu_678_p1),16));
    zext_ln59_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_327),64));
end behav;
