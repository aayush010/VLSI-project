// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "keccak_absorb_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic keccak_absorb_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic keccak_absorb_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state1 = "1";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state2 = "10";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state5 = "1000";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state6 = "10000";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state7 = "100000";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state8 = "1000000";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state9 = "10000000";
const sc_lv<9> keccak_absorb_1::ap_ST_fsm_state10 = "100000000";
const bool keccak_absorb_1::ap_const_boolean_1 = true;
const sc_lv<32> keccak_absorb_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_1 = "1";
const sc_lv<1> keccak_absorb_1::ap_const_lv1_0 = "0";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_2 = "10";
const bool keccak_absorb_1::ap_const_boolean_0 = false;
const sc_lv<32> keccak_absorb_1::ap_const_lv32_3 = "11";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_5 = "101";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_6 = "110";
const sc_lv<1> keccak_absorb_1::ap_const_lv1_1 = "1";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_7 = "111";
const sc_lv<8> keccak_absorb_1::ap_const_lv8_10 = "10000";
const sc_lv<5> keccak_absorb_1::ap_const_lv5_0 = "00000";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_4 = "100";
const sc_lv<32> keccak_absorb_1::ap_const_lv32_8 = "1000";
const sc_lv<64> keccak_absorb_1::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> keccak_absorb_1::ap_const_lv4_0 = "0000";
const sc_lv<64> keccak_absorb_1::ap_const_lv64_87 = "10000111";
const sc_lv<64> keccak_absorb_1::ap_const_lv64_10 = "10000";
const sc_lv<8> keccak_absorb_1::ap_const_lv8_0 = "00000000";
const sc_lv<8> keccak_absorb_1::ap_const_lv8_1F = "11111";
const sc_lv<8> keccak_absorb_1::ap_const_lv8_88 = "10001000";
const sc_lv<8> keccak_absorb_1::ap_const_lv8_1 = "1";
const sc_lv<5> keccak_absorb_1::ap_const_lv5_10 = "10000";
const sc_lv<5> keccak_absorb_1::ap_const_lv5_1 = "1";
const sc_lv<8> keccak_absorb_1::ap_const_lv8_80 = "10000000";
const sc_lv<5> keccak_absorb_1::ap_const_lv5_11 = "10001";
const sc_lv<3> keccak_absorb_1::ap_const_lv3_0 = "000";
const sc_lv<4> keccak_absorb_1::ap_const_lv4_8 = "1000";
const sc_lv<4> keccak_absorb_1::ap_const_lv4_1 = "1";

keccak_absorb_1::keccak_absorb_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    t_U = new keccak_absorb_t("t_U");
    t_U->clk(ap_clk);
    t_U->reset(ap_rst);
    t_U->address0(t_address0);
    t_U->ce0(t_ce0);
    t_U->we0(t_we0);
    t_U->d0(t_d0);
    t_U->q0(t_q0);
    t_U->address1(t_address1);
    t_U->ce1(t_ce1);
    t_U->we1(t_we1);
    t_U->d1(t_d1);
    t_U->q1(t_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln20_fu_299_p2);
    sensitive << ( shl_ln_reg_390 );
    sensitive << ( zext_ln19_fu_283_p1 );

    SC_METHOD(thread_add_ln354_fu_230_p2);
    sensitive << ( ap_phi_mux_i_2_phi_fu_164_p4 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln354_fu_224_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln358_fu_263_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_2_phi_fu_164_p4);
    sensitive << ( i_2_reg_160 );
    sensitive << ( icmp_ln354_reg_357 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln354_reg_361 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln358_fu_263_p2 );

    SC_METHOD(thread_i_6_fu_269_p2);
    sensitive << ( i_3_reg_172 );

    SC_METHOD(thread_i_7_fu_293_p2);
    sensitive << ( i_0_i_reg_195 );

    SC_METHOD(thread_i_fu_218_p2);
    sensitive << ( i_1_reg_149 );

    SC_METHOD(thread_icmp_ln19_fu_287_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_0_i_reg_195 );

    SC_METHOD(thread_icmp_ln352_fu_212_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_1_reg_149 );

    SC_METHOD(thread_icmp_ln354_fu_224_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_2_phi_fu_164_p4 );

    SC_METHOD(thread_icmp_ln358_fu_263_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_3_reg_172 );

    SC_METHOD(thread_m_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln355_fu_242_p1 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_r_fu_335_p2);
    sensitive << ( r_0_i_reg_183 );
    sensitive << ( shl_ln20_fu_329_p2 );

    SC_METHOD(thread_s_address0);
    sensitive << ( zext_ln358_reg_377 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( s_addr_reg_408 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_s_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_s_d0);
    sensitive << ( s_q0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( r_0_i_reg_183 );

    SC_METHOD(thread_s_we0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_shl_ln20_fu_329_p2);
    sensitive << ( zext_ln20_3_fu_309_p1 );
    sensitive << ( zext_ln20_4_fu_325_p1 );

    SC_METHOD(thread_shl_ln2_fu_317_p3);
    sensitive << ( trunc_ln20_fu_313_p1 );

    SC_METHOD(thread_shl_ln_fu_275_p3);
    sensitive << ( i_3_reg_172 );

    SC_METHOD(thread_t_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln352_fu_207_p1 );
    sensitive << ( zext_ln354_fu_247_p1 );

    SC_METHOD(thread_t_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln20_fu_304_p1 );

    SC_METHOD(thread_t_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_d0);
    sensitive << ( m_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_d1);
    sensitive << ( t_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_we0);
    sensitive << ( icmp_ln352_fu_212_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln354_reg_357 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_we1);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_trunc_ln20_fu_313_p1);
    sensitive << ( i_0_i_reg_195 );

    SC_METHOD(thread_xor_ln355_fu_236_p2);
    sensitive << ( ap_phi_mux_i_2_phi_fu_164_p4 );

    SC_METHOD(thread_zext_ln19_fu_283_p1);
    sensitive << ( i_0_i_reg_195 );

    SC_METHOD(thread_zext_ln20_3_fu_309_p1);
    sensitive << ( t_q1 );

    SC_METHOD(thread_zext_ln20_4_fu_325_p1);
    sensitive << ( shl_ln2_fu_317_p3 );

    SC_METHOD(thread_zext_ln20_fu_304_p1);
    sensitive << ( add_ln20_fu_299_p2 );

    SC_METHOD(thread_zext_ln352_fu_207_p1);
    sensitive << ( i_1_reg_149 );

    SC_METHOD(thread_zext_ln354_fu_247_p1);
    sensitive << ( i_2_reg_160 );

    SC_METHOD(thread_zext_ln355_fu_242_p1);
    sensitive << ( xor_ln355_fu_236_p2 );

    SC_METHOD(thread_zext_ln358_fu_259_p1);
    sensitive << ( i_3_reg_172 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln352_fu_212_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln354_fu_224_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln358_fu_263_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln19_fu_287_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_CS_fsm = "000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "keccak_absorb_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_address0, "(port)s_address0");
    sc_trace(mVcdFile, s_ce0, "(port)s_ce0");
    sc_trace(mVcdFile, s_we0, "(port)s_we0");
    sc_trace(mVcdFile, s_d0, "(port)s_d0");
    sc_trace(mVcdFile, s_q0, "(port)s_q0");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_q0, "(port)m_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_2_reg_160, "i_2_reg_160");
    sc_trace(mVcdFile, icmp_ln352_fu_212_p2, "icmp_ln352_fu_212_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_218_p2, "i_fu_218_p2");
    sc_trace(mVcdFile, icmp_ln354_fu_224_p2, "icmp_ln354_fu_224_p2");
    sc_trace(mVcdFile, icmp_ln354_reg_357, "icmp_ln354_reg_357");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln354_fu_230_p2, "add_ln354_fu_230_p2");
    sc_trace(mVcdFile, add_ln354_reg_361, "add_ln354_reg_361");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln358_fu_259_p1, "zext_ln358_fu_259_p1");
    sc_trace(mVcdFile, zext_ln358_reg_377, "zext_ln358_reg_377");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_6_fu_269_p2, "i_6_fu_269_p2");
    sc_trace(mVcdFile, i_6_reg_385, "i_6_reg_385");
    sc_trace(mVcdFile, shl_ln_fu_275_p3, "shl_ln_fu_275_p3");
    sc_trace(mVcdFile, shl_ln_reg_390, "shl_ln_reg_390");
    sc_trace(mVcdFile, icmp_ln358_fu_263_p2, "icmp_ln358_fu_263_p2");
    sc_trace(mVcdFile, i_7_fu_293_p2, "i_7_fu_293_p2");
    sc_trace(mVcdFile, i_7_reg_398, "i_7_reg_398");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln19_fu_287_p2, "icmp_ln19_fu_287_p2");
    sc_trace(mVcdFile, s_addr_reg_408, "s_addr_reg_408");
    sc_trace(mVcdFile, r_fu_335_p2, "r_fu_335_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, t_address0, "t_address0");
    sc_trace(mVcdFile, t_ce0, "t_ce0");
    sc_trace(mVcdFile, t_we0, "t_we0");
    sc_trace(mVcdFile, t_d0, "t_d0");
    sc_trace(mVcdFile, t_q0, "t_q0");
    sc_trace(mVcdFile, t_address1, "t_address1");
    sc_trace(mVcdFile, t_ce1, "t_ce1");
    sc_trace(mVcdFile, t_we1, "t_we1");
    sc_trace(mVcdFile, t_d1, "t_d1");
    sc_trace(mVcdFile, t_q1, "t_q1");
    sc_trace(mVcdFile, i_1_reg_149, "i_1_reg_149");
    sc_trace(mVcdFile, ap_phi_mux_i_2_phi_fu_164_p4, "ap_phi_mux_i_2_phi_fu_164_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, i_3_reg_172, "i_3_reg_172");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, r_0_i_reg_183, "r_0_i_reg_183");
    sc_trace(mVcdFile, i_0_i_reg_195, "i_0_i_reg_195");
    sc_trace(mVcdFile, zext_ln352_fu_207_p1, "zext_ln352_fu_207_p1");
    sc_trace(mVcdFile, zext_ln355_fu_242_p1, "zext_ln355_fu_242_p1");
    sc_trace(mVcdFile, zext_ln354_fu_247_p1, "zext_ln354_fu_247_p1");
    sc_trace(mVcdFile, zext_ln20_fu_304_p1, "zext_ln20_fu_304_p1");
    sc_trace(mVcdFile, xor_ln355_fu_236_p2, "xor_ln355_fu_236_p2");
    sc_trace(mVcdFile, zext_ln19_fu_283_p1, "zext_ln19_fu_283_p1");
    sc_trace(mVcdFile, add_ln20_fu_299_p2, "add_ln20_fu_299_p2");
    sc_trace(mVcdFile, trunc_ln20_fu_313_p1, "trunc_ln20_fu_313_p1");
    sc_trace(mVcdFile, shl_ln2_fu_317_p3, "shl_ln2_fu_317_p3");
    sc_trace(mVcdFile, zext_ln20_3_fu_309_p1, "zext_ln20_3_fu_309_p1");
    sc_trace(mVcdFile, zext_ln20_4_fu_325_p1, "zext_ln20_4_fu_325_p1");
    sc_trace(mVcdFile, shl_ln20_fu_329_p2, "shl_ln20_fu_329_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

keccak_absorb_1::~keccak_absorb_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete t_U;
}

void keccak_absorb_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln352_fu_212_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln352_fu_212_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_i_reg_195 = i_7_reg_398.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln358_fu_263_p2.read()))) {
        i_0_i_reg_195 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_1_reg_149 = ap_const_lv8_10;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln352_fu_212_p2.read(), ap_const_lv1_0))) {
        i_1_reg_149 = i_fu_218_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln352_fu_212_p2.read(), ap_const_lv1_1))) {
        i_2_reg_160 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln354_reg_357.read()))) {
        i_2_reg_160 = add_ln354_reg_361.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_3_reg_172 = i_6_reg_385.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_3_reg_172 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        r_0_i_reg_183 = r_fu_335_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln358_fu_263_p2.read()))) {
        r_0_i_reg_183 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln354_reg_361 = add_ln354_fu_230_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_6_reg_385 = i_6_fu_269_p2.read();
        zext_ln358_reg_377 = zext_ln358_fu_259_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_7_reg_398 = i_7_fu_293_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln354_reg_357 = icmp_ln354_fu_224_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln19_fu_287_p2.read(), ap_const_lv1_1))) {
        s_addr_reg_408 =  (sc_lv<5>) (zext_ln358_reg_377.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln358_fu_263_p2.read()))) {
        shl_ln_reg_390 = shl_ln_fu_275_p3.read();
    }
}

void keccak_absorb_1::thread_add_ln20_fu_299_p2() {
    add_ln20_fu_299_p2 = (!zext_ln19_fu_283_p1.read().is_01() || !shl_ln_reg_390.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln19_fu_283_p1.read()) + sc_biguint<8>(shl_ln_reg_390.read()));
}

void keccak_absorb_1::thread_add_ln354_fu_230_p2() {
    add_ln354_fu_230_p2 = (!ap_phi_mux_i_2_phi_fu_164_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_2_phi_fu_164_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void keccak_absorb_1::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void keccak_absorb_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void keccak_absorb_1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[8];
}

void keccak_absorb_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void keccak_absorb_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void keccak_absorb_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void keccak_absorb_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[5];
}

void keccak_absorb_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[6];
}

void keccak_absorb_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[7];
}

void keccak_absorb_1::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_1::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_1::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_1::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_1::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_1::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln354_fu_224_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(icmp_ln358_fu_263_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void keccak_absorb_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_ap_phi_mux_i_2_phi_fu_164_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln354_reg_357.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_2_phi_fu_164_p4 = add_ln354_reg_361.read();
    } else {
        ap_phi_mux_i_2_phi_fu_164_p4 = i_2_reg_160.read();
    }
}

void keccak_absorb_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln358_fu_263_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_i_6_fu_269_p2() {
    i_6_fu_269_p2 = (!i_3_reg_172.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_3_reg_172.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void keccak_absorb_1::thread_i_7_fu_293_p2() {
    i_7_fu_293_p2 = (!i_0_i_reg_195.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_i_reg_195.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void keccak_absorb_1::thread_i_fu_218_p2() {
    i_fu_218_p2 = (!i_1_reg_149.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_1_reg_149.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void keccak_absorb_1::thread_icmp_ln19_fu_287_p2() {
    icmp_ln19_fu_287_p2 = (!i_0_i_reg_195.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_195.read() == ap_const_lv4_8);
}

void keccak_absorb_1::thread_icmp_ln352_fu_212_p2() {
    icmp_ln352_fu_212_p2 = (!i_1_reg_149.read().is_01() || !ap_const_lv8_88.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_149.read() == ap_const_lv8_88);
}

void keccak_absorb_1::thread_icmp_ln354_fu_224_p2() {
    icmp_ln354_fu_224_p2 = (!ap_phi_mux_i_2_phi_fu_164_p4.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_2_phi_fu_164_p4.read() == ap_const_lv5_10);
}

void keccak_absorb_1::thread_icmp_ln358_fu_263_p2() {
    icmp_ln358_fu_263_p2 = (!i_3_reg_172.read().is_01() || !ap_const_lv5_11.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_172.read() == ap_const_lv5_11);
}

void keccak_absorb_1::thread_m_address0() {
    m_address0 =  (sc_lv<5>) (zext_ln355_fu_242_p1.read());
}

void keccak_absorb_1::thread_m_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_r_fu_335_p2() {
    r_fu_335_p2 = (shl_ln20_fu_329_p2.read() | r_0_i_reg_183.read());
}

void keccak_absorb_1::thread_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        s_address0 = s_addr_reg_408.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        s_address0 =  (sc_lv<5>) (zext_ln358_reg_377.read());
    } else {
        s_address0 = "XXXXX";
    }
}

void keccak_absorb_1::thread_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        s_ce0 = ap_const_logic_1;
    } else {
        s_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_s_d0() {
    s_d0 = (s_q0.read() ^ r_0_i_reg_183.read());
}

void keccak_absorb_1::thread_s_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        s_we0 = ap_const_logic_1;
    } else {
        s_we0 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_shl_ln20_fu_329_p2() {
    shl_ln20_fu_329_p2 = (!zext_ln20_4_fu_325_p1.read().is_01())? sc_lv<64>(): zext_ln20_3_fu_309_p1.read() << (unsigned short)zext_ln20_4_fu_325_p1.read().to_uint();
}

void keccak_absorb_1::thread_shl_ln2_fu_317_p3() {
    shl_ln2_fu_317_p3 = esl_concat<3,3>(trunc_ln20_fu_313_p1.read(), ap_const_lv3_0);
}

void keccak_absorb_1::thread_shl_ln_fu_275_p3() {
    shl_ln_fu_275_p3 = esl_concat<5,3>(i_3_reg_172.read(), ap_const_lv3_0);
}

void keccak_absorb_1::thread_t_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_87);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        t_address0 =  (sc_lv<8>) (zext_ln354_fu_247_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_address0 =  (sc_lv<8>) (zext_ln352_fu_207_p1.read());
    } else {
        t_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb_1::thread_t_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        t_address1 =  (sc_lv<8>) (zext_ln20_fu_304_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_address1 =  (sc_lv<8>) (ap_const_lv64_87);
    } else {
        t_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb_1::thread_t_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        t_ce0 = ap_const_logic_1;
    } else {
        t_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_t_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        t_ce1 = ap_const_logic_1;
    } else {
        t_ce1 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_t_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_d0 = ap_const_lv8_1F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        t_d0 = m_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_d0 = ap_const_lv8_0;
    } else {
        t_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb_1::thread_t_d1() {
    t_d1 = (t_q0.read() | ap_const_lv8_80);
}

void keccak_absorb_1::thread_t_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln352_fu_212_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln354_reg_357.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        t_we0 = ap_const_logic_1;
    } else {
        t_we0 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_t_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_we1 = ap_const_logic_1;
    } else {
        t_we1 = ap_const_logic_0;
    }
}

void keccak_absorb_1::thread_trunc_ln20_fu_313_p1() {
    trunc_ln20_fu_313_p1 = i_0_i_reg_195.read().range(3-1, 0);
}

void keccak_absorb_1::thread_xor_ln355_fu_236_p2() {
    xor_ln355_fu_236_p2 = (ap_phi_mux_i_2_phi_fu_164_p4.read() ^ ap_const_lv5_10);
}

void keccak_absorb_1::thread_zext_ln19_fu_283_p1() {
    zext_ln19_fu_283_p1 = esl_zext<8,4>(i_0_i_reg_195.read());
}

void keccak_absorb_1::thread_zext_ln20_3_fu_309_p1() {
    zext_ln20_3_fu_309_p1 = esl_zext<64,8>(t_q1.read());
}

void keccak_absorb_1::thread_zext_ln20_4_fu_325_p1() {
    zext_ln20_4_fu_325_p1 = esl_zext<64,6>(shl_ln2_fu_317_p3.read());
}

void keccak_absorb_1::thread_zext_ln20_fu_304_p1() {
    zext_ln20_fu_304_p1 = esl_zext<64,8>(add_ln20_fu_299_p2.read());
}

void keccak_absorb_1::thread_zext_ln352_fu_207_p1() {
    zext_ln352_fu_207_p1 = esl_zext<64,8>(i_1_reg_149.read());
}

void keccak_absorb_1::thread_zext_ln354_fu_247_p1() {
    zext_ln354_fu_247_p1 = esl_zext<64,5>(i_2_reg_160.read());
}

void keccak_absorb_1::thread_zext_ln355_fu_242_p1() {
    zext_ln355_fu_242_p1 = esl_zext<64,5>(xor_ln355_fu_236_p2.read());
}

void keccak_absorb_1::thread_zext_ln358_fu_259_p1() {
    zext_ln358_fu_259_p1 = esl_zext<64,5>(i_3_reg_172.read());
}

void keccak_absorb_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln352_fu_212_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln354_fu_224_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln354_fu_224_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln358_fu_263_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln19_fu_287_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

