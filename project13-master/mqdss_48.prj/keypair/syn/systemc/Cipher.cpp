// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<45> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<45> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<45> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<45> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<45> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<45> Cipher::ap_ST_fsm_state6 = "100000";
const sc_lv<45> Cipher::ap_ST_fsm_state7 = "1000000";
const sc_lv<45> Cipher::ap_ST_fsm_state8 = "10000000";
const sc_lv<45> Cipher::ap_ST_fsm_state9 = "100000000";
const sc_lv<45> Cipher::ap_ST_fsm_state10 = "1000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state11 = "10000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state12 = "100000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<45> Cipher::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_24 = "100100";
const sc_lv<32> Cipher::ap_const_lv32_B = "1011";
const sc_lv<32> Cipher::ap_const_lv32_C = "1100";
const sc_lv<32> Cipher::ap_const_lv32_D = "1101";
const sc_lv<32> Cipher::ap_const_lv32_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_F = "1111";
const sc_lv<32> Cipher::ap_const_lv32_10 = "10000";
const sc_lv<32> Cipher::ap_const_lv32_11 = "10001";
const sc_lv<32> Cipher::ap_const_lv32_12 = "10010";
const sc_lv<32> Cipher::ap_const_lv32_13 = "10011";
const sc_lv<32> Cipher::ap_const_lv32_14 = "10100";
const sc_lv<32> Cipher::ap_const_lv32_15 = "10101";
const sc_lv<32> Cipher::ap_const_lv32_16 = "10110";
const sc_lv<32> Cipher::ap_const_lv32_17 = "10111";
const sc_lv<32> Cipher::ap_const_lv32_18 = "11000";
const sc_lv<32> Cipher::ap_const_lv32_19 = "11001";
const sc_lv<32> Cipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Cipher::ap_const_lv32_9 = "1001";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<32> Cipher::ap_const_lv32_1A = "11010";
const sc_lv<32> Cipher::ap_const_lv32_22 = "100010";
const sc_lv<32> Cipher::ap_const_lv32_23 = "100011";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<6> Cipher::ap_const_lv6_0 = "000000";
const sc_lv<6> Cipher::ap_const_lv6_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_1B = "11011";
const sc_lv<32> Cipher::ap_const_lv32_1C = "11100";
const sc_lv<32> Cipher::ap_const_lv32_1D = "11101";
const sc_lv<32> Cipher::ap_const_lv32_1E = "11110";
const sc_lv<32> Cipher::ap_const_lv32_1F = "11111";
const sc_lv<32> Cipher::ap_const_lv32_20 = "100000";
const sc_lv<32> Cipher::ap_const_lv32_21 = "100001";
const sc_lv<32> Cipher::ap_const_lv32_25 = "100101";
const sc_lv<32> Cipher::ap_const_lv32_26 = "100110";
const sc_lv<32> Cipher::ap_const_lv32_27 = "100111";
const sc_lv<32> Cipher::ap_const_lv32_28 = "101000";
const sc_lv<32> Cipher::ap_const_lv32_29 = "101001";
const sc_lv<32> Cipher::ap_const_lv32_2A = "101010";
const sc_lv<32> Cipher::ap_const_lv32_2B = "101011";
const sc_lv<32> Cipher::ap_const_lv32_2C = "101100";
const sc_lv<4> Cipher::ap_const_lv4_E = "1110";
const sc_lv<8> Cipher::ap_const_lv8_0 = "00000000";
const bool Cipher::ap_const_boolean_1 = true;

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new Cipher_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);
    sbox_U->address3(sbox_address3);
    sbox_U->ce3(sbox_ce3);
    sbox_U->q3(sbox_q3);
    sbox_U->address4(sbox_address4);
    sbox_U->ce4(sbox_ce4);
    sbox_U->q4(sbox_q4);
    sbox_U->address5(sbox_address5);
    sbox_U->ce5(sbox_ce5);
    sbox_U->q5(sbox_q5);
    sbox_U->address6(sbox_address6);
    sbox_U->ce6(sbox_ce6);
    sbox_U->q6(sbox_q6);
    sbox_U->address7(sbox_address7);
    sbox_U->ce7(sbox_ce7);
    sbox_U->q7(sbox_q7);
    sbox_U->address8(sbox_address8);
    sbox_U->ce8(sbox_ce8);
    sbox_U->q8(sbox_q8);
    sbox_U->address9(sbox_address9);
    sbox_U->ce9(sbox_ce9);
    sbox_U->q9(sbox_q9);
    sbox_U->address10(sbox_address10);
    sbox_U->ce10(sbox_ce10);
    sbox_U->q10(sbox_q10);
    sbox_U->address11(sbox_address11);
    sbox_U->ce11(sbox_ce11);
    sbox_U->q11(sbox_q11);
    sbox_U->address12(sbox_address12);
    sbox_U->ce12(sbox_ce12);
    sbox_U->q12(sbox_q12);
    sbox_U->address13(sbox_address13);
    sbox_U->ce13(sbox_ce13);
    sbox_U->q13(sbox_q13);
    sbox_U->address14(sbox_address14);
    sbox_U->ce14(sbox_ce14);
    sbox_U->q14(sbox_q14);
    sbox_U->address15(sbox_address15);
    sbox_U->ce15(sbox_ce15);
    sbox_U->q15(sbox_q15);
    call_ret6_MixColumns_fu_663 = new MixColumns("call_ret6_MixColumns_fu_663");
    call_ret6_MixColumns_fu_663->ap_ready(call_ret6_MixColumns_fu_663_ap_ready);
    call_ret6_MixColumns_fu_663->state_0_0_read(reg_804);
    call_ret6_MixColumns_fu_663->state_0_1_read(reg_838);
    call_ret6_MixColumns_fu_663->state_0_2_read(reg_873);
    call_ret6_MixColumns_fu_663->state_0_3_read(reg_908);
    call_ret6_MixColumns_fu_663->state_1_0_read(reg_810);
    call_ret6_MixColumns_fu_663->state_1_1_read(reg_845);
    call_ret6_MixColumns_fu_663->state_1_2_read(reg_880);
    call_ret6_MixColumns_fu_663->state_1_3_read(reg_887);
    call_ret6_MixColumns_fu_663->state_2_0_read(reg_817);
    call_ret6_MixColumns_fu_663->state_2_1_read(reg_852);
    call_ret6_MixColumns_fu_663->state_2_2_read(reg_859);
    call_ret6_MixColumns_fu_663->state_2_3_read(reg_894);
    call_ret6_MixColumns_fu_663->state_3_0_read(reg_824);
    call_ret6_MixColumns_fu_663->state_3_1_read(reg_831);
    call_ret6_MixColumns_fu_663->state_3_2_read(reg_866);
    call_ret6_MixColumns_fu_663->state_3_3_read(reg_901);
    call_ret6_MixColumns_fu_663->ap_return_0(call_ret6_MixColumns_fu_663_ap_return_0);
    call_ret6_MixColumns_fu_663->ap_return_1(call_ret6_MixColumns_fu_663_ap_return_1);
    call_ret6_MixColumns_fu_663->ap_return_2(call_ret6_MixColumns_fu_663_ap_return_2);
    call_ret6_MixColumns_fu_663->ap_return_3(call_ret6_MixColumns_fu_663_ap_return_3);
    call_ret6_MixColumns_fu_663->ap_return_4(call_ret6_MixColumns_fu_663_ap_return_4);
    call_ret6_MixColumns_fu_663->ap_return_5(call_ret6_MixColumns_fu_663_ap_return_5);
    call_ret6_MixColumns_fu_663->ap_return_6(call_ret6_MixColumns_fu_663_ap_return_6);
    call_ret6_MixColumns_fu_663->ap_return_7(call_ret6_MixColumns_fu_663_ap_return_7);
    call_ret6_MixColumns_fu_663->ap_return_8(call_ret6_MixColumns_fu_663_ap_return_8);
    call_ret6_MixColumns_fu_663->ap_return_9(call_ret6_MixColumns_fu_663_ap_return_9);
    call_ret6_MixColumns_fu_663->ap_return_10(call_ret6_MixColumns_fu_663_ap_return_10);
    call_ret6_MixColumns_fu_663->ap_return_11(call_ret6_MixColumns_fu_663_ap_return_11);
    call_ret6_MixColumns_fu_663->ap_return_12(call_ret6_MixColumns_fu_663_ap_return_12);
    call_ret6_MixColumns_fu_663->ap_return_13(call_ret6_MixColumns_fu_663_ap_return_13);
    call_ret6_MixColumns_fu_663->ap_return_14(call_ret6_MixColumns_fu_663_ap_return_14);
    call_ret6_MixColumns_fu_663->ap_return_15(call_ret6_MixColumns_fu_663_ap_return_15);
    grp_AddRoundKey_fu_683 = new AddRoundKey("grp_AddRoundKey_fu_683");
    grp_AddRoundKey_fu_683->ap_clk(ap_clk);
    grp_AddRoundKey_fu_683->ap_rst(ap_rst);
    grp_AddRoundKey_fu_683->ap_start(grp_AddRoundKey_fu_683_ap_start);
    grp_AddRoundKey_fu_683->ap_done(grp_AddRoundKey_fu_683_ap_done);
    grp_AddRoundKey_fu_683->ap_idle(grp_AddRoundKey_fu_683_ap_idle);
    grp_AddRoundKey_fu_683->ap_ready(grp_AddRoundKey_fu_683_ap_ready);
    grp_AddRoundKey_fu_683->ap_ce(ap_var_for_const0);
    grp_AddRoundKey_fu_683->round(grp_AddRoundKey_fu_683_round);
    grp_AddRoundKey_fu_683->state_0_0_read(grp_AddRoundKey_fu_683_state_0_0_read);
    grp_AddRoundKey_fu_683->state_0_1_read(grp_AddRoundKey_fu_683_state_0_1_read);
    grp_AddRoundKey_fu_683->state_0_2_read(grp_AddRoundKey_fu_683_state_0_2_read);
    grp_AddRoundKey_fu_683->state_0_3_read(grp_AddRoundKey_fu_683_state_0_3_read);
    grp_AddRoundKey_fu_683->state_1_0_read(grp_AddRoundKey_fu_683_state_1_0_read);
    grp_AddRoundKey_fu_683->state_1_1_read(grp_AddRoundKey_fu_683_state_1_1_read);
    grp_AddRoundKey_fu_683->state_1_2_read(grp_AddRoundKey_fu_683_state_1_2_read);
    grp_AddRoundKey_fu_683->state_1_3_read(grp_AddRoundKey_fu_683_state_1_3_read);
    grp_AddRoundKey_fu_683->state_2_0_read(grp_AddRoundKey_fu_683_state_2_0_read);
    grp_AddRoundKey_fu_683->state_2_1_read(grp_AddRoundKey_fu_683_state_2_1_read);
    grp_AddRoundKey_fu_683->state_2_2_read(grp_AddRoundKey_fu_683_state_2_2_read);
    grp_AddRoundKey_fu_683->state_2_3_read(grp_AddRoundKey_fu_683_state_2_3_read);
    grp_AddRoundKey_fu_683->state_3_0_read(grp_AddRoundKey_fu_683_state_3_0_read);
    grp_AddRoundKey_fu_683->state_3_1_read(grp_AddRoundKey_fu_683_state_3_1_read);
    grp_AddRoundKey_fu_683->state_3_2_read(grp_AddRoundKey_fu_683_state_3_2_read);
    grp_AddRoundKey_fu_683->state_3_3_read(grp_AddRoundKey_fu_683_state_3_3_read);
    grp_AddRoundKey_fu_683->RoundKey_address0(grp_AddRoundKey_fu_683_RoundKey_address0);
    grp_AddRoundKey_fu_683->RoundKey_ce0(grp_AddRoundKey_fu_683_RoundKey_ce0);
    grp_AddRoundKey_fu_683->RoundKey_q0(RoundKey_q0);
    grp_AddRoundKey_fu_683->RoundKey_address1(grp_AddRoundKey_fu_683_RoundKey_address1);
    grp_AddRoundKey_fu_683->RoundKey_ce1(grp_AddRoundKey_fu_683_RoundKey_ce1);
    grp_AddRoundKey_fu_683->RoundKey_q1(RoundKey_q1);
    grp_AddRoundKey_fu_683->ap_return_0(grp_AddRoundKey_fu_683_ap_return_0);
    grp_AddRoundKey_fu_683->ap_return_1(grp_AddRoundKey_fu_683_ap_return_1);
    grp_AddRoundKey_fu_683->ap_return_2(grp_AddRoundKey_fu_683_ap_return_2);
    grp_AddRoundKey_fu_683->ap_return_3(grp_AddRoundKey_fu_683_ap_return_3);
    grp_AddRoundKey_fu_683->ap_return_4(grp_AddRoundKey_fu_683_ap_return_4);
    grp_AddRoundKey_fu_683->ap_return_5(grp_AddRoundKey_fu_683_ap_return_5);
    grp_AddRoundKey_fu_683->ap_return_6(grp_AddRoundKey_fu_683_ap_return_6);
    grp_AddRoundKey_fu_683->ap_return_7(grp_AddRoundKey_fu_683_ap_return_7);
    grp_AddRoundKey_fu_683->ap_return_8(grp_AddRoundKey_fu_683_ap_return_8);
    grp_AddRoundKey_fu_683->ap_return_9(grp_AddRoundKey_fu_683_ap_return_9);
    grp_AddRoundKey_fu_683->ap_return_10(grp_AddRoundKey_fu_683_ap_return_10);
    grp_AddRoundKey_fu_683->ap_return_11(grp_AddRoundKey_fu_683_ap_return_11);
    grp_AddRoundKey_fu_683->ap_return_12(grp_AddRoundKey_fu_683_ap_return_12);
    grp_AddRoundKey_fu_683->ap_return_13(grp_AddRoundKey_fu_683_ap_return_13);
    grp_AddRoundKey_fu_683->ap_return_14(grp_AddRoundKey_fu_683_ap_return_14);
    grp_AddRoundKey_fu_683->ap_return_15(grp_AddRoundKey_fu_683_ap_return_15);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( grp_AddRoundKey_fu_683_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( grp_AddRoundKey_fu_683_RoundKey_address1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( grp_AddRoundKey_fu_683_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( grp_AddRoundKey_fu_683_RoundKey_ce1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state27);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state37);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_0 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_1 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_10 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_11 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_11_preg );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_12 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_12_preg );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_13 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_13_preg );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_14 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_14_preg );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_15 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_15_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_2 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_3 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_4 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_5 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_6 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_7 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_8 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( grp_AddRoundKey_fu_683_ap_return_9 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_AddRoundKey_fu_683_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_round);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( zext_ln426_fu_1081_p1 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_0_0_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_0_0_read );
    sensitive << ( sbox_q0 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_0 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_0_1_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_0_1_read );
    sensitive << ( sbox_q5 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_1 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_0_2_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_0_2_read );
    sensitive << ( sbox_q10 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_2 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_0_3_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_0_3_read );
    sensitive << ( sbox_q15 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_3 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_1_0_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_1_0_read );
    sensitive << ( sbox_q1 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_4 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_1_1_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_1_1_read );
    sensitive << ( sbox_q6 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_5 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_1_2_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_1_2_read );
    sensitive << ( sbox_q11 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_6 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_1_3_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_1_3_read );
    sensitive << ( sbox_q12 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_7 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_2_0_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_2_0_read );
    sensitive << ( sbox_q2 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_2_1_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_2_1_read );
    sensitive << ( sbox_q7 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_9 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_2_2_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_2_2_read );
    sensitive << ( sbox_q8 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_10 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_2_3_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_2_3_read );
    sensitive << ( sbox_q13 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_11 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_3_0_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_3_0_read );
    sensitive << ( sbox_q3 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_12 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_3_1_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_3_1_read );
    sensitive << ( sbox_q4 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_13 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_3_2_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_3_2_read );
    sensitive << ( sbox_q9 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_14 );

    SC_METHOD(thread_grp_AddRoundKey_fu_683_state_3_3_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_3_3_read );
    sensitive << ( sbox_q14 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( call_ret6_MixColumns_fu_663_ap_return_15 );

    SC_METHOD(thread_icmp_ln421_fu_915_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( round_0_reg_651 );

    SC_METHOD(thread_round_fu_1086_p2);
    sensitive << ( round_0_reg_651 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_16_fu_921_p1 );
    sensitive << ( zext_ln264_17_fu_926_p1 );
    sensitive << ( zext_ln264_18_fu_931_p1 );
    sensitive << ( zext_ln264_19_fu_936_p1 );
    sensitive << ( zext_ln264_20_fu_941_p1 );
    sensitive << ( zext_ln264_21_fu_946_p1 );
    sensitive << ( zext_ln264_22_fu_951_p1 );
    sensitive << ( zext_ln264_23_fu_956_p1 );
    sensitive << ( zext_ln264_24_fu_961_p1 );
    sensitive << ( zext_ln264_25_fu_966_p1 );
    sensitive << ( zext_ln264_26_fu_971_p1 );
    sensitive << ( zext_ln264_27_fu_976_p1 );
    sensitive << ( zext_ln264_28_fu_981_p1 );
    sensitive << ( zext_ln264_29_fu_986_p1 );
    sensitive << ( zext_ln264_30_fu_991_p1 );
    sensitive << ( zext_ln264_31_fu_996_p1 );
    sensitive << ( zext_ln264_fu_1092_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_1_fu_1097_p1 );

    SC_METHOD(thread_sbox_address10);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_10_fu_1142_p1 );

    SC_METHOD(thread_sbox_address11);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_11_fu_1147_p1 );

    SC_METHOD(thread_sbox_address12);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_12_fu_1152_p1 );

    SC_METHOD(thread_sbox_address13);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_13_fu_1157_p1 );

    SC_METHOD(thread_sbox_address14);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_14_fu_1162_p1 );

    SC_METHOD(thread_sbox_address15);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_15_fu_1167_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_2_fu_1102_p1 );

    SC_METHOD(thread_sbox_address3);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_3_fu_1107_p1 );

    SC_METHOD(thread_sbox_address4);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_4_fu_1112_p1 );

    SC_METHOD(thread_sbox_address5);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_5_fu_1117_p1 );

    SC_METHOD(thread_sbox_address6);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_6_fu_1122_p1 );

    SC_METHOD(thread_sbox_address7);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_7_fu_1127_p1 );

    SC_METHOD(thread_sbox_address8);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_8_fu_1132_p1 );

    SC_METHOD(thread_sbox_address9);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( zext_ln264_9_fu_1137_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce10);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce11);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce12);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce13);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce14);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce15);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce3);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce4);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce5);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce6);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce7);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce8);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_sbox_ce9);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_zext_ln264_10_fu_1142_p1);
    sensitive << ( state_2_2_read_ass_reg_591 );

    SC_METHOD(thread_zext_ln264_11_fu_1147_p1);
    sensitive << ( state_3_2_read_ass_reg_631 );

    SC_METHOD(thread_zext_ln264_12_fu_1152_p1);
    sensitive << ( state_0_3_read_ass_reg_521 );

    SC_METHOD(thread_zext_ln264_13_fu_1157_p1);
    sensitive << ( state_1_3_read_ass_reg_561 );

    SC_METHOD(thread_zext_ln264_14_fu_1162_p1);
    sensitive << ( state_2_3_read_ass_reg_601 );

    SC_METHOD(thread_zext_ln264_15_fu_1167_p1);
    sensitive << ( state_3_3_read_ass_reg_641 );

    SC_METHOD(thread_zext_ln264_16_fu_921_p1);
    sensitive << ( state_0_0_read_ass_reg_491 );

    SC_METHOD(thread_zext_ln264_17_fu_926_p1);
    sensitive << ( state_1_0_read_ass_reg_531 );

    SC_METHOD(thread_zext_ln264_18_fu_931_p1);
    sensitive << ( state_2_0_read_ass_reg_571 );

    SC_METHOD(thread_zext_ln264_19_fu_936_p1);
    sensitive << ( state_3_0_read_ass_reg_611 );

    SC_METHOD(thread_zext_ln264_1_fu_1097_p1);
    sensitive << ( state_1_0_read_ass_reg_531 );

    SC_METHOD(thread_zext_ln264_20_fu_941_p1);
    sensitive << ( state_0_1_read_ass_reg_501 );

    SC_METHOD(thread_zext_ln264_21_fu_946_p1);
    sensitive << ( state_1_1_read_ass_reg_541 );

    SC_METHOD(thread_zext_ln264_22_fu_951_p1);
    sensitive << ( state_2_1_read_ass_reg_581 );

    SC_METHOD(thread_zext_ln264_23_fu_956_p1);
    sensitive << ( state_3_1_read_ass_reg_621 );

    SC_METHOD(thread_zext_ln264_24_fu_961_p1);
    sensitive << ( state_0_2_read_ass_reg_511 );

    SC_METHOD(thread_zext_ln264_25_fu_966_p1);
    sensitive << ( state_1_2_read_ass_reg_551 );

    SC_METHOD(thread_zext_ln264_26_fu_971_p1);
    sensitive << ( state_2_2_read_ass_reg_591 );

    SC_METHOD(thread_zext_ln264_27_fu_976_p1);
    sensitive << ( state_3_2_read_ass_reg_631 );

    SC_METHOD(thread_zext_ln264_28_fu_981_p1);
    sensitive << ( state_0_3_read_ass_reg_521 );

    SC_METHOD(thread_zext_ln264_29_fu_986_p1);
    sensitive << ( state_1_3_read_ass_reg_561 );

    SC_METHOD(thread_zext_ln264_2_fu_1102_p1);
    sensitive << ( state_2_0_read_ass_reg_571 );

    SC_METHOD(thread_zext_ln264_30_fu_991_p1);
    sensitive << ( state_2_3_read_ass_reg_601 );

    SC_METHOD(thread_zext_ln264_31_fu_996_p1);
    sensitive << ( state_3_3_read_ass_reg_641 );

    SC_METHOD(thread_zext_ln264_3_fu_1107_p1);
    sensitive << ( state_3_0_read_ass_reg_611 );

    SC_METHOD(thread_zext_ln264_4_fu_1112_p1);
    sensitive << ( state_0_1_read_ass_reg_501 );

    SC_METHOD(thread_zext_ln264_5_fu_1117_p1);
    sensitive << ( state_1_1_read_ass_reg_541 );

    SC_METHOD(thread_zext_ln264_6_fu_1122_p1);
    sensitive << ( state_2_1_read_ass_reg_581 );

    SC_METHOD(thread_zext_ln264_7_fu_1127_p1);
    sensitive << ( state_3_1_read_ass_reg_621 );

    SC_METHOD(thread_zext_ln264_8_fu_1132_p1);
    sensitive << ( state_0_2_read_ass_reg_511 );

    SC_METHOD(thread_zext_ln264_9_fu_1137_p1);
    sensitive << ( state_1_2_read_ass_reg_551 );

    SC_METHOD(thread_zext_ln264_fu_1092_p1);
    sensitive << ( state_0_0_read_ass_reg_491 );

    SC_METHOD(thread_zext_ln426_fu_1081_p1);
    sensitive << ( round_0_reg_651 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln421_fu_915_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000000000000000001";
    grp_AddRoundKey_fu_683_ap_start_reg = SC_LOGIC_0;
    ap_return_0_preg = "00000000";
    ap_return_1_preg = "00000000";
    ap_return_2_preg = "00000000";
    ap_return_3_preg = "00000000";
    ap_return_4_preg = "00000000";
    ap_return_5_preg = "00000000";
    ap_return_6_preg = "00000000";
    ap_return_7_preg = "00000000";
    ap_return_8_preg = "00000000";
    ap_return_9_preg = "00000000";
    ap_return_10_preg = "00000000";
    ap_return_11_preg = "00000000";
    ap_return_12_preg = "00000000";
    ap_return_13_preg = "00000000";
    ap_return_14_preg = "00000000";
    ap_return_15_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_0_0_read, "(port)state_0_0_read");
    sc_trace(mVcdFile, state_0_1_read, "(port)state_0_1_read");
    sc_trace(mVcdFile, state_0_2_read, "(port)state_0_2_read");
    sc_trace(mVcdFile, state_0_3_read, "(port)state_0_3_read");
    sc_trace(mVcdFile, state_1_0_read, "(port)state_1_0_read");
    sc_trace(mVcdFile, state_1_1_read, "(port)state_1_1_read");
    sc_trace(mVcdFile, state_1_2_read, "(port)state_1_2_read");
    sc_trace(mVcdFile, state_1_3_read, "(port)state_1_3_read");
    sc_trace(mVcdFile, state_2_0_read, "(port)state_2_0_read");
    sc_trace(mVcdFile, state_2_1_read, "(port)state_2_1_read");
    sc_trace(mVcdFile, state_2_2_read, "(port)state_2_2_read");
    sc_trace(mVcdFile, state_2_3_read, "(port)state_2_3_read");
    sc_trace(mVcdFile, state_3_0_read, "(port)state_3_0_read");
    sc_trace(mVcdFile, state_3_1_read, "(port)state_3_1_read");
    sc_trace(mVcdFile, state_3_2_read, "(port)state_3_2_read");
    sc_trace(mVcdFile, state_3_3_read, "(port)state_3_3_read");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, sbox_address3, "sbox_address3");
    sc_trace(mVcdFile, sbox_ce3, "sbox_ce3");
    sc_trace(mVcdFile, sbox_q3, "sbox_q3");
    sc_trace(mVcdFile, sbox_address4, "sbox_address4");
    sc_trace(mVcdFile, sbox_ce4, "sbox_ce4");
    sc_trace(mVcdFile, sbox_q4, "sbox_q4");
    sc_trace(mVcdFile, sbox_address5, "sbox_address5");
    sc_trace(mVcdFile, sbox_ce5, "sbox_ce5");
    sc_trace(mVcdFile, sbox_q5, "sbox_q5");
    sc_trace(mVcdFile, sbox_address6, "sbox_address6");
    sc_trace(mVcdFile, sbox_ce6, "sbox_ce6");
    sc_trace(mVcdFile, sbox_q6, "sbox_q6");
    sc_trace(mVcdFile, sbox_address7, "sbox_address7");
    sc_trace(mVcdFile, sbox_ce7, "sbox_ce7");
    sc_trace(mVcdFile, sbox_q7, "sbox_q7");
    sc_trace(mVcdFile, sbox_address8, "sbox_address8");
    sc_trace(mVcdFile, sbox_ce8, "sbox_ce8");
    sc_trace(mVcdFile, sbox_q8, "sbox_q8");
    sc_trace(mVcdFile, sbox_address9, "sbox_address9");
    sc_trace(mVcdFile, sbox_ce9, "sbox_ce9");
    sc_trace(mVcdFile, sbox_q9, "sbox_q9");
    sc_trace(mVcdFile, sbox_address10, "sbox_address10");
    sc_trace(mVcdFile, sbox_ce10, "sbox_ce10");
    sc_trace(mVcdFile, sbox_q10, "sbox_q10");
    sc_trace(mVcdFile, sbox_address11, "sbox_address11");
    sc_trace(mVcdFile, sbox_ce11, "sbox_ce11");
    sc_trace(mVcdFile, sbox_q11, "sbox_q11");
    sc_trace(mVcdFile, sbox_address12, "sbox_address12");
    sc_trace(mVcdFile, sbox_ce12, "sbox_ce12");
    sc_trace(mVcdFile, sbox_q12, "sbox_q12");
    sc_trace(mVcdFile, sbox_address13, "sbox_address13");
    sc_trace(mVcdFile, sbox_ce13, "sbox_ce13");
    sc_trace(mVcdFile, sbox_q13, "sbox_q13");
    sc_trace(mVcdFile, sbox_address14, "sbox_address14");
    sc_trace(mVcdFile, sbox_ce14, "sbox_ce14");
    sc_trace(mVcdFile, sbox_q14, "sbox_q14");
    sc_trace(mVcdFile, sbox_address15, "sbox_address15");
    sc_trace(mVcdFile, sbox_ce15, "sbox_ce15");
    sc_trace(mVcdFile, sbox_q15, "sbox_q15");
    sc_trace(mVcdFile, reg_804, "reg_804");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, reg_810, "reg_810");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, reg_817, "reg_817");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, reg_824, "reg_824");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, reg_831, "reg_831");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, reg_838, "reg_838");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, reg_845, "reg_845");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, reg_852, "reg_852");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, reg_859, "reg_859");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, reg_866, "reg_866");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, reg_873, "reg_873");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, reg_880, "reg_880");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, reg_887, "reg_887");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, reg_894, "reg_894");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, reg_901, "reg_901");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, reg_908, "reg_908");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, icmp_ln421_fu_915_p2, "icmp_ln421_fu_915_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, round_fu_1086_p2, "round_fu_1086_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_ready, "call_ret6_MixColumns_fu_663_ap_ready");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_0, "call_ret6_MixColumns_fu_663_ap_return_0");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_1, "call_ret6_MixColumns_fu_663_ap_return_1");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_2, "call_ret6_MixColumns_fu_663_ap_return_2");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_3, "call_ret6_MixColumns_fu_663_ap_return_3");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_4, "call_ret6_MixColumns_fu_663_ap_return_4");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_5, "call_ret6_MixColumns_fu_663_ap_return_5");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_6, "call_ret6_MixColumns_fu_663_ap_return_6");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_7, "call_ret6_MixColumns_fu_663_ap_return_7");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_8, "call_ret6_MixColumns_fu_663_ap_return_8");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_9, "call_ret6_MixColumns_fu_663_ap_return_9");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_10, "call_ret6_MixColumns_fu_663_ap_return_10");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_11, "call_ret6_MixColumns_fu_663_ap_return_11");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_12, "call_ret6_MixColumns_fu_663_ap_return_12");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_13, "call_ret6_MixColumns_fu_663_ap_return_13");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_14, "call_ret6_MixColumns_fu_663_ap_return_14");
    sc_trace(mVcdFile, call_ret6_MixColumns_fu_663_ap_return_15, "call_ret6_MixColumns_fu_663_ap_return_15");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_start, "grp_AddRoundKey_fu_683_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_done, "grp_AddRoundKey_fu_683_ap_done");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_idle, "grp_AddRoundKey_fu_683_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_ready, "grp_AddRoundKey_fu_683_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_round, "grp_AddRoundKey_fu_683_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_0_0_read, "grp_AddRoundKey_fu_683_state_0_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_0_1_read, "grp_AddRoundKey_fu_683_state_0_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_0_2_read, "grp_AddRoundKey_fu_683_state_0_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_0_3_read, "grp_AddRoundKey_fu_683_state_0_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_1_0_read, "grp_AddRoundKey_fu_683_state_1_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_1_1_read, "grp_AddRoundKey_fu_683_state_1_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_1_2_read, "grp_AddRoundKey_fu_683_state_1_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_1_3_read, "grp_AddRoundKey_fu_683_state_1_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_2_0_read, "grp_AddRoundKey_fu_683_state_2_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_2_1_read, "grp_AddRoundKey_fu_683_state_2_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_2_2_read, "grp_AddRoundKey_fu_683_state_2_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_2_3_read, "grp_AddRoundKey_fu_683_state_2_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_3_0_read, "grp_AddRoundKey_fu_683_state_3_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_3_1_read, "grp_AddRoundKey_fu_683_state_3_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_3_2_read, "grp_AddRoundKey_fu_683_state_3_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_state_3_3_read, "grp_AddRoundKey_fu_683_state_3_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_RoundKey_address0, "grp_AddRoundKey_fu_683_RoundKey_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_RoundKey_ce0, "grp_AddRoundKey_fu_683_RoundKey_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_RoundKey_address1, "grp_AddRoundKey_fu_683_RoundKey_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_RoundKey_ce1, "grp_AddRoundKey_fu_683_RoundKey_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_0, "grp_AddRoundKey_fu_683_ap_return_0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_1, "grp_AddRoundKey_fu_683_ap_return_1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_2, "grp_AddRoundKey_fu_683_ap_return_2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_3, "grp_AddRoundKey_fu_683_ap_return_3");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_4, "grp_AddRoundKey_fu_683_ap_return_4");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_5, "grp_AddRoundKey_fu_683_ap_return_5");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_6, "grp_AddRoundKey_fu_683_ap_return_6");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_7, "grp_AddRoundKey_fu_683_ap_return_7");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_8, "grp_AddRoundKey_fu_683_ap_return_8");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_9, "grp_AddRoundKey_fu_683_ap_return_9");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_10, "grp_AddRoundKey_fu_683_ap_return_10");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_11, "grp_AddRoundKey_fu_683_ap_return_11");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_12, "grp_AddRoundKey_fu_683_ap_return_12");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_13, "grp_AddRoundKey_fu_683_ap_return_13");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_14, "grp_AddRoundKey_fu_683_ap_return_14");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_return_15, "grp_AddRoundKey_fu_683_ap_return_15");
    sc_trace(mVcdFile, state_0_0_read_ass_reg_491, "state_0_0_read_ass_reg_491");
    sc_trace(mVcdFile, state_0_1_read_ass_reg_501, "state_0_1_read_ass_reg_501");
    sc_trace(mVcdFile, state_0_2_read_ass_reg_511, "state_0_2_read_ass_reg_511");
    sc_trace(mVcdFile, state_0_3_read_ass_reg_521, "state_0_3_read_ass_reg_521");
    sc_trace(mVcdFile, state_1_0_read_ass_reg_531, "state_1_0_read_ass_reg_531");
    sc_trace(mVcdFile, state_1_1_read_ass_reg_541, "state_1_1_read_ass_reg_541");
    sc_trace(mVcdFile, state_1_2_read_ass_reg_551, "state_1_2_read_ass_reg_551");
    sc_trace(mVcdFile, state_1_3_read_ass_reg_561, "state_1_3_read_ass_reg_561");
    sc_trace(mVcdFile, state_2_0_read_ass_reg_571, "state_2_0_read_ass_reg_571");
    sc_trace(mVcdFile, state_2_1_read_ass_reg_581, "state_2_1_read_ass_reg_581");
    sc_trace(mVcdFile, state_2_2_read_ass_reg_591, "state_2_2_read_ass_reg_591");
    sc_trace(mVcdFile, state_2_3_read_ass_reg_601, "state_2_3_read_ass_reg_601");
    sc_trace(mVcdFile, state_3_0_read_ass_reg_611, "state_3_0_read_ass_reg_611");
    sc_trace(mVcdFile, state_3_1_read_ass_reg_621, "state_3_1_read_ass_reg_621");
    sc_trace(mVcdFile, state_3_2_read_ass_reg_631, "state_3_2_read_ass_reg_631");
    sc_trace(mVcdFile, state_3_3_read_ass_reg_641, "state_3_3_read_ass_reg_641");
    sc_trace(mVcdFile, round_0_reg_651, "round_0_reg_651");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_683_ap_start_reg, "grp_AddRoundKey_fu_683_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state27, "ap_NS_fsm_state27");
    sc_trace(mVcdFile, ap_NS_fsm_state37, "ap_NS_fsm_state37");
    sc_trace(mVcdFile, zext_ln426_fu_1081_p1, "zext_ln426_fu_1081_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, zext_ln264_16_fu_921_p1, "zext_ln264_16_fu_921_p1");
    sc_trace(mVcdFile, zext_ln264_17_fu_926_p1, "zext_ln264_17_fu_926_p1");
    sc_trace(mVcdFile, zext_ln264_18_fu_931_p1, "zext_ln264_18_fu_931_p1");
    sc_trace(mVcdFile, zext_ln264_19_fu_936_p1, "zext_ln264_19_fu_936_p1");
    sc_trace(mVcdFile, zext_ln264_20_fu_941_p1, "zext_ln264_20_fu_941_p1");
    sc_trace(mVcdFile, zext_ln264_21_fu_946_p1, "zext_ln264_21_fu_946_p1");
    sc_trace(mVcdFile, zext_ln264_22_fu_951_p1, "zext_ln264_22_fu_951_p1");
    sc_trace(mVcdFile, zext_ln264_23_fu_956_p1, "zext_ln264_23_fu_956_p1");
    sc_trace(mVcdFile, zext_ln264_24_fu_961_p1, "zext_ln264_24_fu_961_p1");
    sc_trace(mVcdFile, zext_ln264_25_fu_966_p1, "zext_ln264_25_fu_966_p1");
    sc_trace(mVcdFile, zext_ln264_26_fu_971_p1, "zext_ln264_26_fu_971_p1");
    sc_trace(mVcdFile, zext_ln264_27_fu_976_p1, "zext_ln264_27_fu_976_p1");
    sc_trace(mVcdFile, zext_ln264_28_fu_981_p1, "zext_ln264_28_fu_981_p1");
    sc_trace(mVcdFile, zext_ln264_29_fu_986_p1, "zext_ln264_29_fu_986_p1");
    sc_trace(mVcdFile, zext_ln264_30_fu_991_p1, "zext_ln264_30_fu_991_p1");
    sc_trace(mVcdFile, zext_ln264_31_fu_996_p1, "zext_ln264_31_fu_996_p1");
    sc_trace(mVcdFile, zext_ln264_fu_1092_p1, "zext_ln264_fu_1092_p1");
    sc_trace(mVcdFile, zext_ln264_1_fu_1097_p1, "zext_ln264_1_fu_1097_p1");
    sc_trace(mVcdFile, zext_ln264_2_fu_1102_p1, "zext_ln264_2_fu_1102_p1");
    sc_trace(mVcdFile, zext_ln264_3_fu_1107_p1, "zext_ln264_3_fu_1107_p1");
    sc_trace(mVcdFile, zext_ln264_4_fu_1112_p1, "zext_ln264_4_fu_1112_p1");
    sc_trace(mVcdFile, zext_ln264_5_fu_1117_p1, "zext_ln264_5_fu_1117_p1");
    sc_trace(mVcdFile, zext_ln264_6_fu_1122_p1, "zext_ln264_6_fu_1122_p1");
    sc_trace(mVcdFile, zext_ln264_7_fu_1127_p1, "zext_ln264_7_fu_1127_p1");
    sc_trace(mVcdFile, zext_ln264_8_fu_1132_p1, "zext_ln264_8_fu_1132_p1");
    sc_trace(mVcdFile, zext_ln264_9_fu_1137_p1, "zext_ln264_9_fu_1137_p1");
    sc_trace(mVcdFile, zext_ln264_10_fu_1142_p1, "zext_ln264_10_fu_1142_p1");
    sc_trace(mVcdFile, zext_ln264_11_fu_1147_p1, "zext_ln264_11_fu_1147_p1");
    sc_trace(mVcdFile, zext_ln264_12_fu_1152_p1, "zext_ln264_12_fu_1152_p1");
    sc_trace(mVcdFile, zext_ln264_13_fu_1157_p1, "zext_ln264_13_fu_1157_p1");
    sc_trace(mVcdFile, zext_ln264_14_fu_1162_p1, "zext_ln264_14_fu_1162_p1");
    sc_trace(mVcdFile, zext_ln264_15_fu_1167_p1, "zext_ln264_15_fu_1167_p1");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_return_11_preg, "ap_return_11_preg");
    sc_trace(mVcdFile, ap_return_12_preg, "ap_return_12_preg");
    sc_trace(mVcdFile, ap_return_13_preg, "ap_return_13_preg");
    sc_trace(mVcdFile, ap_return_14_preg, "ap_return_14_preg");
    sc_trace(mVcdFile, ap_return_15_preg, "ap_return_15_preg");
#endif

    }
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete call_ret6_MixColumns_fu_663;
    delete grp_AddRoundKey_fu_683;
}

void Cipher::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_0_preg = grp_AddRoundKey_fu_683_ap_return_0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_10_preg = grp_AddRoundKey_fu_683_ap_return_10.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_11_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_11_preg = grp_AddRoundKey_fu_683_ap_return_11.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_12_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_12_preg = grp_AddRoundKey_fu_683_ap_return_12.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_13_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_13_preg = grp_AddRoundKey_fu_683_ap_return_13.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_14_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_14_preg = grp_AddRoundKey_fu_683_ap_return_14.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_15_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_15_preg = grp_AddRoundKey_fu_683_ap_return_15.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_1_preg = grp_AddRoundKey_fu_683_ap_return_1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_2_preg = grp_AddRoundKey_fu_683_ap_return_2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_3_preg = grp_AddRoundKey_fu_683_ap_return_3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_4_preg = grp_AddRoundKey_fu_683_ap_return_4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_5_preg = grp_AddRoundKey_fu_683_ap_return_5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_6_preg = grp_AddRoundKey_fu_683_ap_return_6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_7_preg = grp_AddRoundKey_fu_683_ap_return_7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_8_preg = grp_AddRoundKey_fu_683_ap_return_8.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            ap_return_9_preg = grp_AddRoundKey_fu_683_ap_return_9.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_683_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state27.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state37.read())))) {
            grp_AddRoundKey_fu_683_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_683_ap_ready.read())) {
            grp_AddRoundKey_fu_683_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_810 = sbox_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        reg_810 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_817 = sbox_q2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        reg_817 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_824 = sbox_q3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        reg_824 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_831 = sbox_q4.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        reg_831 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_838 = sbox_q5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        reg_838 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_845 = sbox_q6.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        reg_845 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_852 = sbox_q7.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        reg_852 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_859 = sbox_q8.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        reg_859 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_866 = sbox_q9.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        reg_866 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_873 = sbox_q10.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        reg_873 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_880 = sbox_q11.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        reg_880 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_887 = sbox_q12.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        reg_887 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_894 = sbox_q13.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        reg_894 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_901 = sbox_q14.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        reg_901 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reg_908 = sbox_q15.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        reg_908 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        round_0_reg_651 = round_fu_1086_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        round_0_reg_651 = ap_const_lv4_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        reg_804 = sbox_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        state_0_0_read_ass_reg_491 = grp_AddRoundKey_fu_683_ap_return_0.read();
        state_0_1_read_ass_reg_501 = grp_AddRoundKey_fu_683_ap_return_1.read();
        state_0_2_read_ass_reg_511 = grp_AddRoundKey_fu_683_ap_return_2.read();
        state_0_3_read_ass_reg_521 = grp_AddRoundKey_fu_683_ap_return_3.read();
        state_1_0_read_ass_reg_531 = grp_AddRoundKey_fu_683_ap_return_4.read();
        state_1_1_read_ass_reg_541 = grp_AddRoundKey_fu_683_ap_return_5.read();
        state_1_2_read_ass_reg_551 = grp_AddRoundKey_fu_683_ap_return_6.read();
        state_1_3_read_ass_reg_561 = grp_AddRoundKey_fu_683_ap_return_7.read();
        state_2_0_read_ass_reg_571 = grp_AddRoundKey_fu_683_ap_return_8.read();
        state_2_1_read_ass_reg_581 = grp_AddRoundKey_fu_683_ap_return_9.read();
        state_2_2_read_ass_reg_591 = grp_AddRoundKey_fu_683_ap_return_10.read();
        state_2_3_read_ass_reg_601 = grp_AddRoundKey_fu_683_ap_return_11.read();
        state_3_0_read_ass_reg_611 = grp_AddRoundKey_fu_683_ap_return_12.read();
        state_3_1_read_ass_reg_621 = grp_AddRoundKey_fu_683_ap_return_13.read();
        state_3_2_read_ass_reg_631 = grp_AddRoundKey_fu_683_ap_return_14.read();
        state_3_3_read_ass_reg_641 = grp_AddRoundKey_fu_683_ap_return_15.read();
    }
}

void Cipher::thread_RoundKey_address0() {
    RoundKey_address0 = grp_AddRoundKey_fu_683_RoundKey_address0.read();
}

void Cipher::thread_RoundKey_address1() {
    RoundKey_address1 = grp_AddRoundKey_fu_683_RoundKey_address1.read();
}

void Cipher::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        RoundKey_ce0 = grp_AddRoundKey_fu_683_RoundKey_ce0.read();
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        RoundKey_ce1 = grp_AddRoundKey_fu_683_RoundKey_ce1.read();
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Cipher::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Cipher::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Cipher::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Cipher::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Cipher::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Cipher::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Cipher::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Cipher::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Cipher::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Cipher::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void Cipher::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Cipher::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Cipher::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Cipher::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Cipher::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void Cipher::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void Cipher::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void Cipher::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void Cipher::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void Cipher::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void Cipher::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void Cipher::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void Cipher::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void Cipher::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void Cipher::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void Cipher::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void Cipher::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void Cipher::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void Cipher::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void Cipher::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void Cipher::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void Cipher::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Cipher::thread_ap_NS_fsm_state27() {
    ap_NS_fsm_state27 = ap_NS_fsm.read()[26];
}

void Cipher::thread_ap_NS_fsm_state37() {
    ap_NS_fsm_state37 = ap_NS_fsm.read()[36];
}

void Cipher::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_0 = grp_AddRoundKey_fu_683_ap_return_0.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void Cipher::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_1 = grp_AddRoundKey_fu_683_ap_return_1.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void Cipher::thread_ap_return_10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_10 = grp_AddRoundKey_fu_683_ap_return_10.read();
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void Cipher::thread_ap_return_11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_11 = grp_AddRoundKey_fu_683_ap_return_11.read();
    } else {
        ap_return_11 = ap_return_11_preg.read();
    }
}

void Cipher::thread_ap_return_12() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_12 = grp_AddRoundKey_fu_683_ap_return_12.read();
    } else {
        ap_return_12 = ap_return_12_preg.read();
    }
}

void Cipher::thread_ap_return_13() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_13 = grp_AddRoundKey_fu_683_ap_return_13.read();
    } else {
        ap_return_13 = ap_return_13_preg.read();
    }
}

void Cipher::thread_ap_return_14() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_14 = grp_AddRoundKey_fu_683_ap_return_14.read();
    } else {
        ap_return_14 = ap_return_14_preg.read();
    }
}

void Cipher::thread_ap_return_15() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_15 = grp_AddRoundKey_fu_683_ap_return_15.read();
    } else {
        ap_return_15 = ap_return_15_preg.read();
    }
}

void Cipher::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_2 = grp_AddRoundKey_fu_683_ap_return_2.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void Cipher::thread_ap_return_3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_3 = grp_AddRoundKey_fu_683_ap_return_3.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void Cipher::thread_ap_return_4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_4 = grp_AddRoundKey_fu_683_ap_return_4.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void Cipher::thread_ap_return_5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_5 = grp_AddRoundKey_fu_683_ap_return_5.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void Cipher::thread_ap_return_6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_6 = grp_AddRoundKey_fu_683_ap_return_6.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void Cipher::thread_ap_return_7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_7 = grp_AddRoundKey_fu_683_ap_return_7.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void Cipher::thread_ap_return_8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_8 = grp_AddRoundKey_fu_683_ap_return_8.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void Cipher::thread_ap_return_9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        ap_return_9 = grp_AddRoundKey_fu_683_ap_return_9.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        grp_AddRoundKey_fu_683_ap_start = ap_const_logic_1;
    } else {
        grp_AddRoundKey_fu_683_ap_start = grp_AddRoundKey_fu_683_ap_start_reg.read();
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_round = ap_const_lv6_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_round = zext_ln426_fu_1081_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_round = ap_const_lv6_0;
    } else {
        grp_AddRoundKey_fu_683_round = "XXXXXX";
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_0_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_0_0_read = sbox_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_0_0_read = call_ret6_MixColumns_fu_663_ap_return_0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_0_0_read = state_0_0_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_0_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_0_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_0_1_read = sbox_q5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_0_1_read = call_ret6_MixColumns_fu_663_ap_return_1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_0_1_read = state_0_1_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_0_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_0_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_0_2_read = sbox_q10.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_0_2_read = call_ret6_MixColumns_fu_663_ap_return_2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_0_2_read = state_0_2_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_0_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_0_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_0_3_read = sbox_q15.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_0_3_read = call_ret6_MixColumns_fu_663_ap_return_3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_0_3_read = state_0_3_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_0_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_1_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_1_0_read = sbox_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_1_0_read = call_ret6_MixColumns_fu_663_ap_return_4.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_1_0_read = state_1_0_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_1_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_1_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_1_1_read = sbox_q6.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_1_1_read = call_ret6_MixColumns_fu_663_ap_return_5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_1_1_read = state_1_1_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_1_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_1_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_1_2_read = sbox_q11.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_1_2_read = call_ret6_MixColumns_fu_663_ap_return_6.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_1_2_read = state_1_2_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_1_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_1_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_1_3_read = sbox_q12.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_1_3_read = call_ret6_MixColumns_fu_663_ap_return_7.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_1_3_read = state_1_3_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_1_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_2_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_2_0_read = sbox_q2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_2_0_read = call_ret6_MixColumns_fu_663_ap_return_8.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_2_0_read = state_2_0_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_2_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_2_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_2_1_read = sbox_q7.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_2_1_read = call_ret6_MixColumns_fu_663_ap_return_9.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_2_1_read = state_2_1_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_2_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_2_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_2_2_read = sbox_q8.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_2_2_read = call_ret6_MixColumns_fu_663_ap_return_10.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_2_2_read = state_2_2_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_2_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_2_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_2_3_read = sbox_q13.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_2_3_read = call_ret6_MixColumns_fu_663_ap_return_11.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_2_3_read = state_2_3_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_2_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_3_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_3_0_read = sbox_q3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_3_0_read = call_ret6_MixColumns_fu_663_ap_return_12.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_3_0_read = state_3_0_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_3_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_3_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_3_1_read = sbox_q4.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_3_1_read = call_ret6_MixColumns_fu_663_ap_return_13.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_3_1_read = state_3_1_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_3_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_3_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_3_2_read = sbox_q9.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_3_2_read = call_ret6_MixColumns_fu_663_ap_return_14.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_3_2_read = state_3_2_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_3_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_683_state_3_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_AddRoundKey_fu_683_state_3_3_read = sbox_q14.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_AddRoundKey_fu_683_state_3_3_read = call_ret6_MixColumns_fu_663_ap_return_15.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_AddRoundKey_fu_683_state_3_3_read = state_3_3_read.read();
    } else {
        grp_AddRoundKey_fu_683_state_3_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_icmp_ln421_fu_915_p2() {
    icmp_ln421_fu_915_p2 = (!round_0_reg_651.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(round_0_reg_651.read() == ap_const_lv4_E);
}

void Cipher::thread_round_fu_1086_p2() {
    round_fu_1086_p2 = (!round_0_reg_651.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_0_reg_651.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_fu_1092_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_31_fu_996_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_30_fu_991_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_29_fu_986_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_28_fu_981_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_27_fu_976_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_26_fu_971_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_25_fu_966_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_24_fu_961_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_23_fu_956_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_22_fu_951_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_21_fu_946_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_20_fu_941_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_19_fu_936_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_18_fu_931_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_17_fu_926_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln264_16_fu_921_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address1() {
    sbox_address1 =  (sc_lv<8>) (zext_ln264_1_fu_1097_p1.read());
}

void Cipher::thread_sbox_address10() {
    sbox_address10 =  (sc_lv<8>) (zext_ln264_10_fu_1142_p1.read());
}

void Cipher::thread_sbox_address11() {
    sbox_address11 =  (sc_lv<8>) (zext_ln264_11_fu_1147_p1.read());
}

void Cipher::thread_sbox_address12() {
    sbox_address12 =  (sc_lv<8>) (zext_ln264_12_fu_1152_p1.read());
}

void Cipher::thread_sbox_address13() {
    sbox_address13 =  (sc_lv<8>) (zext_ln264_13_fu_1157_p1.read());
}

void Cipher::thread_sbox_address14() {
    sbox_address14 =  (sc_lv<8>) (zext_ln264_14_fu_1162_p1.read());
}

void Cipher::thread_sbox_address15() {
    sbox_address15 =  (sc_lv<8>) (zext_ln264_15_fu_1167_p1.read());
}

void Cipher::thread_sbox_address2() {
    sbox_address2 =  (sc_lv<8>) (zext_ln264_2_fu_1102_p1.read());
}

void Cipher::thread_sbox_address3() {
    sbox_address3 =  (sc_lv<8>) (zext_ln264_3_fu_1107_p1.read());
}

void Cipher::thread_sbox_address4() {
    sbox_address4 =  (sc_lv<8>) (zext_ln264_4_fu_1112_p1.read());
}

void Cipher::thread_sbox_address5() {
    sbox_address5 =  (sc_lv<8>) (zext_ln264_5_fu_1117_p1.read());
}

void Cipher::thread_sbox_address6() {
    sbox_address6 =  (sc_lv<8>) (zext_ln264_6_fu_1122_p1.read());
}

void Cipher::thread_sbox_address7() {
    sbox_address7 =  (sc_lv<8>) (zext_ln264_7_fu_1127_p1.read());
}

void Cipher::thread_sbox_address8() {
    sbox_address8 =  (sc_lv<8>) (zext_ln264_8_fu_1132_p1.read());
}

void Cipher::thread_sbox_address9() {
    sbox_address9 =  (sc_lv<8>) (zext_ln264_9_fu_1137_p1.read());
}

void Cipher::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce10 = ap_const_logic_1;
    } else {
        sbox_ce10 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce11 = ap_const_logic_1;
    } else {
        sbox_ce11 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce12() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce12 = ap_const_logic_1;
    } else {
        sbox_ce12 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce13() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce13 = ap_const_logic_1;
    } else {
        sbox_ce13 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce14() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce14 = ap_const_logic_1;
    } else {
        sbox_ce14 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce15() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce15 = ap_const_logic_1;
    } else {
        sbox_ce15 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce3 = ap_const_logic_1;
    } else {
        sbox_ce3 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce4 = ap_const_logic_1;
    } else {
        sbox_ce4 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce5 = ap_const_logic_1;
    } else {
        sbox_ce5 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce6 = ap_const_logic_1;
    } else {
        sbox_ce6 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce7 = ap_const_logic_1;
    } else {
        sbox_ce7 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce8 = ap_const_logic_1;
    } else {
        sbox_ce8 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sbox_ce9 = ap_const_logic_1;
    } else {
        sbox_ce9 = ap_const_logic_0;
    }
}

void Cipher::thread_zext_ln264_10_fu_1142_p1() {
    zext_ln264_10_fu_1142_p1 = esl_zext<64,8>(state_2_2_read_ass_reg_591.read());
}

void Cipher::thread_zext_ln264_11_fu_1147_p1() {
    zext_ln264_11_fu_1147_p1 = esl_zext<64,8>(state_3_2_read_ass_reg_631.read());
}

void Cipher::thread_zext_ln264_12_fu_1152_p1() {
    zext_ln264_12_fu_1152_p1 = esl_zext<64,8>(state_0_3_read_ass_reg_521.read());
}

void Cipher::thread_zext_ln264_13_fu_1157_p1() {
    zext_ln264_13_fu_1157_p1 = esl_zext<64,8>(state_1_3_read_ass_reg_561.read());
}

void Cipher::thread_zext_ln264_14_fu_1162_p1() {
    zext_ln264_14_fu_1162_p1 = esl_zext<64,8>(state_2_3_read_ass_reg_601.read());
}

void Cipher::thread_zext_ln264_15_fu_1167_p1() {
    zext_ln264_15_fu_1167_p1 = esl_zext<64,8>(state_3_3_read_ass_reg_641.read());
}

void Cipher::thread_zext_ln264_16_fu_921_p1() {
    zext_ln264_16_fu_921_p1 = esl_zext<64,8>(state_0_0_read_ass_reg_491.read());
}

void Cipher::thread_zext_ln264_17_fu_926_p1() {
    zext_ln264_17_fu_926_p1 = esl_zext<64,8>(state_1_0_read_ass_reg_531.read());
}

void Cipher::thread_zext_ln264_18_fu_931_p1() {
    zext_ln264_18_fu_931_p1 = esl_zext<64,8>(state_2_0_read_ass_reg_571.read());
}

void Cipher::thread_zext_ln264_19_fu_936_p1() {
    zext_ln264_19_fu_936_p1 = esl_zext<64,8>(state_3_0_read_ass_reg_611.read());
}

void Cipher::thread_zext_ln264_1_fu_1097_p1() {
    zext_ln264_1_fu_1097_p1 = esl_zext<64,8>(state_1_0_read_ass_reg_531.read());
}

void Cipher::thread_zext_ln264_20_fu_941_p1() {
    zext_ln264_20_fu_941_p1 = esl_zext<64,8>(state_0_1_read_ass_reg_501.read());
}

void Cipher::thread_zext_ln264_21_fu_946_p1() {
    zext_ln264_21_fu_946_p1 = esl_zext<64,8>(state_1_1_read_ass_reg_541.read());
}

void Cipher::thread_zext_ln264_22_fu_951_p1() {
    zext_ln264_22_fu_951_p1 = esl_zext<64,8>(state_2_1_read_ass_reg_581.read());
}

void Cipher::thread_zext_ln264_23_fu_956_p1() {
    zext_ln264_23_fu_956_p1 = esl_zext<64,8>(state_3_1_read_ass_reg_621.read());
}

void Cipher::thread_zext_ln264_24_fu_961_p1() {
    zext_ln264_24_fu_961_p1 = esl_zext<64,8>(state_0_2_read_ass_reg_511.read());
}

void Cipher::thread_zext_ln264_25_fu_966_p1() {
    zext_ln264_25_fu_966_p1 = esl_zext<64,8>(state_1_2_read_ass_reg_551.read());
}

void Cipher::thread_zext_ln264_26_fu_971_p1() {
    zext_ln264_26_fu_971_p1 = esl_zext<64,8>(state_2_2_read_ass_reg_591.read());
}

void Cipher::thread_zext_ln264_27_fu_976_p1() {
    zext_ln264_27_fu_976_p1 = esl_zext<64,8>(state_3_2_read_ass_reg_631.read());
}

void Cipher::thread_zext_ln264_28_fu_981_p1() {
    zext_ln264_28_fu_981_p1 = esl_zext<64,8>(state_0_3_read_ass_reg_521.read());
}

void Cipher::thread_zext_ln264_29_fu_986_p1() {
    zext_ln264_29_fu_986_p1 = esl_zext<64,8>(state_1_3_read_ass_reg_561.read());
}

void Cipher::thread_zext_ln264_2_fu_1102_p1() {
    zext_ln264_2_fu_1102_p1 = esl_zext<64,8>(state_2_0_read_ass_reg_571.read());
}

void Cipher::thread_zext_ln264_30_fu_991_p1() {
    zext_ln264_30_fu_991_p1 = esl_zext<64,8>(state_2_3_read_ass_reg_601.read());
}

void Cipher::thread_zext_ln264_31_fu_996_p1() {
    zext_ln264_31_fu_996_p1 = esl_zext<64,8>(state_3_3_read_ass_reg_641.read());
}

void Cipher::thread_zext_ln264_3_fu_1107_p1() {
    zext_ln264_3_fu_1107_p1 = esl_zext<64,8>(state_3_0_read_ass_reg_611.read());
}

void Cipher::thread_zext_ln264_4_fu_1112_p1() {
    zext_ln264_4_fu_1112_p1 = esl_zext<64,8>(state_0_1_read_ass_reg_501.read());
}

void Cipher::thread_zext_ln264_5_fu_1117_p1() {
    zext_ln264_5_fu_1117_p1 = esl_zext<64,8>(state_1_1_read_ass_reg_541.read());
}

void Cipher::thread_zext_ln264_6_fu_1122_p1() {
    zext_ln264_6_fu_1122_p1 = esl_zext<64,8>(state_2_1_read_ass_reg_581.read());
}

void Cipher::thread_zext_ln264_7_fu_1127_p1() {
    zext_ln264_7_fu_1127_p1 = esl_zext<64,8>(state_3_1_read_ass_reg_621.read());
}

void Cipher::thread_zext_ln264_8_fu_1132_p1() {
    zext_ln264_8_fu_1132_p1 = esl_zext<64,8>(state_0_2_read_ass_reg_511.read());
}

void Cipher::thread_zext_ln264_9_fu_1137_p1() {
    zext_ln264_9_fu_1137_p1 = esl_zext<64,8>(state_1_2_read_ass_reg_551.read());
}

void Cipher::thread_zext_ln264_fu_1092_p1() {
    zext_ln264_fu_1092_p1 = esl_zext<64,8>(state_0_0_read_ass_reg_491.read());
}

void Cipher::thread_zext_ln426_fu_1081_p1() {
    zext_ln426_fu_1081_p1 = esl_zext<6,4>(round_0_reg_651.read());
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(icmp_ln421_fu_915_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<45>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

