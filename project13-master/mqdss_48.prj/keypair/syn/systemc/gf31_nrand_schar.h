// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gf31_nrand_schar_HH_
#define _gf31_nrand_schar_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "keccak_squeezeblocks.h"
#include "keccak_absorb_2.h"
#include "gf31_nrand_schar_g8j.h"
#include "gf31_nrand_schar_hbi.h"

namespace ap_rtl {

struct gf31_nrand_schar : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<5> > out_r_d0;
    sc_out< sc_lv<6> > seed_address0;
    sc_out< sc_logic > seed_ce0;
    sc_in< sc_lv<8> > seed_q0;


    // Module declarations
    gf31_nrand_schar(sc_module_name name);
    SC_HAS_PROCESS(gf31_nrand_schar);

    ~gf31_nrand_schar();

    sc_trace_file* mVcdFile;

    gf31_nrand_schar_g8j* shakestate_U;
    gf31_nrand_schar_hbi* output_assign_U;
    keccak_squeezeblocks* grp_keccak_squeezeblocks_fu_126;
    keccak_absorb_2* grp_keccak_absorb_2_fu_134;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > j_0_reg_115;
    sc_signal< sc_lv<5> > add_ln76_fu_150_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > grp_load_fu_141_p1;
    sc_signal< sc_lv<32> > i_10_load_1_reg_244;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > and_ln83_fu_178_p2;
    sc_signal< sc_lv<32> > j_fu_184_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_ap_ready;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_ap_done;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<5> > shakestate_address0;
    sc_signal< sc_logic > shakestate_ce0;
    sc_signal< sc_logic > shakestate_we0;
    sc_signal< sc_lv<64> > shakestate_d0;
    sc_signal< sc_lv<64> > shakestate_q0;
    sc_signal< sc_logic > shakestate_ce1;
    sc_signal< sc_logic > shakestate_we1;
    sc_signal< sc_lv<64> > shakestate_q1;
    sc_signal< sc_lv<8> > output_assign_address0;
    sc_signal< sc_logic > output_assign_ce0;
    sc_signal< sc_logic > output_assign_we0;
    sc_signal< sc_lv<8> > output_assign_q0;
    sc_signal< sc_logic > output_assign_ce1;
    sc_signal< sc_logic > output_assign_we1;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_ap_start;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_ap_idle;
    sc_signal< sc_lv<8> > grp_keccak_squeezeblocks_fu_126_h_address0;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_h_ce0;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_h_we0;
    sc_signal< sc_lv<8> > grp_keccak_squeezeblocks_fu_126_h_d0;
    sc_signal< sc_lv<8> > grp_keccak_squeezeblocks_fu_126_h_address1;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_h_ce1;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_h_we1;
    sc_signal< sc_lv<8> > grp_keccak_squeezeblocks_fu_126_h_d1;
    sc_signal< sc_lv<5> > grp_keccak_squeezeblocks_fu_126_s_address0;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_s_ce0;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_s_we0;
    sc_signal< sc_lv<64> > grp_keccak_squeezeblocks_fu_126_s_d0;
    sc_signal< sc_lv<5> > grp_keccak_squeezeblocks_fu_126_s_address1;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_s_ce1;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_s_we1;
    sc_signal< sc_lv<64> > grp_keccak_squeezeblocks_fu_126_s_d1;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_ap_start;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_ap_done;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_ap_idle;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_ap_ready;
    sc_signal< sc_lv<5> > grp_keccak_absorb_2_fu_134_s_address0;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_s_ce0;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_s_we0;
    sc_signal< sc_lv<64> > grp_keccak_absorb_2_fu_134_s_d0;
    sc_signal< sc_lv<6> > grp_keccak_absorb_2_fu_134_m_address0;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_m_ce0;
    sc_signal< sc_lv<5> > phi_ln76_reg_104;
    sc_signal< sc_lv<1> > icmp_ln76_fu_161_p2;
    sc_signal< sc_logic > grp_keccak_squeezeblocks_fu_126_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > grp_fu_144_p2;
    sc_signal< sc_logic > grp_keccak_absorb_2_fu_134_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln76_fu_156_p1;
    sc_signal< sc_lv<64> > sext_ln84_fu_190_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > sext_ln85_fu_212_p1;
    sc_signal< sc_lv<1> > icmp_ln84_fu_199_p2;
    sc_signal< sc_lv<32> > i_10_fu_62;
    sc_signal< sc_lv<32> > i_fu_216_p2;
    sc_signal< sc_lv<32> > ap_sig_allocacmp_i_10_load_1;
    sc_signal< sc_lv<1> > icmp_ln83_1_fu_172_p2;
    sc_signal< sc_lv<5> > empty_35_fu_195_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_E580;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<32> ap_const_lv32_88;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<5> ap_const_lv5_11;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln76_fu_150_p2();
    void thread_and_ln83_fu_178_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state7_pp0_stage0_iter0();
    void thread_ap_block_state8_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_sig_allocacmp_i_10_load_1();
    void thread_empty_35_fu_195_p1();
    void thread_grp_fu_144_p2();
    void thread_grp_keccak_absorb_2_fu_134_ap_start();
    void thread_grp_keccak_squeezeblocks_fu_126_ap_start();
    void thread_grp_load_fu_141_p1();
    void thread_i_fu_216_p2();
    void thread_icmp_ln76_fu_161_p2();
    void thread_icmp_ln83_1_fu_172_p2();
    void thread_icmp_ln84_fu_199_p2();
    void thread_j_fu_184_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_output_assign_address0();
    void thread_output_assign_ce0();
    void thread_output_assign_ce1();
    void thread_output_assign_we0();
    void thread_output_assign_we1();
    void thread_seed_address0();
    void thread_seed_ce0();
    void thread_sext_ln84_fu_190_p1();
    void thread_sext_ln85_fu_212_p1();
    void thread_shakestate_address0();
    void thread_shakestate_ce0();
    void thread_shakestate_ce1();
    void thread_shakestate_d0();
    void thread_shakestate_we0();
    void thread_shakestate_we1();
    void thread_zext_ln76_fu_156_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
