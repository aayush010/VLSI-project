// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        m_address0,
        m_ce0,
        m_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_pp0_stage0 = 9'd4;
parameter    ap_ST_fsm_state5 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [5:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] i_2_reg_160;
wire   [0:0] icmp_ln352_fu_211_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_217_p2;
wire   [0:0] icmp_ln354_fu_223_p2;
reg   [0:0] icmp_ln354_reg_345;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln354_fu_229_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln354_fu_235_p1;
reg   [63:0] zext_ln354_reg_354;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln358_fu_247_p1;
reg   [63:0] zext_ln358_reg_370;
wire    ap_CS_fsm_state7;
wire   [4:0] i_4_fu_257_p2;
reg   [4:0] i_4_reg_378;
wire   [7:0] shl_ln_fu_263_p3;
reg   [7:0] shl_ln_reg_383;
wire   [0:0] icmp_ln358_fu_251_p2;
wire   [3:0] i_5_fu_281_p2;
reg   [3:0] i_5_reg_391;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln19_fu_275_p2;
reg   [4:0] s_addr_reg_401;
wire   [63:0] r_fu_323_p2;
wire    ap_CS_fsm_state9;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
reg   [7:0] t_address1;
reg    t_ce1;
reg    t_we1;
wire   [7:0] t_d1;
wire   [7:0] t_q1;
reg   [7:0] i_1_reg_149;
reg   [4:0] i_3_reg_171;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
reg   [63:0] r_0_i_reg_182;
reg   [3:0] i_0_i_reg_194;
wire   [63:0] zext_ln352_fu_206_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln20_fu_292_p1;
wire   [7:0] zext_ln19_fu_271_p1;
wire   [7:0] add_ln20_fu_287_p2;
wire   [2:0] trunc_ln20_fu_301_p1;
wire   [5:0] shl_ln1_fu_305_p3;
wire   [63:0] zext_ln20_1_fu_297_p1;
wire   [63:0] zext_ln20_2_fu_313_p1;
wire   [63:0] shl_ln20_fu_317_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

keccak_absorb_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(t_d1),
    .q1(t_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln352_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln352_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i_reg_194 <= i_5_reg_391;
    end else if (((icmp_ln358_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_i_reg_194 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_149 <= 8'd16;
    end else if (((icmp_ln352_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_149 <= i_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln352_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_160 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln354_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_160 <= add_ln354_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_171 <= i_4_reg_378;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_171 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_i_reg_182 <= r_fu_323_p2;
    end else if (((icmp_ln358_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        r_0_i_reg_182 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_4_reg_378 <= i_4_fu_257_p2;
        zext_ln358_reg_370[4 : 0] <= zext_ln358_fu_247_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_5_reg_391 <= i_5_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln354_reg_345 <= icmp_ln354_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln19_fu_275_p2 == 1'd1))) begin
        s_addr_reg_401 <= zext_ln358_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln358_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shl_ln_reg_383[7 : 3] <= shl_ln_fu_263_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln354_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln354_reg_354[4 : 0] <= zext_ln354_fu_235_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln354_fu_223_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln358_fu_251_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln358_fu_251_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address0 = s_addr_reg_401;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = zext_ln358_reg_370;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        t_address0 = 64'd135;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        t_address0 = zext_ln354_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = zext_ln352_fu_206_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_address1 = zext_ln20_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_address1 = 64'd135;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_d0 = 8'd31;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        t_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln354_reg_345 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln352_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln352_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln354_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln354_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln358_fu_251_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln19_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_287_p2 = (zext_ln19_fu_271_p1 + shl_ln_reg_383);

assign add_ln354_fu_229_p2 = (i_2_reg_160 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_4_fu_257_p2 = (i_3_reg_171 + 5'd1);

assign i_5_fu_281_p2 = (i_0_i_reg_194 + 4'd1);

assign i_fu_217_p2 = (i_1_reg_149 + 8'd1);

assign icmp_ln19_fu_275_p2 = ((i_0_i_reg_194 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln352_fu_211_p2 = ((i_1_reg_149 == 8'd136) ? 1'b1 : 1'b0);

assign icmp_ln354_fu_223_p2 = ((i_2_reg_160 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln358_fu_251_p2 = ((i_3_reg_171 == 5'd17) ? 1'b1 : 1'b0);

assign m_address0 = zext_ln354_fu_235_p1;

assign r_fu_323_p2 = (shl_ln20_fu_317_p2 | r_0_i_reg_182);

assign s_d0 = (s_q0 ^ r_0_i_reg_182);

assign shl_ln1_fu_305_p3 = {{trunc_ln20_fu_301_p1}, {3'd0}};

assign shl_ln20_fu_317_p2 = zext_ln20_1_fu_297_p1 << zext_ln20_2_fu_313_p1;

assign shl_ln_fu_263_p3 = {{i_3_reg_171}, {3'd0}};

assign t_d1 = (t_q0 | 8'd128);

assign trunc_ln20_fu_301_p1 = i_0_i_reg_194[2:0];

assign zext_ln19_fu_271_p1 = i_0_i_reg_194;

assign zext_ln20_1_fu_297_p1 = t_q1;

assign zext_ln20_2_fu_313_p1 = shl_ln1_fu_305_p3;

assign zext_ln20_fu_292_p1 = add_ln20_fu_287_p2;

assign zext_ln352_fu_206_p1 = i_1_reg_149;

assign zext_ln354_fu_235_p1 = i_2_reg_160;

assign zext_ln358_fu_247_p1 = i_3_reg_171;

always @ (posedge ap_clk) begin
    zext_ln354_reg_354[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln358_reg_370[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_383[2:0] <= 3'b000;
end

endmodule //keccak_absorb_2
