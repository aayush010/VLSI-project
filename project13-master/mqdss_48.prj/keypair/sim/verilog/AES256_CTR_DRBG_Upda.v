// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES256_CTR_DRBG_Upda (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        V_address0,
        V_ce0,
        V_we0,
        V_d0,
        V_q0,
        V_address1,
        V_ce1,
        V_we1,
        V_d1,
        V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] V_address0;
output   V_ce0;
output   V_we0;
output  [7:0] V_d0;
input  [7:0] V_q0;
output  [3:0] V_address1;
output   V_ce1;
output   V_we1;
output  [7:0] V_d1;
input  [7:0] V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
input  [7:0] DRBG_ctx_Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] V_address0;
reg V_ce0;
reg V_we0;
reg[7:0] V_d0;
reg[3:0] V_address1;
reg V_ce1;
reg V_we1;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg DRBG_ctx_Key_ce1;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_19_fu_519_p2;
reg   [1:0] i_19_reg_921;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_529_p3;
reg   [0:0] tmp_reg_926;
wire    ap_CS_fsm_state3;
reg   [3:0] V_addr_reg_930;
wire   [4:0] j_fu_548_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln331_fu_542_p2;
reg   [7:0] test_0_0_2_reg_943;
wire    ap_CS_fsm_state6;
reg   [7:0] test_0_1_2_reg_948;
reg   [7:0] test_0_2_2_reg_953;
wire    ap_CS_fsm_state7;
reg   [7:0] test_0_3_2_reg_958;
reg   [7:0] test_1_0_2_reg_963;
wire    ap_CS_fsm_state8;
reg   [7:0] test_1_1_2_reg_968;
reg   [7:0] test_1_2_2_reg_973;
wire    ap_CS_fsm_state9;
reg   [7:0] test_1_3_2_reg_978;
reg   [7:0] test_2_0_2_reg_983;
wire    ap_CS_fsm_state10;
reg   [7:0] test_2_1_2_reg_988;
reg   [7:0] test_2_2_2_reg_993;
wire    ap_CS_fsm_state11;
reg   [7:0] test_2_3_2_reg_998;
reg   [7:0] test_3_0_2_reg_1003;
wire    ap_CS_fsm_state12;
wire    grp_KeyExpansion_fu_502_ap_ready;
wire    grp_KeyExpansion_fu_502_ap_done;
reg   [7:0] test_3_1_2_reg_1008;
reg   [7:0] test_3_2_2_reg_1013;
wire    ap_CS_fsm_state13;
reg   [7:0] test_3_3_2_reg_1018;
wire   [5:0] shl_ln_fu_561_p3;
reg   [5:0] shl_ln_reg_1023;
wire    ap_CS_fsm_state14;
wire    grp_Cipher_fu_477_ap_ready;
wire    grp_Cipher_fu_477_ap_done;
reg   [7:0] test_0_2_reg_1041;
reg   [7:0] test_0_3_reg_1046;
reg   [7:0] test_1_0_reg_1051;
reg   [7:0] test_1_1_reg_1056;
reg   [7:0] test_1_2_reg_1061;
reg   [7:0] test_1_3_reg_1066;
reg   [7:0] test_2_0_reg_1071;
reg   [7:0] test_2_1_reg_1076;
reg   [7:0] test_2_2_reg_1081;
reg   [7:0] test_2_3_reg_1086;
reg   [7:0] test_3_0_reg_1091;
reg   [7:0] test_3_1_reg_1096;
reg   [7:0] test_3_2_reg_1101;
reg   [7:0] test_3_3_reg_1106;
wire   [5:0] i_fu_797_p2;
reg   [5:0] i_reg_1114;
wire    ap_CS_fsm_state22;
wire   [63:0] zext_ln347_fu_803_p1;
reg   [63:0] zext_ln347_reg_1119;
wire   [0:0] icmp_ln346_fu_791_p2;
wire   [4:0] i_18_fu_814_p2;
reg   [4:0] i_18_reg_1132;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln348_fu_808_p2;
reg   [7:0] ctx_RoundKey_address0;
reg    ctx_RoundKey_ce0;
reg    ctx_RoundKey_we0;
wire   [7:0] ctx_RoundKey_q0;
reg   [7:0] ctx_RoundKey_address1;
reg    ctx_RoundKey_ce1;
reg    ctx_RoundKey_we1;
wire   [7:0] ctx_RoundKey_q1;
reg   [5:0] buffer_assign_address0;
reg    buffer_assign_ce0;
reg    buffer_assign_we0;
reg   [7:0] buffer_assign_d0;
wire   [7:0] buffer_assign_q0;
reg   [5:0] buffer_assign_address1;
reg    buffer_assign_ce1;
reg    buffer_assign_we1;
reg   [7:0] buffer_assign_d1;
wire   [7:0] buffer_assign_q1;
wire    grp_Cipher_fu_477_ap_start;
wire    grp_Cipher_fu_477_ap_idle;
wire   [7:0] grp_Cipher_fu_477_RoundKey_address0;
wire    grp_Cipher_fu_477_RoundKey_ce0;
wire   [7:0] grp_Cipher_fu_477_RoundKey_address1;
wire    grp_Cipher_fu_477_RoundKey_ce1;
wire   [7:0] grp_Cipher_fu_477_ap_return_0;
wire   [7:0] grp_Cipher_fu_477_ap_return_1;
wire   [7:0] grp_Cipher_fu_477_ap_return_2;
wire   [7:0] grp_Cipher_fu_477_ap_return_3;
wire   [7:0] grp_Cipher_fu_477_ap_return_4;
wire   [7:0] grp_Cipher_fu_477_ap_return_5;
wire   [7:0] grp_Cipher_fu_477_ap_return_6;
wire   [7:0] grp_Cipher_fu_477_ap_return_7;
wire   [7:0] grp_Cipher_fu_477_ap_return_8;
wire   [7:0] grp_Cipher_fu_477_ap_return_9;
wire   [7:0] grp_Cipher_fu_477_ap_return_10;
wire   [7:0] grp_Cipher_fu_477_ap_return_11;
wire   [7:0] grp_Cipher_fu_477_ap_return_12;
wire   [7:0] grp_Cipher_fu_477_ap_return_13;
wire   [7:0] grp_Cipher_fu_477_ap_return_14;
wire   [7:0] grp_Cipher_fu_477_ap_return_15;
wire    grp_KeyExpansion_fu_502_ap_start;
wire    grp_KeyExpansion_fu_502_ap_idle;
wire   [7:0] grp_KeyExpansion_fu_502_RoundKey_address0;
wire    grp_KeyExpansion_fu_502_RoundKey_ce0;
wire    grp_KeyExpansion_fu_502_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_502_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_502_RoundKey_address1;
wire    grp_KeyExpansion_fu_502_RoundKey_ce1;
wire    grp_KeyExpansion_fu_502_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_502_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_502_Key_address0;
wire    grp_KeyExpansion_fu_502_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_502_Key_address1;
wire    grp_KeyExpansion_fu_502_Key_ce1;
reg   [1:0] i_0_reg_430;
wire    ap_CS_fsm_state21;
reg  signed [4:0] j_0_reg_442;
wire   [0:0] icmp_ln328_fu_513_p2;
reg   [5:0] i_2_reg_454;
wire    ap_CS_fsm_state23;
reg   [4:0] i_3_reg_465;
wire    ap_CS_fsm_state25;
reg    grp_Cipher_fu_477_ap_start_reg;
reg    grp_KeyExpansion_fu_502_ap_start_reg;
wire   [63:0] zext_ln331_fu_537_p1;
wire   [63:0] zext_ln145_fu_569_p1;
wire   [63:0] zext_ln187_fu_646_p1;
wire   [63:0] zext_ln188_fu_656_p1;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln189_fu_666_p1;
wire   [63:0] zext_ln190_fu_676_p1;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln191_fu_686_p1;
wire   [63:0] zext_ln192_fu_696_p1;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln193_fu_706_p1;
wire   [63:0] zext_ln194_fu_716_p1;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln195_fu_726_p1;
wire   [63:0] zext_ln196_fu_736_p1;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln197_fu_746_p1;
wire   [63:0] zext_ln198_fu_756_p1;
wire    ap_CS_fsm_state20;
wire   [63:0] zext_ln199_fu_766_p1;
wire   [63:0] zext_ln200_fu_776_p1;
wire   [63:0] zext_ln201_fu_786_p1;
wire   [63:0] zext_ln349_fu_828_p1;
wire   [63:0] zext_ln349_1_fu_833_p1;
wire   [7:0] add_ln334_fu_554_p2;
wire    ap_CS_fsm_state5;
wire  signed [31:0] sext_ln330_fu_525_p1;
wire   [5:0] or_ln187_fu_640_p2;
wire   [5:0] or_ln188_fu_651_p2;
wire   [5:0] or_ln189_fu_661_p2;
wire   [5:0] or_ln190_fu_671_p2;
wire   [5:0] or_ln191_fu_681_p2;
wire   [5:0] or_ln192_fu_691_p2;
wire   [5:0] or_ln193_fu_701_p2;
wire   [5:0] or_ln194_fu_711_p2;
wire   [5:0] or_ln195_fu_721_p2;
wire   [5:0] or_ln196_fu_731_p2;
wire   [5:0] or_ln197_fu_741_p2;
wire   [5:0] or_ln198_fu_751_p2;
wire   [5:0] or_ln199_fu_761_p2;
wire   [5:0] or_ln200_fu_771_p2;
wire   [5:0] or_ln201_fu_781_p2;
wire   [5:0] or_ln_fu_820_p3;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 grp_Cipher_fu_477_ap_start_reg = 1'b0;
#0 grp_KeyExpansion_fu_502_ap_start_reg = 1'b0;
end

AES256_CTR_DRBG_Ubkb #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
ctx_RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_RoundKey_address0),
    .ce0(ctx_RoundKey_ce0),
    .we0(ctx_RoundKey_we0),
    .d0(grp_KeyExpansion_fu_502_RoundKey_d0),
    .q0(ctx_RoundKey_q0),
    .address1(ctx_RoundKey_address1),
    .ce1(ctx_RoundKey_ce1),
    .we1(ctx_RoundKey_we1),
    .d1(grp_KeyExpansion_fu_502_RoundKey_d1),
    .q1(ctx_RoundKey_q1)
);

AES256_CTR_DRBG_Ucud #(
    .DataWidth( 8 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
buffer_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_assign_address0),
    .ce0(buffer_assign_ce0),
    .we0(buffer_assign_we0),
    .d0(buffer_assign_d0),
    .q0(buffer_assign_q0),
    .address1(buffer_assign_address1),
    .ce1(buffer_assign_ce1),
    .we1(buffer_assign_we1),
    .d1(buffer_assign_d1),
    .q1(buffer_assign_q1)
);

Cipher grp_Cipher_fu_477(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Cipher_fu_477_ap_start),
    .ap_done(grp_Cipher_fu_477_ap_done),
    .ap_idle(grp_Cipher_fu_477_ap_idle),
    .ap_ready(grp_Cipher_fu_477_ap_ready),
    .state_0_0_read(test_0_0_2_reg_943),
    .state_0_1_read(test_0_1_2_reg_948),
    .state_0_2_read(test_0_2_2_reg_953),
    .state_0_3_read(test_0_3_2_reg_958),
    .state_1_0_read(test_1_0_2_reg_963),
    .state_1_1_read(test_1_1_2_reg_968),
    .state_1_2_read(test_1_2_2_reg_973),
    .state_1_3_read(test_1_3_2_reg_978),
    .state_2_0_read(test_2_0_2_reg_983),
    .state_2_1_read(test_2_1_2_reg_988),
    .state_2_2_read(test_2_2_2_reg_993),
    .state_2_3_read(test_2_3_2_reg_998),
    .state_3_0_read(test_3_0_2_reg_1003),
    .state_3_1_read(test_3_1_2_reg_1008),
    .state_3_2_read(test_3_2_2_reg_1013),
    .state_3_3_read(test_3_3_2_reg_1018),
    .RoundKey_address0(grp_Cipher_fu_477_RoundKey_address0),
    .RoundKey_ce0(grp_Cipher_fu_477_RoundKey_ce0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .RoundKey_address1(grp_Cipher_fu_477_RoundKey_address1),
    .RoundKey_ce1(grp_Cipher_fu_477_RoundKey_ce1),
    .RoundKey_q1(ctx_RoundKey_q1),
    .ap_return_0(grp_Cipher_fu_477_ap_return_0),
    .ap_return_1(grp_Cipher_fu_477_ap_return_1),
    .ap_return_2(grp_Cipher_fu_477_ap_return_2),
    .ap_return_3(grp_Cipher_fu_477_ap_return_3),
    .ap_return_4(grp_Cipher_fu_477_ap_return_4),
    .ap_return_5(grp_Cipher_fu_477_ap_return_5),
    .ap_return_6(grp_Cipher_fu_477_ap_return_6),
    .ap_return_7(grp_Cipher_fu_477_ap_return_7),
    .ap_return_8(grp_Cipher_fu_477_ap_return_8),
    .ap_return_9(grp_Cipher_fu_477_ap_return_9),
    .ap_return_10(grp_Cipher_fu_477_ap_return_10),
    .ap_return_11(grp_Cipher_fu_477_ap_return_11),
    .ap_return_12(grp_Cipher_fu_477_ap_return_12),
    .ap_return_13(grp_Cipher_fu_477_ap_return_13),
    .ap_return_14(grp_Cipher_fu_477_ap_return_14),
    .ap_return_15(grp_Cipher_fu_477_ap_return_15)
);

KeyExpansion grp_KeyExpansion_fu_502(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_502_ap_start),
    .ap_done(grp_KeyExpansion_fu_502_ap_done),
    .ap_idle(grp_KeyExpansion_fu_502_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_502_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_502_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_502_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_502_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_502_RoundKey_d0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_502_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_502_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_502_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_502_RoundKey_d1),
    .RoundKey_q1(ctx_RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_502_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_502_Key_ce0),
    .Key_q0(DRBG_ctx_Key_q0),
    .Key_address1(grp_KeyExpansion_fu_502_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_502_Key_ce1),
    .Key_q1(DRBG_ctx_Key_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Cipher_fu_477_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_Cipher_fu_477_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_477_ap_ready == 1'b1)) begin
            grp_Cipher_fu_477_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeyExpansion_fu_502_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_KeyExpansion_fu_502_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_502_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_502_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_0_reg_430 <= i_19_reg_921;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_430 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln328_fu_513_p2 == 1'd1))) begin
        i_2_reg_454 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_2_reg_454 <= i_reg_1114;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln346_fu_791_p2 == 1'd1))) begin
        i_3_reg_465 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_3_reg_465 <= i_18_reg_1132;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln328_fu_513_p2 == 1'd0))) begin
        j_0_reg_442 <= 5'd15;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd1) & (tmp_reg_926 == 1'd0))) begin
        j_0_reg_442 <= j_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_529_p3 == 1'd0))) begin
        V_addr_reg_930 <= zext_ln331_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_18_reg_1132 <= i_18_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_19_reg_921 <= i_19_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_1114 <= i_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_477_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        shl_ln_reg_1023[5 : 4] <= shl_ln_fu_561_p3[5 : 4];
        test_0_2_reg_1041 <= grp_Cipher_fu_477_ap_return_2;
        test_0_3_reg_1046 <= grp_Cipher_fu_477_ap_return_3;
        test_1_0_reg_1051 <= grp_Cipher_fu_477_ap_return_4;
        test_1_1_reg_1056 <= grp_Cipher_fu_477_ap_return_5;
        test_1_2_reg_1061 <= grp_Cipher_fu_477_ap_return_6;
        test_1_3_reg_1066 <= grp_Cipher_fu_477_ap_return_7;
        test_2_0_reg_1071 <= grp_Cipher_fu_477_ap_return_8;
        test_2_1_reg_1076 <= grp_Cipher_fu_477_ap_return_9;
        test_2_2_reg_1081 <= grp_Cipher_fu_477_ap_return_10;
        test_2_3_reg_1086 <= grp_Cipher_fu_477_ap_return_11;
        test_3_0_reg_1091 <= grp_Cipher_fu_477_ap_return_12;
        test_3_1_reg_1096 <= grp_Cipher_fu_477_ap_return_13;
        test_3_2_reg_1101 <= grp_Cipher_fu_477_ap_return_14;
        test_3_3_reg_1106 <= grp_Cipher_fu_477_ap_return_15;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        test_0_0_2_reg_943 <= V_q0;
        test_0_1_2_reg_948 <= V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        test_0_2_2_reg_953 <= V_q1;
        test_0_3_2_reg_958 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        test_1_0_2_reg_963 <= V_q1;
        test_1_1_2_reg_968 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        test_1_2_2_reg_973 <= V_q1;
        test_1_3_2_reg_978 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        test_2_0_2_reg_983 <= V_q1;
        test_2_1_2_reg_988 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        test_2_2_2_reg_993 <= V_q1;
        test_2_3_2_reg_998 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_KeyExpansion_fu_502_ap_done == 1'b1))) begin
        test_3_0_2_reg_1003 <= V_q1;
        test_3_1_2_reg_1008 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        test_3_2_2_reg_1013 <= V_q1;
        test_3_3_2_reg_1018 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_926 <= j_0_reg_442[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln346_fu_791_p2 == 1'd0))) begin
        zext_ln347_reg_1119[5 : 0] <= zext_ln347_fu_803_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        DRBG_ctx_Key_address0 = zext_ln347_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_Key_address0 = grp_KeyExpansion_fu_502_Key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        DRBG_ctx_Key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_Key_ce0 = grp_KeyExpansion_fu_502_Key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_Key_ce1 = grp_KeyExpansion_fu_502_Key_ce1;
    end else begin
        DRBG_ctx_Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        DRBG_ctx_Key_we0 = 1'b1;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        V_address0 = 64'd0;
    end else if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd0) & (tmp_reg_926 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd1) & (tmp_reg_926 == 1'd0)))) begin
        V_address0 = V_addr_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        V_address0 = zext_ln331_fu_537_p1;
    end else begin
        V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        V_address1 = zext_ln349_1_fu_833_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        V_address1 = 64'd1;
    end else begin
        V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state12) & (grp_KeyExpansion_fu_502_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd0) & (tmp_reg_926 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd1) & (tmp_reg_926 == 1'd0)))) begin
        V_ce0 = 1'b1;
    end else begin
        V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state12) & (grp_KeyExpansion_fu_502_ap_done == 1'b1)))) begin
        V_ce1 = 1'b1;
    end else begin
        V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_reg_926 == 1'd0))) begin
        if ((icmp_ln331_fu_542_p2 == 1'd0)) begin
            V_d0 = add_ln334_fu_554_p2;
        end else if ((icmp_ln331_fu_542_p2 == 1'd1)) begin
            V_d0 = 8'd0;
        end else begin
            V_d0 = 'bx;
        end
    end else begin
        V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd0) & (tmp_reg_926 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln331_fu_542_p2 == 1'd1) & (tmp_reg_926 == 1'd0)))) begin
        V_we0 = 1'b1;
    end else begin
        V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        V_we1 = 1'b1;
    end else begin
        V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state24) & (icmp_ln348_fu_808_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln348_fu_808_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_assign_address0 = zext_ln347_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_address0 = zext_ln200_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_address0 = zext_ln198_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_address0 = zext_ln196_fu_736_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_address0 = zext_ln194_fu_716_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_address0 = zext_ln192_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_address0 = zext_ln190_fu_676_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_assign_address0 = zext_ln188_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_assign_address0 = zext_ln145_fu_569_p1;
    end else begin
        buffer_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_assign_address1 = zext_ln349_fu_828_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_address1 = zext_ln201_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_address1 = zext_ln199_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_address1 = zext_ln197_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_address1 = zext_ln195_fu_726_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_address1 = zext_ln193_fu_706_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_address1 = zext_ln191_fu_686_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_assign_address1 = zext_ln189_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_assign_address1 = zext_ln187_fu_646_p1;
    end else begin
        buffer_assign_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | ((grp_Cipher_fu_477_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        buffer_assign_ce0 = 1'b1;
    end else begin
        buffer_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state24) | ((grp_Cipher_fu_477_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        buffer_assign_ce1 = 1'b1;
    end else begin
        buffer_assign_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_d0 = test_3_2_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_d0 = test_3_0_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_d0 = test_2_2_reg_1081;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_d0 = test_2_0_reg_1071;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_d0 = test_1_2_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_d0 = test_1_0_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_assign_d0 = test_0_2_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_assign_d0 = grp_Cipher_fu_477_ap_return_0;
    end else begin
        buffer_assign_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        buffer_assign_d1 = test_3_3_reg_1106;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_assign_d1 = test_3_1_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_assign_d1 = test_2_3_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_assign_d1 = test_2_1_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buffer_assign_d1 = test_1_3_reg_1066;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_assign_d1 = test_1_1_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_assign_d1 = test_0_3_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_assign_d1 = grp_Cipher_fu_477_ap_return_1;
    end else begin
        buffer_assign_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | ((grp_Cipher_fu_477_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        buffer_assign_we0 = 1'b1;
    end else begin
        buffer_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | ((grp_Cipher_fu_477_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        buffer_assign_we1 = 1'b1;
    end else begin
        buffer_assign_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_502_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_address0 = grp_Cipher_fu_477_RoundKey_address0;
    end else begin
        ctx_RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_RoundKey_address1 = grp_KeyExpansion_fu_502_RoundKey_address1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_address1 = grp_Cipher_fu_477_RoundKey_address1;
    end else begin
        ctx_RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_502_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_ce0 = grp_Cipher_fu_477_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_502_RoundKey_ce1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_RoundKey_ce1 = grp_Cipher_fu_477_RoundKey_ce1;
    end else begin
        ctx_RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_502_RoundKey_we0;
    end else begin
        ctx_RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_502_RoundKey_we1;
    end else begin
        ctx_RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln328_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln331_fu_542_p2 == 1'd0) | (tmp_reg_926 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_KeyExpansion_fu_502_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_Cipher_fu_477_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln346_fu_791_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln348_fu_808_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_address1 = grp_KeyExpansion_fu_502_Key_address1;

assign DRBG_ctx_Key_d0 = buffer_assign_q0;

assign V_d1 = buffer_assign_q1;

assign add_ln334_fu_554_p2 = (V_q0 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_Cipher_fu_477_ap_start = grp_Cipher_fu_477_ap_start_reg;

assign grp_KeyExpansion_fu_502_ap_start = grp_KeyExpansion_fu_502_ap_start_reg;

assign i_18_fu_814_p2 = (i_3_reg_465 + 5'd1);

assign i_19_fu_519_p2 = (i_0_reg_430 + 2'd1);

assign i_fu_797_p2 = (i_2_reg_454 + 6'd1);

assign icmp_ln328_fu_513_p2 = ((i_0_reg_430 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln331_fu_542_p2 = ((V_q0 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln346_fu_791_p2 = ((i_2_reg_454 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln348_fu_808_p2 = ((i_3_reg_465 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_548_p2 = ($signed(j_0_reg_442) + $signed(5'd31));

assign or_ln187_fu_640_p2 = (shl_ln_fu_561_p3 | 6'd1);

assign or_ln188_fu_651_p2 = (shl_ln_reg_1023 | 6'd2);

assign or_ln189_fu_661_p2 = (shl_ln_reg_1023 | 6'd3);

assign or_ln190_fu_671_p2 = (shl_ln_reg_1023 | 6'd4);

assign or_ln191_fu_681_p2 = (shl_ln_reg_1023 | 6'd5);

assign or_ln192_fu_691_p2 = (shl_ln_reg_1023 | 6'd6);

assign or_ln193_fu_701_p2 = (shl_ln_reg_1023 | 6'd7);

assign or_ln194_fu_711_p2 = (shl_ln_reg_1023 | 6'd8);

assign or_ln195_fu_721_p2 = (shl_ln_reg_1023 | 6'd9);

assign or_ln196_fu_731_p2 = (shl_ln_reg_1023 | 6'd10);

assign or_ln197_fu_741_p2 = (shl_ln_reg_1023 | 6'd11);

assign or_ln198_fu_751_p2 = (shl_ln_reg_1023 | 6'd12);

assign or_ln199_fu_761_p2 = (shl_ln_reg_1023 | 6'd13);

assign or_ln200_fu_771_p2 = (shl_ln_reg_1023 | 6'd14);

assign or_ln201_fu_781_p2 = (shl_ln_reg_1023 | 6'd15);

assign or_ln_fu_820_p3 = {{1'd1}, {i_3_reg_465}};

assign sext_ln330_fu_525_p1 = j_0_reg_442;

assign shl_ln_fu_561_p3 = {{i_0_reg_430}, {4'd0}};

assign tmp_fu_529_p3 = j_0_reg_442[32'd4];

assign zext_ln145_fu_569_p1 = shl_ln_fu_561_p3;

assign zext_ln187_fu_646_p1 = or_ln187_fu_640_p2;

assign zext_ln188_fu_656_p1 = or_ln188_fu_651_p2;

assign zext_ln189_fu_666_p1 = or_ln189_fu_661_p2;

assign zext_ln190_fu_676_p1 = or_ln190_fu_671_p2;

assign zext_ln191_fu_686_p1 = or_ln191_fu_681_p2;

assign zext_ln192_fu_696_p1 = or_ln192_fu_691_p2;

assign zext_ln193_fu_706_p1 = or_ln193_fu_701_p2;

assign zext_ln194_fu_716_p1 = or_ln194_fu_711_p2;

assign zext_ln195_fu_726_p1 = or_ln195_fu_721_p2;

assign zext_ln196_fu_736_p1 = or_ln196_fu_731_p2;

assign zext_ln197_fu_746_p1 = or_ln197_fu_741_p2;

assign zext_ln198_fu_756_p1 = or_ln198_fu_751_p2;

assign zext_ln199_fu_766_p1 = or_ln199_fu_761_p2;

assign zext_ln200_fu_776_p1 = or_ln200_fu_771_p2;

assign zext_ln201_fu_786_p1 = or_ln201_fu_781_p2;

assign zext_ln331_fu_537_p1 = $unsigned(sext_ln330_fu_525_p1);

assign zext_ln347_fu_803_p1 = i_2_reg_454;

assign zext_ln349_1_fu_833_p1 = i_3_reg_465;

assign zext_ln349_fu_828_p1 = or_ln_fu_820_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1023[3:0] <= 4'b0000;
    zext_ln347_reg_1119[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //AES256_CTR_DRBG_Upda
